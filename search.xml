<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mac 常用命令</title>
      <link href="/2021/09/16/mac-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/09/16/mac-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一-进程管理"><a class="markdownIt-Anchor" href="#一-进程管理"></a> 一、进程管理</h1><h2 id="11-ps"><a class="markdownIt-Anchor" href="#11-ps"></a> 1.1 PS</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>ps -A</code> <br><code>ps -e</code> <br><code>ps -ax</code></td><td>查看系统所有的进程信息</td></tr><tr><td><code>ps -ef</code></td><td>查看详细的信息</td></tr><tr><td><code>id-nu &lt;num&gt;</code></td><td>查看UID对应的人信息</td></tr><tr><td><code>ps -p &lt;pid &gt;</code></td><td>查看pid详细信息</td></tr><tr><td><code>ps -u &lt;username&gt;</code></td><td>查看username对应的进程信息</td></tr><tr><td><code>ps -U &lt;uid&gt;</code></td><td>查看UID对应的进程信息</td></tr><tr><td><code>ps -A -o user -o pid -o comm</code></td><td>指定输出信息</td></tr><tr><td><code>ps -L</code></td><td>查询所有的关键词</td></tr></tbody></table><h2 id="12-kill"><a class="markdownIt-Anchor" href="#12-kill"></a> 1.2 kill</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>kill -9 &lt;pid&gt;</code></td><td>杀掉进程</td></tr></tbody></table><h2 id="13-killall"><a class="markdownIt-Anchor" href="#13-killall"></a> 1.3 killall</h2><blockquote><p>批量的结束进程通过进程名</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>killall -9 &lt;name&gt;</code></td><td>杀掉进程</td></tr></tbody></table><h2 id="14-plill"><a class="markdownIt-Anchor" href="#14-plill"></a> 1.4 plill</h2><blockquote><p>批量的结束进程通过进程名</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>pkill -9 &lt;name*&gt;</code></td><td>杀掉进程</td></tr></tbody></table><h1 id="二-温度-风扇-转速"><a class="markdownIt-Anchor" href="#二-温度-风扇-转速"></a> 二、温度、风扇、转速</h1><h2 id="21-powermetrics"><a class="markdownIt-Anchor" href="#21-powermetrics"></a> 2.1 powermetrics</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>sudo powermetrics</code></td><td>信息查询</td></tr><tr><td><code>sudo powermetrics -h</code></td><td></td></tr><tr><td><code>sudo powermetrics -s &lt;disk&gt;</code></td><td>指定采样器名称</td></tr></tbody></table><h1 id="三-定时关机-重启-睡眠"><a class="markdownIt-Anchor" href="#三-定时关机-重启-睡眠"></a> 三、定时关机、重启、睡眠</h1><h2 id="31-shutdown"><a class="markdownIt-Anchor" href="#31-shutdown"></a> 3.1 shutdown</h2><p><code>shutdown [-h | -s | -r ] time [提示信息]</code></p><ul><li>-h 立刻关机</li><li>-s 立刻睡眠</li><li>-r 代表重启</li></ul><p><strong>time</strong></p><ul><li>now</li><li>+分钟数</li><li>hh:mm今天的几时几分（24小时制）</li><li>yymmddhhmm指定年份月份日期小时分钟</li></ul><p><code>shutdown -s +10</code></p><blockquote><p>十分钟之后关机</p><p>使用ps - A ｜ grep shutdown 查询</p><p>使用kill 杀掉</p></blockquote><h2 id="32-reboot"><a class="markdownIt-Anchor" href="#32-reboot"></a> 3.2 reboot</h2><blockquote><p>立即重启</p></blockquote><h2 id="33-halt"><a class="markdownIt-Anchor" href="#33-halt"></a> 3.3 halt</h2><blockquote><p>立即关机</p><p>= shutdown -h now</p></blockquote><h1 id="四-网络命令"><a class="markdownIt-Anchor" href="#四-网络命令"></a> 四、网络命令</h1><h2 id="41-ifconfig"><a class="markdownIt-Anchor" href="#41-ifconfig"></a> 4.1 ifconfig</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/202109161346164.png" alt="image-20210916134646398"></p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>ifconfig &lt;interface-name&gt;</code></td><td>查询指定网卡信息</td></tr></tbody></table><h2 id="42-networksetup"><a class="markdownIt-Anchor" href="#42-networksetup"></a> 4.2 networksetup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络接口简写信息</span></span><br><span class="line">networksetup -listallhardwareports</span><br></pre></td></tr></table></figure><h2 id="43-ipconfig"><a class="markdownIt-Anchor" href="#43-ipconfig"></a> 4.3 ipconfig</h2><blockquote><p>获取ID地址</p></blockquote><p><code>ipconfig getifaddr interface-name</code></p><blockquote><p>获取网关地址</p></blockquote><p><code>ipconfig getoption en0 router</code></p><h2 id="44-netstat"><a class="markdownIt-Anchor" href="#44-netstat"></a> 4.4 netstat</h2><blockquote><p>查看网路连接、端口、协议</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/202109161427793.png" alt="image-20210916142724760"></p><ul><li><code>-a</code> 现实所有的连接信息，包括常用于服务器的一些端口监听连接</li></ul><blockquote><p>不加-a的话，默认不显示LISTEN连接信息的</p></blockquote><ul><li><code>-n</code> 不显示别名信息，用数字代替，可以加快命令的执行速度</li></ul><blockquote><p>比如：mysql的端口用3306直接显示，而不是用mysql这样的名称显示</p></blockquote><ul><li><code>-p</code> protocol 显示指定网络协议的连接，全部协议在/etc/protocols中</li></ul><blockquote><p>比如：-p tcp 或者 -p udp 也可以是 -p TCP 或者 -p UDP</p></blockquote><ul><li><code>-v</code>显示更多的信息，可以显示对应连接的进程ID（PID）等</li></ul><blockquote><p>当需要查看网络连接是属于哪个进程时可以使用</p></blockquote><ul><li><code>-r</code> 显示路由表信息</li><li><code>-L</code>显示监听队列的信息</li><li><code>-l</code> 显示出完整的IPV6的地址信息</li></ul><h2 id="45-lsof"><a class="markdownIt-Anchor" href="#45-lsof"></a> 4.5 lsof</h2><blockquote><p>查看系统打开文件信息比netstat更加友好</p></blockquote><ul><li><code>-i</code> 显示所有打开的网路连接</li></ul><blockquote><p>-i4 =&gt; ipv4 连接</p><p>-i6 =&gt; ipv6 连接</p><p>-iTCP =&gt;  tcp 连接</p><p>-iTCP:8080 =&gt; tcp8080 端口连接</p></blockquote><ul><li><code>-s</code> 与<code>-i</code>配合使用，用于指定特定的协议和特定的网络状态</li></ul><blockquote><p>lsof -iTCP -sTCP:LISTEN</p></blockquote><ul><li><code>-n</code> 不显示别名信息，用数字代替，可以加快命令的执行速度</li></ul><blockquote><p>比如：mysql的端口用3306直接显示，而不是用mysql这样的名称显示</p></blockquote><ul><li><code>-P</code> 不让端口号与端口名称之间转换，加快命令的执行速度</li></ul><blockquote><p>-n -P一起使用，-nP可以大大加快的命令的执行速度</p></blockquote><p><strong>例：</strong></p><p><code>sudo lsof -iTCP:3306 -sTCP:LISTEN -nP</code></p><p><strong>使用场景</strong></p><blockquote><p>查看监听状态的端口</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep LISTEN</span><br><span class="line">netstat -anv | grep -i listen</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -iTCP -sTCP:LISTEN -nP</span><br><span class="line">sudo lsof -iTCP -sTCP:LISTEN -nP</span><br></pre></td></tr></table></figure><blockquote><p>查看指定端口占用情况</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 3306</span><br><span class="line">netstat -anv | grep 3306</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -iTCP:3306 -sTCP:LISTEN -nP</span><br><span class="line">sudo lsof -iTCP:3306 -sTCP:LISTEN -nP</span><br></pre></td></tr></table></figure><h2 id="46-traceroute"><a class="markdownIt-Anchor" href="#46-traceroute"></a> 4.6 traceroute</h2><blockquote><p>追踪路由信息</p></blockquote><p><code>traceroute [域名|IP地址]</code></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登陆</title>
      <link href="/2021/09/15/%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86/"/>
      <url>/2021/09/15/%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h1 id="单点登录"><a class="markdownIt-Anchor" href="#单点登录"></a> 单点登录</h1><h2 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h2><blockquote><p>​单点登录：Single Sign On，它的出现致力于提供分布式项目中的用户登录和注销操作，使之只需要一次登陆即可在所有其他系统中无需登陆。注销同理，在任一系统中注销其他系统也会退出登陆。这样各个系统无需有登陆退出功能，统一进行用户授权。 比如阿里系的<strong>淘宝和天猫</strong>，很明显地我们可以知道这是两个系统，但是你在使用的时候，登录了天猫，淘宝无需再进行登录，一次授权，多个应用使用。</p></blockquote><p>在SSO体系中，主要包括三部分：</p><ol><li>User用户（多个）</li><li>Web 应用（多个）</li><li>SSO 认证中心（ 1 个）</li></ol><p>而SSO的实现基本核心原则如下：</p><ul><li>所有的登录授权都在 SSO 认证中心进行</li><li>SSO 认证中心通过一些方法来告诉 Web 应用当前访问用户究竟是不是已通过认证的用户</li><li>SSO 认证中心和所有的 Web 应用建立一种信任关系， SSO 认证中心对用户身份正确性的判断会通过某种方法告之 Web 应用，而且判断结果必须被 Web 应用信任。</li></ul><h2 id="二-单系统回顾"><a class="markdownIt-Anchor" href="#二-单系统回顾"></a> 二、单系统回顾</h2><p>​在了解SSO的实现之前，先对以往的单系统用户身份授权认证的实现进行简单回顾。<br>首先，HTTP是无状态的协议，服务器无法直接确认用户的信息。于是乎，W3C就提出了：给每一个用户都发一个通行证，无论谁访问的时候都需要携带通行证，这样服务器就可以从通行证上确认用户的信息。通行证就是Cookie。</p><hr><p>​如果说Cookie是检查用户身上的”通行证“来确认用户的身份，那么Session就是通过检查服务器上的”客户明细表“来确认用户的身份的。Session相当于在服务器中建立了一份“客户明细表”。</p><hr><p>​HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一个用户。于是乎：服务器向用户浏览器发送了一个名为JESSIONID的Cookie，它的值是Session的id值。其实Session是依据Cookie来识别是否是同一个用户。</p><hr><p><strong>所以，一般我们单系统实现登录会这样做：</strong></p><ul><li><strong>登录</strong>：将用户信息保存在Session对象中<br>如果在Session对象中能查到，说明已经登录;<br>如果在Session对象中查不到，说明没登录（或者已经退出了登录）</li><li><strong>注销</strong>（退出登录）：从Session中删除用户的信息</li><li><strong>记住我</strong>（关闭掉浏览器后，重新打开浏览器还能保持登录状态）：配合Cookie来用</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/202109151747264.png" alt></p><h2 id="三-技术实现"><a class="markdownIt-Anchor" href="#三-技术实现"></a> 三、技术实现</h2><h3 id="31-基于cookie的单点登录"><a class="markdownIt-Anchor" href="#31-基于cookie的单点登录"></a> 3.1 基于Cookie的单点登录</h3><p>​这是最简单的单点登录实现方式，是使用cookie作为媒介，存放用户凭证。 用户登录父应用之后，应用返回一个加密的cookie，当用户访问子应用的时候，携带上这个cookie，授权应用解密cookie并进行校验，校验通过则登录当前用户。</p><hr><p><strong>不难发现以上方式把信任存储在客户端的Cookie中，有以下两个问题</strong></p><p><strong>1 Cookie不安全</strong></p><p>​通过加密Cookie可以保证安全性，当然这是在源代码不泄露的前提下。如果Cookie<br>​的加密算法泄露，攻击者通过伪造Cookie则可以伪造特定用户身份，这是很危险的。</p><p><strong>2 不能跨域实现免登</strong></p><p>​不能跨域实现免登更是硬伤。因此，有了基于Session的单点登录</p><h3 id="32-基于session的单点登录"><a class="markdownIt-Anchor" href="#32-基于session的单点登录"></a> 3.2 基于Session的单点登录</h3><p>​Session解决了Cookie不能跨域的问题，但也存在其他问题。早期的单体应用使用Session实现单点登录，但现在大部分情况下都需要集群，由于存在多台服务器，Session在多台服务器之间是不共享的，因此，还需解决<code>Session共享的问题</code></p><hr><p><strong>解决系统之间的 Session 不共享问题有以下几种方案：</strong></p><ul><li>Tomcat集群Session全局复制（集群内每个tomcat的session完全同步）【会影响集群的性能呢，不建议】</li><li>根据请求的IP进行Hash映射到对应的机器上（这就相当于请求的IP一直会访问同一个服务器）【如果服务器宕机了，会丢失了一大部分Session的数据，不建议】</li><li>分布式Session，即把Session数据放在Redis中（使用Redis模拟Session）【建议】</li></ul><hr><p><strong>由上可以得出，当前大部分单点登录系统运行流程如下图</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/202109151746779.png" alt="流程图"></p><ol><li>用户登录系统应用1，发现未登录，重定向到认证系统登录，认证系统验证用户名和密码等信息通过，返回用户一个ticket，并将Session存入Redis或其他缓存容器</li><li>用户携带ticket登录系统应用2，应用系统2到认证系统进行ticket验证，若存在该ticket对应的Session，则登录成功</li><li>用户携带ticket登录系统应用3，应用系统3到认证系统进行ticket验证，若存在该ticket对应的Session，则登录成功</li></ol><h2 id="四-常见方案"><a class="markdownIt-Anchor" href="#四-常见方案"></a> 四、常见方案</h2><h3 id="41-cas"><a class="markdownIt-Anchor" href="#41-cas"></a> 4.1 CAS</h3><p>CAS(Central Authentication Service) 是 Yale 大学发起的一个开源项目，是单点登录的一种现方式，分为CAS服务端和CAS客户端<img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/202109151751288.png" alt></p><p><strong>具体流程如下：</strong></p><ol><li><p>用户访问app系统，app系统是需要登录的，但用户现在没有登录。</p></li><li><p>跳转到CAS server，即SSO登录系统，以后图中的CAS Server我们统一叫做SSO系统。 SSO系统也没有登录，弹出用户登录页。</p></li><li><p>用户填写用户名、密码，SSO系统进行认证后，将登录状态写入SSO的session，浏览器（Browser）中写入SSO域下的Cookie。</p></li><li><p>SSO系统登录完成后会生成一个ST（Service Ticket），然后跳转到app系统，同时将ST作为参数传递给app系统。</p></li><li><p>app系统拿到ST后，从后台向SSO发送请求，验证ST是否有效。</p></li><li><p>SSO系统返回验证结果</p></li><li><p>验证通过后，app系统将登录状态写入session并设置app域下的Cookie。</p></li></ol><p>至此，跨域单点登录就完成了。以后我们再访问app系统时，app就是登录的。接下来，我们再看看访问app2系统时的流程。</p><ol start="8"><li>用户访问app2系统，app2系统没有登录，跳转到SSO。</li><li>由于SSO已经登录了，不需要重新登录认证。</li><li>SSO生成ST，浏览器跳转到app2系统，并将ST作为参数传递给app2。</li><li>app2拿到ST，后台访问SSO，验证ST是否有效。</li><li>SSO系统返回验证结果</li><li>验证成功后，app2将登录状态写入session，并在app2域下写入Cookie。<br>这样，app2系统不需要走登录流程，就已经是登录了。SSO，app和app2在不同的域，它们之间的session不共享也是没问题的。</li></ol><h3 id="42-oauth2第三方登录授权"><a class="markdownIt-Anchor" href="#42-oauth2第三方登录授权"></a> 4.2 oauth2（第三方登录授权）</h3><p>​    OAuth（Open Authorization，开放授权）是为用户资源的授权定义了一个安全、开放及简单的标准，第三方无需知道用户的账号及密码，就可获取到用户的授权信息</p><p>​主要应用于第三方应用授权登录：在APP或者网页接入一些第三方应用时，时常会需要用户登录另一个合作平台，比如QQ，微博，微信的授权登录,第三方应用通过oauth2方式获取用户信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/202109151751613.png" alt></p><p><strong>详细步骤如下（以微信登录为例）：</strong></p><ol><li><p>用户访问第三方网站,第三方应用需要用户登录验证,用户选择微信授权登录</p></li><li><p>第三方应用发起微信登录授权请求</p></li><li><p>微信服务器拉起用户授权确认页面</p></li><li><p>用户授权通过</p></li><li><p>微信发送请求到第三方应用redirctUrl(第2步填写redirct_uri参数),返回凭证code与state(第2步自定义)</p></li><li><p>第三方应用获取到code之后,根据code获取accessToken</p></li><li><p>根据accessToken获取用户信息</p></li><li><p>对用户信息进行处理(用户是否第一次登录,保存用户信息,自定义token,session处理等)</p></li><li><p>返回结果(步骤1对应url或者重定向到首页)</p></li></ol><h3 id="43jwt客户端token"><a class="markdownIt-Anchor" href="#43jwt客户端token"></a> 4.3JWT（客户端token）</h3><p>难度较大，需要了解很多协议</p><hr><p>Json web token (JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标（(RFC7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。<br>基于JWT认证协议，自己开发SSO服务和权限控制。</p><hr><p>以上为常见的单点登录解决方案，当然，在使用的同时也会和其他的权限授权认证的安全框架整合实现。</p><p><strong>常见的安全框架有</strong></p><ul><li>Spring Security</li><li>Shiro</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 安装brew</title>
      <link href="/2021/09/14/mac-%E5%AE%89%E8%A3%85brew/"/>
      <url>/2021/09/14/mac-%E5%AE%89%E8%A3%85brew/</url>
      
        <content type="html"><![CDATA[<h1 id="brew安装"><a class="markdownIt-Anchor" href="#brew安装"></a> brew安装</h1><ol><li>安装SwitchHost</li><li>改host，一定要用强大的且齐全的host</li><li>终端自己改代理</li></ol><p><strong>终端如何改代理</strong><br>这个10080要改成你自己的</p><figure class="highlight plaintext"><figcaption><span>s</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:10080 http_proxy=http://127.0.0.1:10080 all_proxy=socks5://127.0.0.1:10080</span><br></pre></td></tr></table></figure><p><strong>官网给出的安装命令行</strong></p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><strong>国内一键安装地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac man汉化</title>
      <link href="/2021/09/14/mac-man%E6%B1%89%E5%8C%96/"/>
      <url>/2021/09/14/mac-man%E6%B1%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="记录mac-man汉化过程"><a class="markdownIt-Anchor" href="#记录mac-man汉化过程"></a> 记录mac man汉化过程</h1><h2 id="一-环境"><a class="markdownIt-Anchor" href="#一-环境"></a> 一、环境</h2><ul><li>操作系统：MacBook Pro (13-inch, M1, 2020)</li></ul><p>系统版本：Big Sur 11.5.2</p><h2 id="二-汉化过程"><a class="markdownIt-Anchor" href="#二-汉化过程"></a> 二、汉化过程</h2><ul><li>man数据目录位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/man/ ls</span><br><span class="line">man1 man4 man5 man6 man7 man8 man9 mann</span><br></pre></td></tr></table></figure><ul><li>修改man.conf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/man.conf</span><br></pre></td></tr></table></figure><ul><li>找到MANPATH，自行添加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line">MANPATH /Users/curiosity/man/LinuxManCN</span><br></pre></td></tr></table></figure><ul><li>两条命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man -aw</span><br><span class="line">man -M</span><br></pre></td></tr></table></figure><p><code>-aw</code>选项可以让你查看你的机器上到底有多少种不同版本的man</p><p><code>-M</code>选项可以让我们指定某个版本的manpage</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man -M /Users/curiosity/man/LinuxManCN mkdir</span><br></pre></td></tr></table></figure><p>就可以查看Linux的中文版mkdir了。</p><p>如果想灵活地在多个doc之间切换，可以尝试在.zshrc里面添<code>alias</code>，而不去配置MANPATH。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> linuxmancn=<span class="string">&#x27;man -M $HOME/Documents/LinuxManCN&#x27;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="ttps://raw.githubusercontent.com/lijinzedev/picture/main/img/202109141504895.png" alt="配置"></p><p><strong>执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="三-解决乱码"><a class="markdownIt-Anchor" href="#三-解决乱码"></a> 三、解决乱码</h2><ul><li>安装 groff</li></ul><p>m1的brew默认安装在/opt下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install groff</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>这条命令在我这里并不能软连接到/usr/local/bin我使用了绝对路径</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link groff</span><br></pre></td></tr></table></figure><ul><li>配置man.conf</li></ul><p><strong>添加</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NROFF preconv -e utf8 <span class="params">| /usr/local/bin/groff -Wall -mtty-char -Tutf8 -mandoc -c</span></span><br><span class="line"><span class="params">PAGER /usr/bin/less -isR</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/349918075#ref_1_0">^</a>Linux英文man下载 <a href="https://mirrors.edge.kernel.org/pub/linux/docs/man-pages/">https://mirrors.edge.kernel.org/pub/linux/docs/man-pages/</a></li><li><a href="https://zhuanlan.zhihu.com/p/349918075#ref_2_0">^</a>Linux中文man下载 <a href="https://github.com/man-pages-zh/manpages-zh/tree/master/src">https://github.com/man-pages-zh/manpages-zh/tree/master/src</a></li><li><a href="https://zhuanlan.zhihu.com/p/349918075#ref_3_0">^</a>m1的macbook安装arm的brew <a href="https://blog.csdn.net/u013474815/article/details/113154668">https://blog.csdn.net/u013474815/article/details/113154668</a></li><li><a href="https://zhuanlan.zhihu.com/p/349918075#ref_4_0">^</a>Github-Issue <a href="https://github.com/man-pages-zh/manpages-zh/issues/22">https://github.com/man-pages-zh/manpages-zh/issues/22</a></li><li><a href="https://zhuanlan.zhihu.com/p/349918075#ref_4_0">^</a>大佬提出的m1 解决方案https://zhuanlan.zhihu.com/p/349918075</li></ol>]]></content>
      
      
      <categories>
          
          <category> mac环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在YAML中使用Maven变量</title>
      <link href="/2021/09/02/%E5%9C%A8YAML%E4%B8%AD%E4%BD%BF%E7%94%A8Maven%E5%8F%98%E9%87%8F/"/>
      <url>/2021/09/02/%E5%9C%A8YAML%E4%B8%AD%E4%BD%BF%E7%94%A8Maven%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="在yaml中使用maven变量"><a class="markdownIt-Anchor" href="#在yaml中使用maven变量"></a> 在YAML中使用Maven变量</h1><ol><li>在外部pom.xml 中定义变量</li></ol><p>例如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--默认激活配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当前环境--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.profile.name</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">pom.profile.name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Nacos配置中心地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.ip</span>&gt;</span>appstore-nacos<span class="tag">&lt;/<span class="name">pom.nacos.ip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.port</span>&gt;</span>8848<span class="tag">&lt;/<span class="name">pom.nacos.port</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.namespace</span>&gt;</span>mobile<span class="tag">&lt;/<span class="name">pom.nacos.namespace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.profile.name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">pom.profile.name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Nacos配置中心地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.ip</span>&gt;</span>appstore-nacos<span class="tag">&lt;/<span class="name">pom.nacos.ip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.port</span>&gt;</span>8848<span class="tag">&lt;/<span class="name">pom.nacos.port</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.namespace</span>&gt;</span>mobile<span class="tag">&lt;/<span class="name">pom.nacos.namespace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.profile.name</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">pom.profile.name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Nacos配置中心地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.ip</span>&gt;</span>appstore-nacos<span class="tag">&lt;/<span class="name">pom.nacos.ip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.port</span>&gt;</span>8848<span class="tag">&lt;/<span class="name">pom.nacos.port</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pom.nacos.namespace</span>&gt;</span>mobile<span class="tag">&lt;/<span class="name">pom.nacos.namespace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置<a href="http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html">Maven 资源插件</a>以过滤包含**application.yml文件的目录。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">appstore:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">ip:</span> <span class="string">$&#123;NACOS_HOST:@pom.nacos.ip@&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;NACOS_PORT:@pom.nacos.port@&#125;</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;NACOS_ID:@pom.nacos.namespace@&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@pom.profile.name@</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway 扩展</title>
      <link href="/2021/08/24/Spring-Cloud-Gateway-%E6%89%A9%E5%B1%95/"/>
      <url>/2021/08/24/Spring-Cloud-Gateway-%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EMQX入门</title>
      <link href="/2021/08/10/EMQX%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/10/EMQX%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="物联网亿万级通信一站式解决方案emq"><a class="markdownIt-Anchor" href="#物联网亿万级通信一站式解决方案emq"></a> 物联网亿万级通信一站式解决方案EMQ</h1><h2 id="1-mqtt"><a class="markdownIt-Anchor" href="#1-mqtt"></a> 1. MQTT</h2><h3 id="11-mqtt简介"><a class="markdownIt-Anchor" href="#11-mqtt简介"></a> 1.1 MQTT简介</h3><h4 id="111-什么是mqtt"><a class="markdownIt-Anchor" href="#111-什么是mqtt"></a> 1.1.1 什么是MQTT</h4><p>​MQTT（Message Queuing Telemetry  Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的&quot;轻量级&quot;通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210810232650.png" alt="img"></p><p>一个使用MQTT协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：</p><ul><li>（1）发布其他客户端可能会订阅的信息；</li><li>（2）订阅其它客户端发布的消息；</li><li>（3）退订或删除应用程序的消息；</li><li>（4）断开与服务器连接。</li></ul><p>MQTT服务器以称为&quot;消息代理&quot;（Broker），可以是一个应用程序或一台设备。它是位于消息发布者和订阅者之间，它可以：</p><ul><li>（1）接受来自客户的网络连接；</li><li>（2）接受客户发布的应用信息；</li><li>（3）处理来自客户端的订阅和退订请求；</li><li>（4）向订阅的客户转发应用程序消息。</li></ul><h4 id="112-设计原则"><a class="markdownIt-Anchor" href="#112-设计原则"></a> 1.1.2 设计原则</h4><p>由于物联网的环境是非常特别的，所以MQTT遵循以下设计原则：</p><ul><li><p>（1）精简，不添加可有可无的功能；</p></li><li><p>（2）发布/订阅（Pub/Sub）模式，方便消息在传感器之间传递，解耦Client/Server模式，带来的好处在于不必预先知道对方的存在（ip/port），不必同时运行；</p></li><li><p>（3）允许用户动态创建主题（不需要预先创建主题），零运维成本；</p></li><li><p>（4）把传输量降到最低以提高传输效率；</p></li><li><p>（5）把低带宽、高延迟、不稳定的网络等因素考虑在内；</p></li><li><p>（6）支持连续的会话保持和控制（心跳）；</p></li><li><p>（7）理解客户端计算能力可能很低；</p></li><li><p>（8）提供服务质量（ <em>quality of service level</em>：QoS）管理</p></li><li><p>（9）不强求传输数据的类型与格式，保持灵活性（指的是应用层业务数据）。</p></li></ul><h4 id="113-应用领域"><a class="markdownIt-Anchor" href="#113-应用领域"></a> 1.1.3 应用领域</h4><p>MQTT协议广泛应用于物联网、移动互联网、智能硬件、车联网、电力能源等领域。</p><ul><li>物联网M2M通信，物联网大数据采集</li><li>Android消息推送，WEB消息推送</li><li>移动即时消息，例如Facebook Messenger</li><li>智能硬件、智能家居、智能电器</li><li>车联网通信，电动车站桩采集</li><li>智慧城市、远程医疗、远程教育</li><li>电力、石油与能源等行业市场</li></ul><h3 id="12-mqtt协议相关概念"><a class="markdownIt-Anchor" href="#12-mqtt协议相关概念"></a> 1.2 MQTT协议相关概念</h3><h4 id="121-mqtt协议实现方式"><a class="markdownIt-Anchor" href="#121-mqtt协议实现方式"></a> 1.2.1 MQTT协议实现方式</h4><p>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publisher）、代理（Broker）（服务器）、订阅者（Subscriber）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p><p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p><ul><li>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；</li><li>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</li></ul><h4 id="122-mqtt协议中的方法"><a class="markdownIt-Anchor" href="#122-mqtt协议中的方法"></a> 1.2.2 MQTT协议中的方法</h4><p>MQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：</p><ul><li>（1）<strong>CONNECT</strong>：客户端连接到服务器</li><li>（2）CONNACK：连接确认</li><li>（3）<strong>PUBLISH</strong>：发布消息</li><li>（4）PUBACK：发布确认</li><li>（5）PUBREC：发布的消息已接收</li><li>（6）PUBREL：发布的消息已释放</li><li>（7）PUBCOMP：发布完成</li><li>（8）<strong>SUBSCRIBE</strong>：订阅请求</li><li>（9）SUBACK：订阅确认</li><li>（10）UNSUBSCRIBE：取消订阅</li><li>（11）UNSUBACK：取消订阅确认</li><li>（12）PINGREQ：客户端发送心跳</li><li>（13）PINGRESP：服务端心跳响应</li><li>（14）<strong>DISCONNECT</strong>：断开连接</li><li>（15）AUTH：认证</li></ul><h3 id="13-消息服务质量qos"><a class="markdownIt-Anchor" href="#13-消息服务质量qos"></a> 1.3 消息服务质量QoS</h3><p>MQTT 协议中规定了消息服务质量（Quality of Service），它保证了在不同的网络环境下消息传递的可靠性，QoS 的设计是 MQTT 协议里的重点。作为专为物联网场景设计的协议，MQTT 的运行场景不仅仅是 PC，而是更广泛的窄带宽网络和低功耗设备，如果能在协议层解决传输质量的问题，将为物联网应用的开发提供极大便利。</p><h4 id="131-消息服务质量qos三个等级"><a class="markdownIt-Anchor" href="#131-消息服务质量qos三个等级"></a> 1.3.1 消息服务质量QoS三个等级</h4><p>MQTT 设计了 3 个 QoS 等级。</p><ul><li><p>QoS 0：消息最多传递一次，如果当时客户端不可用，则会丢失该消息。</p></li><li><p>QoS 1：消息传递至少 1 次。</p></li><li><p>QoS 2：消息仅传送一次。</p><p>QoS0：“至多一次”，消息发布完全依赖底层TCP/IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210810233039.png" alt></p><p>QoS1：“至少一次”，确保消息到达，但消息重复可能会发生。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100237.png" alt></p><p>QoS2：“只有一次”，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100300.png" alt></p><h4 id="132-发布与订阅qos"><a class="markdownIt-Anchor" href="#132-发布与订阅qos"></a> 1.3.2 发布与订阅QoS</h4><p>MQTT 发布与订阅操作中的 QoS 代表了不同的含义，发布时的 QoS 表示消息发送到服务端时使用的 QoS，订阅时的 QoS 表示服务端向自己转发消息时可以使用的最大 QoS。</p><ul><li>当客户端 A 的发布 QoS 大于客户端 B 的订阅 QoS 时，服务端向客户端 B 转发消息时使用的 QoS 为客户端 B 的订阅 QoS。</li><li>当客户端 A 的发布 QoS 小于客户端 B 的订阅 QoS 时，服务端向客户端 B 转发消息时使用的 QoS 为客户端 A 的发布 QoS。</li></ul><p>不同情况下客户端收到的消息 QoS 可参考下表：</p><table><thead><tr><th>发布消息的 QoS</th><th>主题订阅的 QoS</th><th>接收消息的 QoS</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>2</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td><td>1</td></tr><tr><td>2</td><td>0</td><td>0</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td></tr></tbody></table><h3 id="14-topic通配符匹配规则"><a class="markdownIt-Anchor" href="#14-topic通配符匹配规则"></a> 1.4 Topic通配符匹配规则</h3><p>层级分隔符：/</p><blockquote><p><strong>/ 用来分割主题树的每一层，并给主题空间提供分等级的结构。当两个通配符在一个主题中出现的时候，主题层次分隔符的使用是很重要的。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">love/you/with/all/my/heart</span><br></pre></td></tr></table></figure><p>多层通配符：#</p><blockquote><p><strong>多层通配符有可以表示大于等于0的层次。因此，love/#也可匹配到单独的love，此时#代表0层。</strong></p></blockquote><blockquote><p><strong>多层通配符一定要是主题树的最后一个字符。比如说，love/#是有效的，但是love/#/with是无效的。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">love/you/#可匹配如下内容（包括但不限于）</span><br><span class="line"></span><br><span class="line">love/you</span><br><span class="line">love/you/with</span><br><span class="line">love/you/with/all</span><br><span class="line">love/you/with/all/my/heart</span><br><span class="line">love/you/with/all/my/hearts</span><br></pre></td></tr></table></figure><p>单层通配符：+</p><blockquote><p><strong>只匹配主题的一层。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. love/you/+  :匹配love/you/with和love/you/and，但是不匹配love/you/with/all/my/heart。</span><br><span class="line">2. 单层通配符只匹配1层，love/+不匹配love。</span><br><span class="line">3. 单层通配符可以被用于主题树的任意层级，连带多层通配符。它必须被用在主题层级分隔符/的右边，除非它是指定自己。因此，+和love/+都是有效的，但是love+无效。单层通配符可以用在主题树的末端，也可以用在中间。比如说，love/+和love/+/with都是有效。</span><br></pre></td></tr></table></figure><p>注意事项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.主题层次分隔符被用来在主题中引入层次。多层的通配符和单层通配符可以被使用，但他们不能被使用来做发布者的消息。</span><br><span class="line">2.Topic命名尽量见名知意，符合规范，主题名字是大小写敏感的。比如说，love和LOVE是两个不同的主题。</span><br><span class="line">3.以/开头会产生一个不同的主题。比如说，/love与love不同。/love匹配&quot;+/+&quot;和/+,但不匹配+</span><br><span class="line">4.不要在任何主题中包含null（Unicode \x0000）字符。</span><br><span class="line">5.在主题树中，长度被限制于64k内但是在这以内没有限制层级的数目 。</span><br><span class="line">6.可以有任意数目的根节点；也就是说，可以有任意数目的主题树。</span><br></pre></td></tr></table></figure><h2 id="2-emqx"><a class="markdownIt-Anchor" href="#2-emqx"></a> 2. EMQX</h2><h3 id="21-emq-x简介"><a class="markdownIt-Anchor" href="#21-emq-x简介"></a> 2.1 EMQ X简介</h3><p>EMQ X 是开源社区中最流行的 MQTT 消息服务器。</p><p>EMQ官网：<a href="https://www.emqx.cn/">https://www.emqx.cn/</a></p><p>EMQ X 公司主要提供三个版本：开源版、企业版、平台版  可在官网首页产品导航查看每一种产品；主要体现在支持的连接数量、产品功能和商业服务等方面的区别。</p><p>**为什么选择EMQ X ?**从支持 MQTT5.0、稳定性、扩展性、集群能力等方面考虑，EMQX 的表现应该是最好的。</p><p>EMQ X 是开源百万级分布式 MQTT 消息服务器（MQTT Messaging Broker），用于支持各种接入标准 MQTT 协议的设备，实现从设备端到服务器端的消息传递，以及从服务器端到设备端的设备控制消息转发。从而实现物联网设备的数据采集，和对设备的操作和控制。</p><p>与别的MQTT服务器相比<strong>EMQ X 主要有以下的特点：</strong></p><ul><li><p>经过100+版本的迭代，EMQ X 目前为开源社区中最流行的 MQTT 消息中间件，在各种客户严格的生产环境上经受了严苛的考验；</p></li><li><p>EMQ X 支持丰富的物联网协议，包括 MQTT、MQTT-SN、CoAP、 LwM2M、LoRaWAN 和 WebSocket 等；</p></li><li><p>优化的架构设计，支持超大规模的设备连接。企业版单机能支持百万的 MQTT 连接；集群能支持千万级别的 MQTT 连接；</p></li><li><p>易于安装和使用；</p></li><li><p>灵活的扩展性，支持企业的一些定制场景；</p></li><li><p>中国本地的技术支持服务，通过微信、QQ等线上渠道快速响应客户需求；</p></li><li><p>基于 Apache 2.0 协议许可，完全开源。EMQ X 的代码都放在 <a href="https://github.com/emqx/emqx">Github</a> 中，用户可以查看所有源代码。</p></li><li><p>EMQ X 3.0 支持 MQTT 5.0 协议，是开源社区中第一个支持 5.0协议规范的消息服务器，并且完全兼容 MQTT V3.1 和 V3.1.1 协议。除了 MQTT 协议之外，EMQ X 还支持别的一些物联网协议</p></li><li><p>单机支持百万连接，集群支持千万级连接；毫秒级消息转发。EMQ X 中应用了多种技术以实现上述功能，</p><ul><li>利用 Erlang/OTP 平台的软实时、高并发和容错（电信领域久经考验的语言）</li><li>全异步架构</li><li>连接、会话、路由、集群的分层设计</li><li>消息平面和控制平面的分离等</li></ul></li><li><p>扩展模块和插件，EMQ X 提供了灵活的扩展机制，可以实现私有协议、认证鉴权、数据持久化、桥接转发和管理控制台等的扩展</p></li><li><p>桥接：EMQ X 可以跟别的消息系统进行对接，比如 EMQ X Enterprise 版本中可以支持将消息转发到 Kafka、RabbitMQ 或者别的 EMQ 节点等</p></li><li><p>共享订阅：共享订阅支持通过负载均衡的方式在多个订阅者之间来分发 MQTT 消息。比如针对物联网等数据采集场景，会有比较多的设备在发送数据，通过共享订阅的方式可以在订阅端设置多个订阅者来实现这几个订阅者之间的工作负载均衡</p></li></ul><h3 id="22-环境搭建与配置"><a class="markdownIt-Anchor" href="#22-环境搭建与配置"></a> 2.2 环境搭建与配置</h3><h4 id="221-安装"><a class="markdownIt-Anchor" href="#221-安装"></a> 2.2.1 安装</h4><p>安装的方式有很多种，可供自由选择：</p><p>Shell脚本安装、包管理器安装、二进制包安装、ZIP压缩包安装、Homebrew安装、Docker运行安装、Helm安装、源码编译安装</p><p><strong>Docker运行安装</strong></p><p>在EMQ X Broker下载页面直接提供的有基于docker的安装命令</p><p>1：首先拉取emqx的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker emqx]# docker pull emqx/emqx:v4.1.0</span><br></pre></td></tr></table></figure><p>2：使用docker命令运行得到docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker emqx]# docker run -tid --name emqx -p 1883:1883 -p 8083:8083 -p 8081:8081 -p 8883:8883 -p 8084:8084 -p 18083:18083  emqx/emqx:v4.1.0</span><br></pre></td></tr></table></figure><p>EMQ X broker提供了Dashboard 以方便用户管理设备与监控相关指标，启动后我们通过访问服务端18083端口</p><p>地址：<a href="http://192.168.200.128:18083">http://192.168.200.128:18083</a></p><p>访问Dashboard 查看启动效果!</p><h4 id="222-目录结构"><a class="markdownIt-Anchor" href="#222-目录结构"></a> 2.2.2 目录结构</h4><p>不同安装方式得到的 EMQ X 其目录结构会有所不同，具体如下:</p><table><thead><tr><th>描述</th><th>使用 ZIP 压缩包安装(同docker)</th><th>使用二进制包安装</th></tr></thead><tbody><tr><td>可执行文件目录</td><td>./bin</td><td>/usr/lib/emqx/bin</td></tr><tr><td>数据文件</td><td>./data</td><td>/var/lib/emqx/data</td></tr><tr><td>Erlang 虚拟机文件</td><td>./erts-*</td><td>/usr/lib/emqx/erts-*</td></tr><tr><td>配置文件目录</td><td>./etc</td><td>/etc/emqx</td></tr><tr><td>依赖项目录</td><td>./lib</td><td>/usr/lib/emqx/lib</td></tr><tr><td>日志文件</td><td>./log</td><td>/var/log/emqx</td></tr><tr><td>启动相关的脚本、schema 文件</td><td>./releases</td><td>/usr/lib/emqx/releases</td></tr></tbody></table><p>以上目录中，用户经常接触与使用的是 <code>bin</code>、<code>etc</code>、<code>data</code>、<code>log</code> 目录。</p><p><strong>bin 目录</strong></p><p><em>emqx、emqx.cmd</em>：EMQ X 的可执行文件</p><p><em>emqx_ctl、emqx_ctl.cmd</em>：EMQ X 管理命令的可执行文件</p><p><strong>etc 目录</strong></p><p>EMQ X 通过 <code>etc</code> 目录下配置文件进行设置，主要配置文件包括:</p><table><thead><tr><th>配置文件</th><th>说明</th></tr></thead><tbody><tr><td>emqx.conf</td><td>EMQ X 配置文件</td></tr><tr><td>acl.conf</td><td>EMQ X 默认 ACL 规则配置文件</td></tr><tr><td>plugins/*.conf</td><td>EMQ X 各类插件配置文件</td></tr><tr><td>certs/*</td><td>EMQ X SSL 证书文件</td></tr><tr><td>emqx.lic</td><td>License 文件仅限 EMQ X Enterprise</td></tr></tbody></table><p><strong>data 目录</strong></p><p>EMQ X 将运行数据存储在 <code>data</code> 目录下，主要的文件包括:</p><p><em>configs/app.*.config</em></p><p>EMQ X 读取 <code>etc/emqx.conf</code> 和 <code>etc/plugins/*.conf</code> 中的配置后，转换为 Erlang 原生配置文件格式，并在运行时读取其中的配置。</p><p><em>loaded_plugins</em></p><p><code>loaded_plugins</code> 文件记录了 EMQ X 默认启动的插件列表，可以修改此文件以增删默认启动的插件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> <span class="string">cat loaded_plugins</span></span><br><span class="line"><span class="attr">emqx_management.</span></span><br><span class="line"><span class="attr">emqx_recon.</span></span><br><span class="line"><span class="attr">emqx_retainer.</span></span><br><span class="line"><span class="attr">emqx_dashboard.</span></span><br><span class="line"><span class="attr">emqx_rule_engine.</span></span><br><span class="line"><span class="attr">emqx_web_hook.</span></span><br></pre></td></tr></table></figure><p><em>mnesia</em></p><p>Mnesia 数据库是 Erlang 内置的一个分布式 DBMS，可以直接存储 Erlang 的各种数据结构。</p><p>EMQ X 使用 Mnesia 数据库存储自身运行数据，例如告警记录、规则引擎已创建的资源和规则、Dashbaord 用户信息等数据，这些数据都将被存储在 <code>mnesia</code> 目录下，因此一旦删除该目录，将导致 EMQ X 丢失所有业务数据。</p><h3 id="23-dashboard"><a class="markdownIt-Anchor" href="#23-dashboard"></a> 2.3 Dashboard</h3><h4 id="231-功能简介"><a class="markdownIt-Anchor" href="#231-功能简介"></a> 2.3.1 功能简介</h4><p>EMQ X 提供了 Dashboard 以方便用户管理设备与监控相关指标。通过  Dashboard可以查看服务器基本信息、负载情况和统计数据，可以查看某个客户端的连接状态等信息甚至断开其连接，也可以动态加载和卸载指定插件。除此之外，EMQ X Dashboard 还提供了规则引擎的可视化操作界面，同时集成了一个简易的 MQTT 客户端工具供用户测试使用。</p><p>EMQ X Dashboard 是一个 Web 应用程序，你可以直接通过浏览器来访问它，无需安装任何其他软件。</p><p>当 EMQ X 成功运行在你的本地计算机上且 EMQ X Dashboard 被默认启用时，通过访问 <a href="http://localhost:18083">http://localhost:18083</a> 来查看Dashboard，默认用户名是 <code>admin</code>，密码是 <code>public</code>。</p><p>为了使用户在操作和浏览中可以快速地定位和切换当前位置，EMQ X Dashboard 采用了侧边导航的模式，默认情况下 Dashboard 包含以下一级导航项目：</p><blockquote><p>最新版本EMQ X Broker的Dashboard界面布局略有不同，增加了些导航，但基本都差不多</p></blockquote><table><thead><tr><th>导航项目</th><th>说明</th></tr></thead><tbody><tr><td>Monitor</td><td>提供了服务端与客户端监控信息的展示页面</td></tr><tr><td>RULE ENGINE</td><td>提供了规则引擎的可视化操作页面</td></tr><tr><td>MANAGEMENT</td><td>提供了扩展插件与应用的管理页面</td></tr><tr><td>TOOLS</td><td>提供了 WebSocket 客户端工具以及 HTTP API 速查页面</td></tr><tr><td>ADMIN</td><td>提供了 Dashboard 用户管理和显示设置等页面</td></tr></tbody></table><h4 id="232-websocket发布订阅测试"><a class="markdownIt-Anchor" href="#232-websocket发布订阅测试"></a> 2.3.2 Websocket发布订阅测试</h4><h3 id="24-客户端调试工具mqttx"><a class="markdownIt-Anchor" href="#24-客户端调试工具mqttx"></a> 2.4 客户端调试工具MQTTX</h3><p><a href="https://mqttx.app/cn">MQTT X</a> 是 <a href="http://emqx.cn/">EMQ</a> 开源的一款优雅的跨平台 MQTT 5.0 桌面客户端，它支持 macOS, Linux, Windows。</p><p><a href="https://mqttx.app/cn">MQTT X</a> 的 <code>UI</code> 采用了聊天界面形式，简化了页面操作逻辑，用户可以快速创建连接，允许保存多个客户端，方便用户快速测试 <code>MQTT/MQTTS</code> 连接，及 <code>MQTT</code> 消息的订阅和发布。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100318.gif" alt></p><p><a href="https://mqttx.app/cn">https://mqttx.app/cn</a></p><h2 id="3延迟发布"><a class="markdownIt-Anchor" href="#3延迟发布"></a> 3.延迟发布</h2><h3 id="31-简介"><a class="markdownIt-Anchor" href="#31-简介"></a> 3.1 简介</h3><p>EMQ X 的延迟发布功能可以实现按照用户配置的时间间隔延迟发布 PUBLISH 报文的功能。当客户端使用特殊主题前缀 <code>$delayed/&#123;DelayInteval&#125;</code> 发布消息到 EMQ X 时，将触发延迟发布功能。延迟发布的功能是针对消息发布者而言的，订阅方只需要按照正常的主题订阅即可。</p><blockquote><p>应用场景举例说明：</p><p>某智能售货机平台在双十一当天要对设备中所有商品做5折销售，双十一过去之后要立马恢复原价，为了满足这样的场景，我们可以在双十一0点给所有设备发送两条消息，一条消息是通过正常的主题发送，消息内容打5折；第二条消息延迟消息，延迟24小时，消息内容是恢复原价。这样在一个实现中可以完成两个业务场景。</p></blockquote><p>延迟发布主题的具体格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">$delayed/&#123;DelayInterval&#125;/&#123;TopicName&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>$delayed</code>: 使用 <code>$delayed</code> 作为主题前缀的消息都将被视为需要延迟发布的消息。延迟间隔由下一主题层级中的内容决定。</li><li><code>&#123;DelayInterval&#125;</code>: 指定该 MQTT 消息延迟发布的时间间隔，单位是秒，允许的最大间隔是 4294967 秒。如果 <code>&#123;DelayInterval&#125;</code> 无法被解析为一个整型数字，EMQ X 将丢弃该消息，客户端不会收到任何信息。</li><li><code>&#123;TopicName&#125;</code>: MQTT 消息的主题名称。</li></ul><blockquote><p>例如:</p><p><code>$delayed/15/x/y</code>: 15 秒后将 MQTT 消息发布到主题 <code>x/y</code>。</p><p><code>$delayed/60/a/b</code>: 1 分钟后将 MQTT 消息发布到 <code>a/b</code>。</p><p><code>$delayed/3600/mytopic</code>: 1 小时后将 MQTT 消息发布到 <code>mytopic</code>。</p></blockquote><p><strong>此功能由 <code>emqx_mod_delayed</code> 模块提供，需要开启模块后才能使用此功能。</strong></p><h3 id="32-演示"><a class="markdownIt-Anchor" href="#32-演示"></a> 3.2 演示</h3><p>1：直接在Dashboard上订阅主题：<code>t2/a</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100344.png" alt></p><p>然后在Dashboard上向主题：<code>$delayed/10/t2/a</code>发送消息</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100403.png" alt></p><h2 id="4共享订阅"><a class="markdownIt-Anchor" href="#4共享订阅"></a> 4.共享订阅</h2><p>共享订阅是在多个订阅者之间实现负载均衡的订阅方式：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100408.png" alt></p><p>上图中，3 个 subscriber 用共享订阅的方式订阅了同一个主题 <code>$share/g/topic</code>，其中<code>topic</code> 才是它们订阅的真实主题名，而  <code>$share/g/</code> 只是共享订阅前缀。</p><p>EMQ X 支持两种格式的共享订阅前缀：</p><table><thead><tr><th>示例</th><th>前缀</th><th>真实主题名</th></tr></thead><tbody><tr><td>$queue/t/1</td><td>$queue/</td><td>t/1</td></tr><tr><td>$share/abc/t/1</td><td>$share/abc</td><td>t/1</td></tr></tbody></table><p>注意：共享订阅的主题格式是针对订阅端来指定的，例如：<code>$share/g/t/a</code>；而消息的发布方是向主题：<code>t/a</code>发布消息。这样在订阅方才能达到负载均衡的效果。</p><p><strong>应用场景举例说明：</strong></p><p>某智能售货机平台下在全国有50万台售货机设备，在实际运营过程中平均每秒中会收到5万台设备上报过来的出货结果数据，假如用普通主题订阅来处理的话，消息的消费节点会有5万的并发，极有可能会导致该节点宕机，造成出货数据的丢失，对后续结算等业务操作造成极大困扰；如果只是简单增加消费节点的话也无法解决该问题，因为每个节点都会收到所有同样的数据，在这种业务场景下我们，我们希望通过增加消费节点并且节点之间是分摊消息的消费，以此来增强整个系统的负载能力和可用性，那我们就可以通过共享订阅来满足这种业务场景。</p><h3 id="41-不带群组的共享订阅"><a class="markdownIt-Anchor" href="#41-不带群组的共享订阅"></a> 4.1 不带群组的共享订阅</h3><p><strong>以 <code>$queue/</code> 为前缀的共享订阅是不带群组的共享订阅</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100414.png" alt></p><p><strong>演示：</strong></p><p>我们还是在Dashboard的Websocket工具里发布消息：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100419.png" alt></p><p>查看客户端消息的接收情况</p><p>EMQ X 的共享订阅支持均衡策略配置：etc/emqx.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 均衡策略</span></span><br><span class="line"><span class="comment">## Dispatch strategy for shared subscription</span></span><br><span class="line"><span class="comment">##                   </span></span><br><span class="line"><span class="comment">## Value: Enum</span></span><br><span class="line"><span class="comment">## - random                                </span></span><br><span class="line"><span class="comment">## - round_robin</span></span><br><span class="line"><span class="comment">## - sticky   </span></span><br><span class="line"><span class="comment">## - hash                                                             </span></span><br><span class="line">    <span class="meta">broker.shared_subscription_strategy</span> = <span class="string">random  </span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">均衡策略</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">random</td><td style="text-align:left">在所有订阅者中随机选择</td></tr><tr><td style="text-align:left">round_robin</td><td style="text-align:left">按照订阅顺序轮询</td></tr><tr><td style="text-align:left">sticky</td><td style="text-align:left">一直发往上次选取的订阅者</td></tr><tr><td style="text-align:left">hash</td><td style="text-align:left">按照发布者 ClientID 的哈希值</td></tr></tbody></table><h3 id="42-带群组的共享订阅"><a class="markdownIt-Anchor" href="#42-带群组的共享订阅"></a> 4.2 带群组的共享订阅</h3><p><strong>以 <code>$share/&lt;group-name&gt;</code> 为前缀的共享订阅是带群组的共享订阅</strong></p><p>group-name 可以为任意字符串，属于同一个群组内部的订阅者将以负载均衡接收消息，但 EMQ X 会向不同群组广播消息。</p><p>例如，假设订阅者 s1，s2，s3 属于群组 g1，订阅者 s4，s5 属于群组 g2。那么当 EMQ X 向这个主题发布消息 msg1 的时候：</p><ul><li>EMQ X 会向两个群组 g1 和 g2 同时发送 msg1</li><li>s1，s2，s3 中只有一个会收到 msg1</li><li>s4，s5 中只有一个会收到 msg1</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100426.png" alt></p><p><strong>案例演示：</strong></p><p>通过MQTTX 客户端工具新增五个连接，分别是s1、s2、s3、s4、s5</p><p>s1、s2、s3 以群组方式订阅主题  $share/g1/topic</p><p>s4、s5  以群组方式订阅主题  $share/g2/topic</p><p>通过emq的websocket工具发送消息到主题  topic，此时g1和g2分别会有一个订阅者会收到消息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100439.png" alt></p><h2 id="5代理订阅"><a class="markdownIt-Anchor" href="#5代理订阅"></a> 5.代理订阅</h2><h3 id="51-代理订阅应用场景"><a class="markdownIt-Anchor" href="#51-代理订阅应用场景"></a> 5.1 代理订阅应用场景</h3><p><strong>EMQ X 的代理订阅功能使得客户端在连接建立时，不需要发送额外的 SUBSCRIBE 报文，便能自动建立用户预设的订阅关系。</strong></p><blockquote><p>应用场景举例说明：</p><p>某冷链平台下有大量的冷链运输车，前期车上只配备了温度传感器，将车内的温度数据通过物联网终端经过EMQ定期上报给指标采集系统，由该系统将相关数据透传到一个大数据分析平台，用来分析这些温度数据，后来车上又配置了湿度传感器，这些湿度信息也会上报到EMQ，大数据平台也需要分析这些湿度信息，此时我们的指标采集系统就需要再单独开发一套订阅湿度信息的代码，如果我们采用代理订阅的话就无需再开发这块代码，只需经过简单的配置就可以增加这个功能了。</p></blockquote><h3 id="52-代理订阅配置"><a class="markdownIt-Anchor" href="#52-代理订阅配置"></a> 5.2 代理订阅配置</h3><p>EMQ X 通过内置代理订阅模块就可以通过配置文件来指定代理订阅规则从而实现代理订阅，适用于有规律可循的静态的代理订阅需求。</p><p>默认是关闭的，我们需要开启该模块</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210811100447.png" alt></p><p>仅仅开启并不意味代理订阅已经工作，你还需要配置相应的规则，EMQ X 的代理订阅规则支持用户自行配置，用户可以自行添加多条代理订阅规则，每条代理订阅规则都需要指定 Topic 和 QoS，规则的数量没有限制，在 <code>etc/emqx.conf</code> 文件中添代理订阅规则的格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">module.subscription.&lt;number&gt;.topic</span> = <span class="string">&lt;topic&gt;</span></span><br><span class="line"><span class="meta">module.subscription.&lt;number&gt;.qos</span> = <span class="string">&lt;qos&gt;</span></span><br></pre></td></tr></table></figure><p>在配置代理订阅的主题时，EMQ X 提供了 <code>%c</code> 和 <code>%u</code> 两个占位符供用户使用，EMQ X 会在执行代理订阅时将配置中的 <code>%c</code> 和 <code>%u</code> 分别替换为客户端的 <code>Client ID</code> 和 <code>Username</code>，需要注意的是，<code>%c</code> 和 <code>%u</code> 必须占用一整个主题层级。</p><p>例如，在 <code>etc/emqx.conf</code> 文件中添加以下代理订阅规则：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">module.subscription.1.topic</span> = <span class="string">client/%c    </span></span><br><span class="line"><span class="meta">module.subscription.1.qos</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">module.subscription.2.topic</span> = <span class="string">user/%u    </span></span><br><span class="line"><span class="meta">module.subscription.2.qos</span> = <span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">module.subscription.3.topic</span> = <span class="string">testtopic/#</span></span><br><span class="line"><span class="meta">module.subscription.3.qos</span> = <span class="string">2</span></span><br></pre></td></tr></table></figure><p>当一个客户端连接 EMQ X 的时候，假设客户端的 <code>Client ID</code> 为 <code>testclient</code>，<code>Username</code> 为 <code>tester</code>，根据上文的配置规则，代理订阅功能会主动帮客户端订阅 QoS 为 1 的 <code>client/testclient</code> 和 QoS 为 2 的 <code>user/tester</code> 这两个主题。</p><p>这些配置都是基于配置文件实现的<strong>静态代理订阅</strong>，开源版本的EMQ X目前只支持这种静态代理订阅，收费的 EMQ X Enterprise 版本中支持<strong>动态代理订阅</strong>，通过外部数据库设置主题列表在设备连接时读取列表实现代理订阅。</p><h2 id="6-保留消息"><a class="markdownIt-Anchor" href="#6-保留消息"></a> 6. 保留消息</h2><h3 id="61-保留消息应用场景"><a class="markdownIt-Anchor" href="#61-保留消息应用场景"></a> 6.1 保留消息应用场景</h3><p>服务端收到 Retain 标志为 1 的 PUBLISH 报文时，会将该报文视为保留消息，除了被正常转发以外，保留消息会被存储在服务端，每个主题下只能存在一份保留消息，因此如果已经存在相同主题的保留消息，则该保留消息被替换。</p><p>当客户端建立订阅时，如果服务端存在主题匹配的保留消息，则这些保留消息将被立即发送给该客户端。借助保留消息，新的订阅者能够立即获取最近的状态，而不需要等待无法预期的时间，这在很多场景下非常重要的。</p><p>EMQ X 默认开启保留消息的功能，可以在 <code>etc/emqx.conf</code> 中修改 <code>mqtt.retain_available</code> 为 <code>false</code> 以禁用保留消息功能。如果 EMQ X 在保留消息功能被禁用的情况下依然收到了保留消息，那么将返回原因码为 0x9A（不支持保留消息）的 DISCONNECT 报文。</p><p><strong>应用场景举例：</strong></p><p>某车联网项目，车辆出租公司会实时监控所有车辆的GPS地理位置信息，这些信息是通过每个车辆每10分钟定时上报的GPS信息，这些信息需要展示在某调度系统的大屏上，该调度系统因为其他模块升级需要重新部署，升级后也需要去订阅获取所有车辆的GPS信息，上线完成后刚好错过了车辆最近一次上报的GPS信息，如果这些消息不是保留消息，该调度系统大屏上是空白的，必须等10分钟后才能调度这些车辆，10分钟内无法做出任何操作，用户体验非常差，但是如果这些信息是保留消息，该系统上线后立即就会收到最近所有车辆的位置信息，立即就可以展示然后进行调度。</p><h3 id="62-保留消息配置"><a class="markdownIt-Anchor" href="#62-保留消息配置"></a> 6.2 保留消息配置</h3><p>EMQ X 的保留消息功能是由 <code>emqx_retainer</code> 插件实现，该插件默认开启，通过修改 <code>emqx_retainer</code> 插件的配置，可以调整 EMQ X 储存保留消息的位置，限制接收保留消息数量和 Payload 最大长度，以及调整保留消息的过期时间。</p><p><code>emqx_retainer</code> 插件默认开启，插件的配置路径为 <code>etc/plugins/emqx_retainer.conf</code>。</p><table><thead><tr><th>配置项</th><th>类型</th><th>可取值</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>retainer.storage_type</td><td>enum</td><td><code>ram</code>, <code>disc</code>, <code>disc_only</code></td><td>ram</td><td>ram：仅储存在内存中；disc：储存在内存和硬盘中；disc_only：仅储存在硬盘中。</td></tr><tr><td>retainer.max_retained_messages</td><td>integer</td><td>&gt;= 0</td><td>0</td><td>保留消息的最大数量，0 表示没有限制。保留消息数量超出最大值限制后，可以替换已存在的保留消息，但不能为新的主题储存保留消息。</td></tr><tr><td>retainer.max_payload_size</td><td>bytesize</td><td></td><td>1MB</td><td>保留消息的最大 Payload 值。Payload 大小超出最大值后 EMQ Ｘ 消息服务器会把收到的保留消息作为普通消息处理。</td></tr><tr><td>retainer.expiry_interval</td><td>duration</td><td></td><td>０</td><td>保留消息的过期时间，0 表示永不过期。如果 PUBLISH 报文中设置了消息过期间隔，那么以 PUBLISH 报文中的消息过期间隔为准。单位：毫秒</td></tr></tbody></table><p>EMQ X Enterprise 中可将保留消息存储到多种外部数据库。</p><h2 id="7认证"><a class="markdownIt-Anchor" href="#7认证"></a> 7.认证</h2><h3 id="71-认证简介"><a class="markdownIt-Anchor" href="#71-认证简介"></a> 7.1 认证简介</h3><p>​身份认证是大多数应用的重要组成部分，MQTT 协议支持用户名密码认证，启用身份认证能有效阻止非法客户端的连接。EMQ X 中的认证指的是当一个客户端连接到 EMQ X 的时候，通过服务器端的配置来控制客户端连接服务器的权限。</p><p>​EMQ X 支持使用内置数据源（文件、内置数据库）、JWT、外部主流数据库和自定义 HTTP API 作为身份认证数据源。连接数据源、进行认证逻辑通过插件实现的，每个插件对应一种认证方式，使用前需要启用相应的插件。</p><p>​客户端连接时插件通过检查其 username/clientid 和 password 是否与指定数据源的信息一致来实现对客户端的身份认证。</p><h4 id="711-认证方式"><a class="markdownIt-Anchor" href="#711-认证方式"></a> 7.1.1 认证方式</h4><p>EMQ X 支持的认证方式：</p><p><em>内置数据源</em></p><ul><li>Username 认证（即将废弃）</li><li>Cliend ID 认证（即将废弃）</li></ul><p>使用配置文件与 EMQ X 内置数据库提供认证数据源，通过 HTTP API 进行管理，足够简单轻量。</p><p><em>外部数据库</em></p><ul><li>LDAP 认证</li><li>MySQL 认证</li><li>PostgreSQL 认证</li><li>Redis 认证</li><li>MongoDB 认证</li></ul><p>外部数据库可以存储大量数据，同时方便与外部设备管理系统集成。</p><p><em>其他</em></p><ul><li>HTTP 认证</li><li>JWT 认证</li></ul><p>JWT 认证可以批量签发认证信息，HTTP 认证能够实现复杂的认证鉴权逻辑。</p><p>更改插件配置后需要重启插件才能生效，部分认证鉴权插件包含 ACL 功能</p><h4 id="712-认证结果与匿名认证"><a class="markdownIt-Anchor" href="#712-认证结果与匿名认证"></a> 7.1.2 认证结果与匿名认证</h4><p><strong>认证结果</strong></p><p>任何一种认证方式最终都会返回一个结果：</p><ul><li>认证成功：经过比对客户端认证成功</li><li>认证失败：经过比对客户端认证失败，数据源中密码与当前密码不一致</li><li>忽略认证（ignore）：当前认证方式中未查找到认证数据，无法显式判断结果是成功还是失败，交由认证链下一认证方式或匿名认证来判断</li></ul><p><strong>匿名认证</strong></p><p>EMQ X 默认配置中启用了匿名认证，任何客户端都能接入 EMQ X。没有启用认证插件或认证插件没有显式允许/拒绝（ignore）连接请求时，EMQ X 将根据匿名认证启用情况决定是否允许客户端连接。</p><p>配置匿名认证开关：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etc/emqx.conf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## Value: true | false</span></span><br><span class="line"><span class="attr">allow_anonymous</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure><p>生产环境中请禁用匿名认证。</p><p>注意：我们需要进入到容器内部修改该配置，然后重启EMQ X服务</p><h3 id="72-http认证"><a class="markdownIt-Anchor" href="#72-http认证"></a> 7.2 HTTP认证</h3><p>HTTP 认证使用外部自建 HTTP 应用认证数据源，根据 HTTP API 返回的数据判定认证结果，能够实现复杂的认证鉴权逻辑。启用该功能需要将<code>emqx_auth_http</code>插件启用，并且修改该插件的配置文件，在里面指定HTTP认证接口的url。<code>emqx_auth_http</code>插件同时还包含了ACL的功能。</p><p>EMQ X 在设备连接事件中使用当前客户端相关信息作为参数，向用户自定义的认证服务发起请求查询权限，通过返回的 HTTP <strong>响应状态码</strong> (HTTP statusCode) 来处理认证请求。</p><ul><li>认证失败：API 返回 4xx 状态码</li><li>认证成功：API 返回 200 状态码</li><li>忽略认证：API 返回 200 状态码且消息体 ignore</li></ul><h4 id="721-认证请求配置"><a class="markdownIt-Anchor" href="#721-认证请求配置"></a> 7.2.1 认证请求配置</h4><p>进行身份认证时，EMQ X 将使用当前客户端信息填充并发起用户配置的认证查询请求，查询出该客户端在 HTTP 服务器端的认证数据。</p><p>打开etc/plugins/emqx_auth_http.conf配置文件，通过修改如下内容：修改完成后需要重启EMQX服务</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etc/plugins/emqx_auth_http.conf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 请求地址</span></span><br><span class="line"><span class="meta">auth.http.auth_req</span> = <span class="string">http://192.168.200.0:8991/mqtt/auth</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## HTTP 请求方法</span></span><br><span class="line"><span class="comment">## Value: post | get | put</span></span><br><span class="line"><span class="meta">auth.http.auth_req.method</span> = <span class="string">post</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 请求参数</span></span><br><span class="line"><span class="meta">auth.http.auth_req.params</span> = <span class="string">clientid=%c,username=%u,password=%P</span></span><br></pre></td></tr></table></figure><p>HTTP 请求方法为 GET 时，请求参数将以 URL 查询字符串的形式传递；POST、PUT 请求则将请求参数以普通表单形式提交（content-type 为 x-www-form-urlencoded）。</p><p>你可以在认证请求中使用以下占位符，请求时 EMQ X 将自动填充为客户端信息：</p><ul><li>%u：用户名</li><li>%c：Client ID</li><li>%a：客户端 IP 地址</li><li>%r：客户端接入协议</li><li>%P：明文密码</li><li>%p：客户端端口</li><li>%C：TLS 证书公用名（证书的域名或子域名），仅当 TLS 连接时有效</li><li>%d：TLS 证书 subject，仅当 TLS 连接时有效</li></ul><p>推荐使用 POST 与 PUT 方法，使用 GET 方法时明文密码可能会随 URL 被记录到传输过程中的服务器日志中。</p><h4 id="722-认证服务开发"><a class="markdownIt-Anchor" href="#722-认证服务开发"></a> 7.2.2 认证服务开发</h4><p>创建基于springboot的应用程序：<code>emq-demo</code></p><p>1：相关坐标如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>emq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>emq-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>emq demo演示<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2：创建application.yml配置文件并配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8991</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">emq-demo</span> </span><br></pre></td></tr></table></figure><p>3：创建Controller：com.itheima.controller.mqtt.AuthController；编写如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by 传智播客*黑马程序员.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mqtt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(AuthController.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; users;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        users = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        users.put(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//实际的密码应该是密文,mqtt的http认证组件传输过来的密码是明文，我们需要自己进行加密验证</span></span><br><span class="line">        users.put(<span class="string">&quot;emq-client2&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        users.put(<span class="string">&quot;emq-client3&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/auth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; auth(<span class="meta">@RequestParam(&quot;clientid&quot;)</span> String clientid, </span><br><span class="line">                                  <span class="meta">@RequestParam(&quot;username&quot;)</span> String username, </span><br><span class="line">                                  <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)&#123;</span><br><span class="line">        log.info(<span class="string">&quot;emqx认证组件调用自定义的认证服务开始认证,clientid=&#123;&#125;,username=&#123;&#125;,password=&#123;&#125;&quot;</span>,clientid,username,password);</span><br><span class="line">        <span class="comment">//在此处可以进行复杂也的认证逻辑,但是我们为了演示方便做一个固定操作</span></span><br><span class="line">        String value = users.get(username);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(value))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Object&gt;(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!value.equals(password))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Object&gt;(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Object&gt;(HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8acl"><a class="markdownIt-Anchor" href="#8acl"></a> 8.ACL</h2><h3 id="81-acl简介"><a class="markdownIt-Anchor" href="#81-acl简介"></a> 8.1 ACL简介</h3><p>ACL是指对发布(publish)/订阅(subscribe)操作的权限控制。例如拒绝用户<code>emq-demo</code>向<code>testTopic/a</code>主题发布消息。 EMQ X 支持通过客户端发布订阅 ACL 进行客户端权限的管理。</p><h4 id="811-acl-插件"><a class="markdownIt-Anchor" href="#811-acl-插件"></a> 8.1.1 ACL 插件</h4><p>EMQ X 支持使用配置文件、外部主流数据库和自定义 HTTP API 作为 ACL 数据源。</p><p>连接数据源、进行访问控制功能是通过插件实现的，使用前需要启用相应的插件。</p><p>客户端订阅主题、发布消息时插件通过检查目标主题（Topic）是否在指定数据源允许/禁止列表内来实现对客户端的发布、订阅权限管理。</p><p><strong>配置文件</strong></p><ul><li>内置 ACL</li></ul><p>使用配置文件提供认证数据源，适用于变动较小的 ACL 管理。</p><p><strong>外部数据库</strong></p><ul><li>MySQL ACL</li><li>PostgreSQL ACL</li><li>Redis ACL</li><li>MongoDB ACL</li></ul><p>外部数据库可以存储大量数据、动态管理 ACL，方便与外部设备管理系统集成。</p><p><strong>其他</strong></p><ul><li>HTTP ACL</li></ul><p>HTTP ACL 能够实现复杂的 ACL 管理。</p><blockquote><p>ACL 功能包含在认证鉴权插件中，更改插件配置后需要<strong>重启插件</strong>才能生效，</p></blockquote><h4 id="812-授权结果与全局配置"><a class="markdownIt-Anchor" href="#812-授权结果与全局配置"></a> 8.1.2 授权结果与全局配置</h4><p>任何一次 ACL 授权最终都会返回一个结果：</p><ul><li>允许：经过检查允许客户端进行操作</li><li>禁止：经过检查禁止客户端操作</li><li>忽略（ignore）：未查找到 ACL 权限信息（no match），无法显式判断结果是允许还是禁止，交由下一 ACL 插件或默认 ACL 规则来判断</li></ul><p>默认配置中 ACL 是开放授权的，即授权结果为<strong>忽略（ignore）<strong>时</strong>允许</strong>客户端通过授权。</p><p>通过 <code>etc/emqx.conf</code> 中的 ACL 配置可以更改该属性：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etc/emqx.conf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## ACL 未匹配时默认授权</span></span><br><span class="line"><span class="comment">## Value: allow | deny</span></span><br><span class="line"><span class="attr">acl_nomatch</span> = <span class="string">allow</span></span><br></pre></td></tr></table></figure><p>在生产环境我们需要修改全局配置文件中关于acl的配置，将<code>acl_nomatch</code>配置项的值改为：<code>deny</code></p><p>完成配置后使用<code>emqx restart</code>重启emqx broker服务</p><h4 id="813-acl-鉴权链"><a class="markdownIt-Anchor" href="#813-acl-鉴权链"></a> 8.1.3 ACL 鉴权链</h4><p>当同时启用多个 ACL 插件时，EMQ X 将按照插件开启先后顺序进行链式鉴权：</p><ul><li><p>一通过授权，终止链并允许客户端通过验证</p></li><li><p>一旦授权失败，终止链并禁止客户端通过验证</p></li><li><p>直到最后一个 ACL 插件仍未通过，根据</p><p>默认授权</p><p>配置判定</p><ul><li>默认授权为允许时，允许客户端通过验证</li><li>默认授权为禁止时，禁止客户端通过验证</li></ul></li></ul><p>同时只启用一个 ACL 插件可以提高客户端 ACL 检查性能。</p><h4 id="814-超级用户"><a class="markdownIt-Anchor" href="#814-超级用户"></a> 8.1.4 超级用户</h4><p>客户端在进行认证的时候客户端可拥有“超级用户”身份，超级用户拥有最高权限不受 ACL 限制。</p><ul><li>认证鉴权插件启用超级用户功能后，发布订阅时 EMQ X 将优先检查客户端超级用户身份</li><li>客户端为超级用户时，通过授权并跳过后续 ACL 检查</li></ul><h3 id="82-http-acl"><a class="markdownIt-Anchor" href="#82-http-acl"></a> 8.2 HTTP ACL</h3><p>HTTP 认证使用外部自建 HTTP 应用认证授权数据源，根据 HTTP API 返回的数据判定授权结果，能够实现复杂的 ACL 校验逻辑。</p><p>插件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emqx_auth_http</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：emqx_auth_http 插件同时包含认证功能，可通过注释禁用。</p></blockquote><p>EMQ X 在设备发布、订阅事件中使用当前客户端相关信息作为参数，向用户自定义的认证服务发起请求权限，通过返回的 HTTP <strong>响应状态码</strong> (HTTP statusCode) 来处理 ACL 授权请求。</p><ul><li>无权限：API 返回 4xx 状态码</li><li>授权成功：API 返回 200 状态码</li><li>忽略授权：API 返回 200 状态码且消息体 ignore</li></ul><h4 id="821-acl配置"><a class="markdownIt-Anchor" href="#821-acl配置"></a> 8.2.1 ACL配置</h4><p>首先查询客户端是否为超级用户，客户端为超级用户时将跳过 ACL 查询。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etc/plugins/emqx_auth_http.conf</span></span><br><span class="line"><span class="comment">####使用vi编辑该配置，修改URL请求地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##--------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">## Superuser request.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Variables:</span></span><br><span class="line"><span class="comment">##  - %u: username</span></span><br><span class="line"><span class="comment">##  - %c: clientid</span></span><br><span class="line"><span class="comment">##  - %a: ipaddress</span></span><br><span class="line"><span class="comment">##  - %r: protocol</span></span><br><span class="line"><span class="comment">##  - %P: password</span></span><br><span class="line"><span class="comment">##  - %p: sockport of server accepted</span></span><br><span class="line"><span class="comment">##  - %C: common name of client TLS cert</span></span><br><span class="line"><span class="comment">##  - %d: subject of client TLS cert</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Value: URL 请求地址</span></span><br><span class="line"><span class="meta">auth.http.super_req</span> = <span class="string">http://192.168.200.1:8991/mqtt/superuser</span></span><br><span class="line"><span class="comment">## Value: post | get | put 请求方法</span></span><br><span class="line"><span class="meta">auth.http.super_req.method</span> = <span class="string">post</span></span><br><span class="line"><span class="comment">## Value: Params 请求参数</span></span><br><span class="line"><span class="meta">auth.http.super_req.params</span> = <span class="string">clientid=%c,username=%u</span></span><br></pre></td></tr></table></figure><p>ACL请求的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etc/plugins/emqx_auth_http.conf</span></span><br><span class="line"><span class="comment">####使用vi编辑该配置，修改URL请求地址以及请求方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">##--------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">## ACL request.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Variables:</span></span><br><span class="line"><span class="comment">##  - %A: 1 | 2, 1 = sub, 2 = pub</span></span><br><span class="line"><span class="comment">##  - %u: username</span></span><br><span class="line"><span class="comment">##  - %c: clientid</span></span><br><span class="line"><span class="comment">##  - %a: ipaddress</span></span><br><span class="line"><span class="comment">##  - %r: protocol</span></span><br><span class="line"><span class="comment">##  - %m: mountpoint</span></span><br><span class="line"><span class="comment">##  - %t: topic</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Value: URL</span></span><br><span class="line"><span class="meta">auth.http.acl_req</span> = <span class="string">http://192.168.200.1:8991/mqtt/acl</span></span><br><span class="line"><span class="comment">## Value: post | get | put</span></span><br><span class="line"><span class="meta">auth.http.acl_req.method</span> = <span class="string">post</span></span><br><span class="line"><span class="comment">## Value: Params</span></span><br><span class="line"><span class="meta">auth.http.acl_req.params</span> = <span class="string">access=%A,username=%u,clientid=%c,ipaddr=%a,topic=%t,mountpoint=%m</span></span><br></pre></td></tr></table></figure><p><strong>请求说明</strong></p><p>HTTP 请求方法为 GET 时，请求参数将以 URL 查询字符串的形式传递；POST、PUT 请求则将请求参数以普通表单形式提交（content-type 为 x-www-form-urlencoded）。</p><p>你可以在认证请求中使用以下占位符，请求时 EMQ X 将自动填充为客户端信息：</p><ul><li>%u：用户名</li><li>%c：Client ID</li><li>%a：客户端 IP 地址</li><li>%r：客户端接入协议</li><li>%P：明文密码</li><li>%p：客户端端口</li><li>%C：TLS 证书公用名（证书的域名或子域名），仅当 TLS 连接时有效</li><li>%d：TLS 证书 subject，仅当 TLS 连接时有效</li><li>%m：topic的安装点，是桥接的连接属性</li></ul><p>推荐使用 POST 与 PUT 方法，使用 GET 方法时明文密码可能会随 URL 被记录到传输过程中的服务器日志中。</p><h4 id="822-http-acl接口开发"><a class="markdownIt-Anchor" href="#822-http-acl接口开发"></a> 8.2.2 HTTP ACL接口开发</h4><p>在原有的项目<code>emq-demo</code>中我们已经开发了基于HTTP API的认证Controller：<code>AuthController</code>，按照我们的请求URL配置，我们需要在该Controller中添加两个接口方法，一个是用于查询superuser的，一个是用于进行ACL授权查询的，这两个方法分别如下：</p><p>1：查询客户端是否为超级用户，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/superuser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; superUser(<span class="meta">@RequestParam(&quot;clientid&quot;)</span> String clientid,</span><br><span class="line">                                   <span class="meta">@RequestParam(&quot;username&quot;)</span> String username)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;emqx 查询是否是超级用户,clientid=&#123;&#125;,username=&#123;&#125;&quot;</span>,clientid,username);</span><br><span class="line">    <span class="keyword">if</span>(clientid.contains(<span class="string">&quot;admin&quot;</span>) || username.contains(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户&#123;&#125;是超级用户&quot;</span>,username);</span><br><span class="line">        <span class="comment">//是超级用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Object&gt;(HttpStatus.OK);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         log.info(<span class="string">&quot;用户&#123;&#125;不是超级用户&quot;</span>,username);</span><br><span class="line">        <span class="comment">//不是超级用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Object&gt;(HttpStatus.UNAUTHORIZED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们在初始化方法init中添加一个超级用户：admin/admin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    users = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    users.put(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    users.put(<span class="string">&quot;emq-client2&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    users.put(<span class="string">&quot;emq-client3&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    users.put(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理：API返回200状态码代表是超级用户，API返回4XX状态码则不是超级用户</p><p>2：ACL 授权查询请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/acl&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">acl</span><span class="params">(<span class="meta">@RequestParam(&quot;access&quot;)</span><span class="keyword">int</span> access,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;clientid&quot;)</span>String clientid,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;ipaddr&quot;)</span>String ipaddr,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;topic&quot;)</span>String topic,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;mountpoint&quot;)</span>String mountpoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;EMQX发起客户端操作授权查询请求,access=&#123;&#125;,username=&#123;&#125;,clientid=&#123;&#125;,ipaddr=&#123;&#125;,topic=&#123;&#125;,mountpoint=&#123;&#125;&quot;</span>,</span><br><span class="line">             access,username,clientid,ipaddr,topic,mountpoint);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(username.equals(<span class="string">&quot;emq-client2&quot;</span>) &amp;&amp; topic.equals(<span class="string">&quot;testtopic/#&quot;</span>) &amp;&amp; access == <span class="number">1</span>)&#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端&#123;&#125;有权限订阅&#123;&#125;&quot;</span>,username,topic);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(username.equals(<span class="string">&quot;emq-client3&quot;</span>) &amp;&amp; topic.equals(<span class="string">&quot;testtopic/123&quot;</span>) &amp;&amp; access == <span class="number">2</span>)&#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端&#123;&#125;有权限向&#123;&#125;发布消息&quot;</span>,username,topic);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">null</span>, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;客户端&#123;&#125;,username=&#123;&#125;,没有权限对主题&#123;&#125;进行&#123;&#125;操作&quot;</span>,clientid,username,topic,access==<span class="number">1</span>?<span class="string">&quot;订阅&quot;</span>:<span class="string">&quot;发布&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(HttpStatus.UNAUTHORIZED);<span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中我们设置了：</p><p>只有用户名为<code>emq-client2</code>的客户端能够去订阅<code>testtopic/#</code>的权限其他客户端都不可以</p><p>只有用户名为<code>emq-client3</code>的客户端能够向<code>testtopic/123</code>发布消息的权限其他都没有</p>]]></content>
      
      
      <categories>
          
          <category> EMQX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMQX - 物联网 - MQTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sharding-JDBC数据脱敏</title>
      <link href="/2021/08/03/Sharding-JDBC%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/"/>
      <url>/2021/08/03/Sharding-JDBC%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 事务传播机制使用</title>
      <link href="/2021/08/02/Spring-%E4%BA%8B%E7%89%A9%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/08/02/Spring-%E4%BA%8B%E7%89%A9%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="spring事务"><a class="markdownIt-Anchor" href="#spring事务"></a> Spring事务</h1><h2 id="一-前言"><a class="markdownIt-Anchor" href="#一-前言"></a> 一、前言</h2><h3 id="11-事务的传播"><a class="markdownIt-Anchor" href="#11-事务的传播"></a> 1.1 事务的传播</h3><p>什么是事务的传播？传播，意味着是有两个事务参与的，单个事务是没有 ”传播“ 的概念的</p><p>事务的传播机制（<code>propagation behavior</code>），即为在一个事务方法中调用另一个事务方法时，事务该如何执行。</p><p>1.2 7种传播属性</p><p>​</p><table><thead><tr><th style="text-align:center">事务传播行为类型</th><th style="text-align:center">说明</th><th></th></tr></thead><tbody><tr><td style="text-align:center">PROPAGATION_REQUIRED</td><td style="text-align:center"><code>required</code> 含义是 <code>必须有事务</code>, 如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。</td><td>没有创建 <code>【默认】</code></td></tr><tr><td style="text-align:center">PROPAGATION_SUPPORTS</td><td style="text-align:center"><code>supports</code> 是支持事务，但是单独调用该方法时是没有事务的，如果调用者已经开启了事务，就用调用者的事务。</td><td>有就用，没有拉到</td></tr><tr><td style="text-align:center">PROPAGATION_MANDATORY</td><td style="text-align:center"><code>mandatory</code> 意为 <code>强制的</code> ，必须有事务，但是自己又不创建，如果调用者已经开启了事务，就用调用者的事务。调用者没开启事务，就抛异常。</td><td>不创建，如果没有事务就告警</td></tr><tr><td style="text-align:center">PROPAGATION_REQUIRES_NEW</td><td style="text-align:center">如果已经有的话就把已经有的挂起。<code>两个事务是独立的,事务A中在提交事务B后如果 rollback 并不会导致事务B 的 rollback</code>。<code>需要使用 JtaTransactionManager作为事务管理器</code></td><td>挂起别人的，创建自己的</td></tr><tr><td style="text-align:center">PROPAGATION_NOT_SUPPORTED</td><td style="text-align:center">not_supported<code>即为</code>不支持事务<code>, 调用者如果已有事务就把它挂起，自己以无事务运行。</code>需要使用 JtaTransactionManager作为事务管理器</td><td>挂起别人的，我不用</td></tr><tr><td style="text-align:center">PROPAGATION_NEVER</td><td style="text-align:center"><code>never</code> 从来都不需要事务的，如果调用者已有事务，就报错！</td><td>别人有就报错</td></tr><tr><td style="text-align:center">PROPAGATION_NESTED</td><td style="text-align:center">nested<code>嵌套的事务，自己会创建一个新事务，但是这个新事务并不是自己单独提交的，而是等待外层事务一起提交，所以事务B后面 事务A中的其他代码如果造成了</code>rollback<code>则也会导致事务B</code>rollback</td><td>嵌套</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210802225137.png" alt="事务"></p><h2 id="二-环境搭建"><a class="markdownIt-Anchor" href="#二-环境搭建"></a> 二、环境搭建</h2><h3 id="21-数据库表"><a class="markdownIt-Anchor" href="#21-数据库表"></a> 2.1 数据库表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `father` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">) ENGINE = InnoDB;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `son` (</span><br><span class="line">  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR(45) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  PRIMARY KEY(`id`)</span><br><span class="line">) ENGINE = InnoDB;</span><br></pre></td></tr></table></figure><h2 id="三-propagation_required"><a class="markdownIt-Anchor" href="#三-propagation_required"></a> 三、PROPAGATION_REQUIRED</h2><blockquote><p>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SonServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">SonMapper</span>, <span class="title">Son</span>&gt; <span class="keyword">implements</span> <span class="title">Handler</span>&lt;<span class="title">Son</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Son son)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAndThrowException</span><span class="params">(Son son)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">FatherMapper</span>, <span class="title">Father</span>&gt; <span class="keyword">implements</span> <span class="title">Handler</span>&lt;<span class="title">Father</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(father);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAndThrowException</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">      baseMapper.insert(father);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="31-外围方法无事务"><a class="markdownIt-Anchor" href="#31-外围方法无事务"></a> 3.1  外围方法无事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试没有父事务且抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNotTransaction</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    sonServiceImpl.addAndThrowException(son);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNotTransaction</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">2</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testService.testNotTransaction(father,son);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="311-结论"><a class="markdownIt-Anchor" href="#311-结论"></a> 3.1.1 结论</h4><p>外围方法未开启事务，插入“joker”、“joker son”方法在自己的事务中独立运行，外围方法异常不影响内部插入“joker”、“joker son”方法独立的事务。</p><p><strong>在外围方法未开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="32-外围方法有事务"><a class="markdownIt-Anchor" href="#32-外围方法有事务"></a> 3.2 外围方法有事务</h3><p><strong>方法一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**     * 测试有父事务且抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithTransaction</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    sonServiceImpl.addAndThrowException(son);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>“joker”、“joker son”均未插入。</p><p>外围方法开启事务，内部方法加入外围方法事务，外围方法回滚，内部方法也要回滚。</p></blockquote><p><strong>方法二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试有父事务且抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithTransactionAndThrow</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    sonServiceImpl.add(son);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithTransactionAndThrow</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testService.testWithTransactionAndThrow(father,son);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”、“joker son”均未插入。</p><p>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，外围方法感知异常致使整体事务回滚。</p></blockquote><p><strong>方法三:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试有父事务且抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithTransactionAndTry</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sonServiceImpl.addAndThrowException(son);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithTransactionAndTry</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testService.testWithTransactionAndTry(father,son);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抛出的异常是</span></span><br><span class="line"><span class="comment">//org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</span></span><br></pre></td></tr></table></figure><blockquote><p>“joker”、“joker son”均未插入。</p><p>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，即使方法被catch不被外围方法感知，整个事务依然回滚。[详见官方文档](</p></blockquote><p>分别执行验证方法，结果：</p><table><thead><tr><th>验证方法序号</th><th>数据库结果</th><th>结果分析</th></tr></thead><tbody><tr><td>1</td><td>“joker”、“joker son”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，外围方法回滚，内部方法也要回滚。</td></tr><tr><td>2</td><td>“joker”、“joker son”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，外围方法感知异常致使整体事务回滚。</td></tr><tr><td>3</td><td>“joker”、“joker son”均未插入。</td><td>外围方法开启事务，内部方法加入外围方法事务，内部方法抛出异常回滚，即使方法被catch不被外围方法感知，整个事务依然回滚。<a href="https://docs.spring.io/spring-framework/docs/5.0.9.RELEASE/spring-framework-reference/data-access.html#tx-propagation-required">详见官方文档</a></td></tr></tbody></table><h4 id="321-结论"><a class="markdownIt-Anchor" href="#321-结论"></a> 3.2.1 结论</h4><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.REQUIRED</code>修饰的内部方法会加入到外围方法的事务中，所有<code>Propagation.REQUIRED</code>修饰的内部方法和外围方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</strong></p><h2 id="四-propagation_requires_new"><a class="markdownIt-Anchor" href="#四-propagation_requires_new"></a> 四、PROPAGATION_REQUIRES_NEW</h2><p><strong>Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">FatherMapper</span>, <span class="title">Father</span>&gt; <span class="keyword">implements</span> <span class="title">Handler</span>&lt;<span class="title">Father</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(father);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAndThrowException</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(father);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRequiredNew</span><span class="params">(Father user)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRequiredNewAndThrowException</span><span class="params">(Father user)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SonServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">SonMapper</span>, <span class="title">Son</span>&gt; <span class="keyword">implements</span> <span class="title">Handler</span>&lt;<span class="title">Son</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Son user)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAndThrowException</span><span class="params">(Son user)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRequiredNew</span><span class="params">(Son user)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRequiredNewAndThrowException</span><span class="params">(Son user)</span> </span>&#123;</span><br><span class="line">        baseMapper.insert(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="41-外围方法无事务"><a class="markdownIt-Anchor" href="#41-外围方法无事务"></a> 4.1  外围方法无事务</h3><blockquote><p>略</p></blockquote><h4 id="411-结论"><a class="markdownIt-Anchor" href="#411-结论"></a> 4.1.1 结论</h4><p><strong>在外围方法未开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h3 id="42-外围方法有事务"><a class="markdownIt-Anchor" href="#42-外围方法有事务"></a> 4.2 外围方法有事务</h3><p><strong>方法1： 外部方法抛出异常并且带有事物</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法抛出异常并且带有事物</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> son1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> son2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionExceptionRequiredRequiresNewRequiresNew</span><span class="params">(Father father, Son son1, Son son2)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    sonServiceImpl.add(son1);</span><br><span class="line">    sonServiceImpl.addRequiredNew(son2);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionExceptionRequiredRequiresNewRequiresNew</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son1 = <span class="keyword">new</span> Son();</span><br><span class="line">    son1.setId(<span class="number">1</span>);</span><br><span class="line">    son1.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son2 = <span class="keyword">new</span> Son();</span><br><span class="line">    son2.setId(<span class="number">2</span>);</span><br><span class="line">    son2.setName(<span class="string">&quot;joker son and 2&quot;</span>);</span><br><span class="line">    testServiceRequiredNew.transactionExceptionRequiredRequiresNewRequiresNew(father, son1,son2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”未插入，“joker son”未插入，“joker son and 2”插入。</p><p>外围方法开启事务，插入“joker”，“joker son”方法和外围方法一个事务，插入“joker son and 2”方法在独立的新建事务中，外围方法抛出异常只回滚和外围方法同一事务的方法，故插入“joker”，“joker son”的方法回滚。</p></blockquote><p><strong>方法2： 外部方法有事物内部方法抛出异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法有事物内部方法抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionRequiredRequiresNewRequiresNewException</span><span class="params">(Father father, Son son1, Son son2)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    sonServiceImpl.addRequiredNew(son1);</span><br><span class="line">    sonServiceImpl.addRequiredNewAndThrowException(son2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionRequiredRequiresNewRequiresNewException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son2 = <span class="keyword">new</span> Son();</span><br><span class="line">    son2.setId(<span class="number">2</span>);</span><br><span class="line">    son2.setName(<span class="string">&quot;joker son and 2&quot;</span>);</span><br><span class="line">    testServiceRequiredNew.transactionRequiredRequiresNewRequiresNewException(father, son,son2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”未插入，“joker son ”插入，“joker son and 2”未插入。</p></blockquote><blockquote><p>外围方法开启事务，插入“joker”方法和外围方法一个事务，插入“joker son”方法、插入“joker son and 2”方法分别在独立的新建事务中。插入“joker son and 2”方法抛出异常，首先插入 “joker son and 2”方法的事务被回滚，异常继续抛出被外围方法感知，外围方法事务亦被回滚，故插入“joker”方法也被回滚。</p></blockquote><p><strong>方法3： 外部方法有事物内部方法抛出异常且外部方法捉住异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法有事物内部方法抛出异常且外部方法捉住异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">transactionRequiredRequiresNewRequiresNewExceptionTry</span><span class="params">(Father father, Son son1, Son son2)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.add(father);</span><br><span class="line">    sonServiceImpl.addRequiredNew(son1);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sonServiceImpl.addRequiredNewAndThrowException(son2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionRequiredRequiresNewRequiresNewException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son2 = <span class="keyword">new</span> Son();</span><br><span class="line">    son2.setId(<span class="number">2</span>);</span><br><span class="line">    son2.setName(<span class="string">&quot;joker son and 2&quot;</span>);</span><br><span class="line">    testServiceRequiredNew.transactionRequiredRequiresNewRequiresNewException(father, son,son2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”插入，“joker son ”插入，“joker son and 2”未插入。</p></blockquote><blockquote><p>外围方法开启事务，插入“joker”方法和外围方法一个事务，插入“joker son”方法、插入“joker son and 2”方法分别在独立的新建事务中。插入“joker son and 2”方法抛出异常，首先插入“joker son and 2”方法的事务被回滚，异常被catch不会被外围方法感知，外围方法事务不回滚，故插入“joker”方法插入成功。</p></blockquote><h4 id="421-结论"><a class="markdownIt-Anchor" href="#421-结论"></a> 4.2.1 结论</h4><p><strong>结论：在外围方法开启事务的情况下<code>Propagation.REQUIRES_NEW</code>修饰的内部方法依然会单独开启独立事务，且与外部方法事务也独立，内部方法之间、内部方法和外部方法事务均相互独立，互不干扰。</strong></p><h2 id="五-propagation_nested"><a class="markdownIt-Anchor" href="#五-propagation_nested"></a> 五、PROPAGATION_NESTED</h2><h4 id="51-外围方法无事务"><a class="markdownIt-Anchor" href="#51-外围方法无事务"></a> 5.1  外围方法无事务</h4><p>**方法一：**外围方法没有事物内部方法嵌套事物外部方法抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外围方法没有事物内部方法嵌套事物外部方法抛出异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withoutTransactionExceptionNestedNested</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.addNested(father);</span><br><span class="line">    sonServiceImpl.addNested(son);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithoutTransactionExceptionNestedNested</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testServiceNested.withoutTransactionExceptionNestedNested(father, son);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”、“joker son”均插入。</p></blockquote><blockquote><p>外围方法未开启事务，插入“joker”、“joker  son”方法在自己的事务中独立运行，外围方法异常不影响内部插入“joker ”、“joker son”方法独立的事务。</p></blockquote><p>**方法二：**外围方法没有事物内部方法嵌套事物内部方法抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外围方法没有事物内部方法嵌套事物内部方法抛出异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withoutTransactionNestedNestedException</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.addNested(father);</span><br><span class="line">    sonServiceImpl.addNestedException(son);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithoutTransactionNestedNestedException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testServiceNested.withoutTransactionNestedNestedException(father, son);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”插入，“joker son”未插入。</p></blockquote><blockquote><p>外围方法没有事务，插入“joker”、“joker son”方法都在自己的事务中独立运行,所以插入“joker son”方法抛出异常只会回滚插入“joker son”方法，插入“joker”方法不受影响。</p></blockquote><h5 id="511-总结"><a class="markdownIt-Anchor" href="#511-总结"></a> 5.1.1 总结</h5><p><strong>结论：通过这两个方法我们证明了在外围方法未开启事务的情况下<code>Propagation.NESTED</code>和<code>Propagation.REQUIRED</code>作用相同，修饰的内部方法都会新开启自己的事务，且开启的事务相互独立，互不干扰。</strong></p><h4 id="52-外围方法有事务"><a class="markdownIt-Anchor" href="#52-外围方法有事务"></a> 5.2  外围方法有事务</h4><p><strong>方法一:</strong> 外部方法有事物 外部方法抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部方法有事物 外部方法抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionExceptionNestedNested</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.addNested(father);</span><br><span class="line">    sonServiceImpl.addNested(son);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionExceptionNestedNested</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testServiceNested.transactionExceptionNestedNested(father, son);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>均未插入。</p></blockquote><blockquote><p>外围方法开启事务，内部事务为外围事务的子事务，外围方法回滚，内部方法也要回滚。</p></blockquote><p><strong>方法一:</strong> 外部方法有事物 内部方法抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部方法有事物 内部方法抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionNestedNestedException</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.addNested(father);</span><br><span class="line">    sonServiceImpl.addNestedException(son);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionNestedNestedException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">    father.setId(<span class="number">1</span>);</span><br><span class="line">    father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">    son.setId(<span class="number">1</span>);</span><br><span class="line">    son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">    testServiceNested.transactionNestedNestedException(father, son);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>均未插入。</p></blockquote><blockquote><p>外围方法开启事务，内部事务为外围事务的子事务，内部方法抛出异常回滚，且外围方法感知异常致使整体事务回滚。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部方法有事物 内部方法抛出异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> father</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> son</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionNestedNestedExceptionTry</span><span class="params">(Father father, Son son)</span> </span>&#123;</span><br><span class="line">    fatherServiceImpl.addNested(father);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sonServiceImpl.addNestedException(son);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactionNestedNestedExceptionTry</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Father father = <span class="keyword">new</span> Father();</span><br><span class="line">        father.setId(<span class="number">1</span>);</span><br><span class="line">        father.setName(<span class="string">&quot;joker&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        son.setId(<span class="number">1</span>);</span><br><span class="line">        son.setName(<span class="string">&quot;joker son &quot;</span>);</span><br><span class="line">        testServiceNested.transactionNestedNestedExceptionTry(father, son);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>“joker”插入、“joker son”未插入。</p></blockquote><blockquote><p>外围方法开启事务，内部事务为外围事务的子事务，插入“李四”内部方法抛出异常，可以单独对子事务回滚。</p></blockquote><h5 id="521-总结"><a class="markdownIt-Anchor" href="#521-总结"></a> 5.2.1 总结</h5><p><strong>结论：以上试验结果我们证明在外围方法开启事务的情况下<code>Propagation.NESTED</code>修饰的内部方法属于外部事务的子事务，外围主事务回滚，子事务一定回滚，而内部子事务可以单独回滚而不影响外围主事务和其他子事务</strong></p><h2 id="六-required-requires_new-与-nested区别"><a class="markdownIt-Anchor" href="#六-required-requires_new-与-nested区别"></a> 六、REQUIRED  REQUIRES_NEW  与 NESTED区别</h2><p><strong>NESTED和REQUIRED修饰的内部方法都属于外围方法事务，如果外围方法抛出异常，这两种方法的事务都会被回滚。但是REQUIRED是加入外围方法事务，所以和外围事务同属于一个事务，一旦REQUIRED事务抛出异常被回滚，外围方法事务也将被回滚。而NESTED是外围方法的子事务，有单独的保存点，所以NESTED方法抛出异常被回滚，不会影响到外围方法的事务。</strong></p><p><strong>NESTED和REQUIRES_NEW都可以做到内部方法事务回滚而不影响外围方法事务。但是因为NESTED是嵌套事务，所以外围方法回滚之后，作为外围方法事务的子事务也会被回滚。而REQUIRES_NEW是通过开启新的事务实现的，内部事务和外围事务是两个事务，外围事务回滚不会影响内部事务。</strong></p><h2 id="七-总结"><a class="markdownIt-Anchor" href="#七-总结"></a> 七、总结</h2><table><thead><tr><th style="text-align:left">Propagation</th><th style="text-align:left">Calling method (outer)</th><th style="text-align:left">Called method (inner)</th></tr></thead><tbody><tr><td style="text-align:left">REQUIRED</td><td style="text-align:left">No</td><td style="text-align:left">T2</td></tr><tr><td style="text-align:left">REQUIRED</td><td style="text-align:left">T1</td><td style="text-align:left">T1</td></tr><tr><td style="text-align:left">REQUIRES_NEW</td><td style="text-align:left">No</td><td style="text-align:left">T2</td></tr><tr><td style="text-align:left">REQUIRES_NEW</td><td style="text-align:left">T1</td><td style="text-align:left">T2</td></tr><tr><td style="text-align:left">MANDATORY</td><td style="text-align:left">No</td><td style="text-align:left">Exception</td></tr><tr><td style="text-align:left">MANDATORY</td><td style="text-align:left">T1</td><td style="text-align:left">T1</td></tr><tr><td style="text-align:left">NOT_SUPPORTED</td><td style="text-align:left">No</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left">NOT_SUPPORTED</td><td style="text-align:left">T1</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left">SUPPORTS</td><td style="text-align:left">No</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left">SUPPORTS</td><td style="text-align:left">T1</td><td style="text-align:left">T1</td></tr><tr><td style="text-align:left">NEVER</td><td style="text-align:left">No</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left">NEVER</td><td style="text-align:left">T1</td><td style="text-align:left">Exception</td></tr><tr><td style="text-align:left">NESTED</td><td style="text-align:left">No</td><td style="text-align:left">T2</td></tr><tr><td style="text-align:left">NESTED</td><td style="text-align:left">T1</td><td style="text-align:left">T2</td></tr></tbody></table><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://docs.spring.io/spring-framework/docs/5.0.9.RELEASE/spring-framework-reference/data-access.html#tx-propagation-required">Spring文档</a></p><p><a href="https://github.com/spring-projects/spring-framework/blob/b595dc1dfad9db534ca7b9e8f46bb9926b88ab5a/spring-jdbc/src/test/java/org/springframework/jdbc/support/JdbcTransactionManagerTests.java">Spring-Framework 测试样例JDBC</a></p><p><a href="https://github.com/spring-projects/spring-framework/blob/b595dc1dfad9db534ca7b9e8f46bb9926b88ab5a/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/DataSourceTransactionManagerTests.java">Spring-Framework 测试样例 DataSource</a></p><p><a href="http://aikin.me/2018/05/19/do-not-use-transactional-annotation-on-spring-integration-test/">Don’t Use @Transactional On Spring Boot Integration Test</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring - 事务传播机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 限流</title>
      <link href="/2021/08/01/Nginx-%E9%99%90%E6%B5%81/"/>
      <url>/2021/08/01/Nginx-%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-限流篇"><a class="markdownIt-Anchor" href="#nginx-限流篇"></a> Nginx 限流篇</h1><p>实验环境：</p><ul><li>树莓派4b ubuntu server</li><li>nginx arm64v8-1.21.1</li></ul><h2 id="一-前言"><a class="markdownIt-Anchor" href="#一-前言"></a> 一、前言</h2><p>随着业务的扩散，系统并发越来越高时,有三样利器用来保护系统，分别是缓存、降级和限流。</p><p>**缓存:**缓存是现在系统中必不可少的模块,并且已经成为了高并发高性能架构的一个关键组件，缓存的目的是提升系统访问速度和增大系统处理容量。</p><p>**降级:**这个在天猫双11的时候非常常见，降级是当服务出现问题或者影响到核心流程时，需要暂时屏蔽掉，待高峰或者问题解决后再打开。</p><p>**限流:**限流的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理</p><h2 id="二-docker环境搭建"><a class="markdownIt-Anchor" href="#二-docker环境搭建"></a> 二、Docker环境搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p /docker/nginx/&#123;html,logs&#125;</span><br><span class="line"><span class="built_in">cd</span> /docker/nginx</span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line">docker run --name tmp-nginx-container -d arm64v8/nginx</span><br><span class="line">docker cp tmp-nginx-container:/etc/nginx/nginx.conf $(<span class="built_in">pwd</span>)</span><br><span class="line">docker rm -f tmp-nginx-container</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">docker run -d -p 8080:80 --name nginx -v $(<span class="built_in">pwd</span>)/html:/usr/share/nginx/html -v $(<span class="built_in">pwd</span>)/nginx.conf:/etc/nginx/nginx.conf -v $(<span class="built_in">pwd</span>)/logs:/var/<span class="built_in">log</span>/nginx arm64v8/nginx</span><br><span class="line"><span class="comment"># 测试 创建index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;nginx&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl localhost:8080</span><br></pre></td></tr></table></figure><h2 id="三-nginx如何限流"><a class="markdownIt-Anchor" href="#三-nginx如何限流"></a> 三、Nginx如何限流</h2><p><code>Nginx</code>的”流量限制”使用漏桶算法(<em>leaky bucket algorithm</em>)，该算法在通讯和分组交换计算机网络中广泛使用，用以处理带宽有限时的突发情况。就好比，一个桶口在倒水，桶底在漏水的水桶。如果桶口倒水的速率大于桶底的漏水速率，桶里面的水将会溢出；同样，在请求处理方面，水代表来自客户端的请求，水桶代表根据”先进先出调度算法”(FIFO)等待被处理的请求队列，桶底漏出的水代表离开缓冲区被服务器处理的请求，桶口溢出的水代表被丢弃和不被处理的请求。</p><h3 id="31-配置基本的限流"><a class="markdownIt-Anchor" href="#31-配置基本的限流"></a> 3.1 配置基本的限流</h3><blockquote><p>Nginx自身有的请求限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html">ngx_http_limit_req_module</a>、流量限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html">ngx_stream_limit_conn_module</a>基于令牌桶算法，可以方便的控制令牌速率，自定义调节限流，实现基本的限流控制。</p><p>对于提供下载的网站，肯定是要进行流量控制的，例如软件下载站、视频服务等。<br>它也可以减少一些爬虫程序或者DDOS的攻击。</p></blockquote><p><strong>1 添加limit_zone和limit_req_zone</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_zone</span> one  $binary_remote_addr  <span class="number">20m</span>;</span><br><span class="line"><span class="attribute">limit_req_zone</span>  $binary_remote_addr  zone=req_one:<span class="number">20m</span> rate=12r/s;</span><br></pre></td></tr></table></figure><p><strong>2 添加limit_conn 和limit_req</strong></p><p>这个变量可以在<code>http</code>, <code>server</code>, <code>location</code>使用 如果限制nginx上的所有服务，可以添加到http里面 （如果你需要限制部分服务，可在nginx/conf/domains里面选择相应的server或者location添加上便可）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_conn</span> one <span class="number">10</span>;</span><br><span class="line"><span class="attribute">limit_req</span> zone=req_one burst=<span class="number">120</span>;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是针对每个变量(这里指IP，即$binary_remote_addr)定义一个存储session状态的容器。这个示例中定义了一个20m的容器，按照32bytes/session，可以处理640000个session。</span></span><br><span class="line">limit_zone，</span><br><span class="line"><span class="comment"># 与limit_zone类似。rate是请求频率. 每秒允许12个请求。</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> </span><br><span class="line"><span class="comment"># 表示一个IP能发起10个并发连接数</span></span><br><span class="line">limit_conn  one <span class="number">10</span> </span><br><span class="line"><span class="comment"># 与limit_req_zone对应。burst表示缓存住的请求数。</span></span><br><span class="line">limit_req:</span><br></pre></td></tr></table></figure><h4 id="311-limit_req_zone-速率控制"><a class="markdownIt-Anchor" href="#311-limit_req_zone-速率控制"></a> 3.1.1 limit_req_zone  速率控制</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_req_zone</span> $binary_remote_addr zone=mylimit:<span class="number">10m</span> rate=10r/s;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">location</span> /login/ &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone=mylimit;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://my_upstream;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3111-定义"><a class="markdownIt-Anchor" href="#3111-定义"></a> 3.1.1.1 定义</h5><p>用来限制单位时间内的请求数，限制单一的IP地址的请求的处理速率，即速率限制,采用的漏桶算法 “leaky bucket”。</p><p><code>limit_req_zone</code>指令通常在HTTP块中定义，使其可在多个上下文中使用，它需要以下三个参数：</p><ul><li><strong>Key</strong> - 定义应用限制的请求特性。示例中的Nginx变量<code>$binary_remote_addr</code>，保存客户端IP地址的二进制形式。这意味着，我们可以将每个不同的IP地址限制到，通过第三个参数设置的请求速率。(使用该变量是因为比字符串形式的客户端IP地址<code>$remote_addr</code>，占用更少的空间)</li><li><strong>Zone</strong> - 定义用于存储每个IP地址状态以及被限制请求URL访问频率的共享内存区域。保存在内存共享区域的信息，意味着可以在Nginx的worker进程之间共享。定义分为两个部分：通过<code>zone=keyword</code>标识区域的名字，以及冒号后面跟区域大小。16000个IP地址的状态信息，大约需要1MB，所以示例中区域可以存储160000个IP地址。</li><li><strong>Rate</strong> - 定义最大请求速率。在示例中，速率不能超过每秒10个请求。Nginx实际上以毫秒的粒度来跟踪请求，所以速率限制相当于每100毫秒1个请求。因为不允许”突发情况”(见下一章节)，这意味着在前一个请求100毫秒内到达的请求将被拒绝。、</li></ul><blockquote><p>当Nginx需要添加新条目时存储空间不足，将会删除旧条目。如果释放的空间仍不够容纳新记录，Nginx将会返回 <strong>503状态码</strong>(Service Temporarily Unavailable)。另外，为了防止内存被耗尽，Nginx每次创建新条目时，最多删除两条60秒内未使用的条目。</p></blockquote><p><a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone"><code>limit_req_zone</code></a>指令定义了流量限制相关的参数，而<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req"><code>limit_req</code></a>指令在出现的上下文中启用流量限制(示例中，对于”/login/”的所有请求)。</p><p><code>limit_req_zone</code>指令设置流量限制和共享内存区域的参数，但实际上并不限制请求速率。所以需要通过添加<code>limit_req</code>指令，将流量限制应用在特定的<code>location</code>或者<code>server</code>块。在上面示例中，我们对<code>/login/</code>请求进行流量限制。</p><p>现在每个IP地址被限制为每秒只能请求10次<code>/login/</code>，更准确地说，在前一个请求的100毫秒内不能请求该URL。</p><h5 id="3112-简单使用"><a class="markdownIt-Anchor" href="#3112-简单使用"></a> 3.1.1.2 简单使用</h5><p>在http中添加：<code>limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;</code></p><ul><li>第一个参数：$binary_remote_addr 表示通过remote_addr这个标识来做限制，“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址。</li><li>第二个参数：zone=one:10m表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息。</li><li>第三个参数：rate=1r/s表示允许相同标识的客户端的访问频次，这里限制的是每秒10次，还可以有比如30r/m的。</li></ul><p>限流速度为每秒10次请求，如果有10次请求同时到达一个空闲的nginx，他们都能得到执行吗？</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210801172809.png" alt></p><p>漏桶漏出请求是匀速的。10r/s是怎样匀速的呢？每100ms漏出一个请求。</p><p>在这样的配置下，桶是空的，所有不能实时漏出的请求，都会被拒绝掉。</p><p>所以如果10次请求同时到达，那么只有一个请求能够得到执行，其它的，都会被拒绝。</p><h5 id="3113-处理突发"><a class="markdownIt-Anchor" href="#3113-处理突发"></a> 3.1.1.3 处理突发</h5><p>如果我们在100毫秒内接收到2个请求，怎么办？对于第二个请求，Nginx将给客户端返回状态码503。这可能并不是我们想要的结果，因为应用本质上趋向于突发性。相反地，我们希望缓冲任何超额的请求，然后及时地处理它们。我们更新下配置，在<code>limit_req</code>中使用<code>burst</code>参数：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /login/ &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone=mylimit burst=<span class="number">12</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://my_upstream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数：zone=one 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。</p></li><li><p>第二个参数：burst=12，重点说明一下这个配置，burst是爆发的意思，这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。例如，如果从一个给定IP地址发送13个请求，Nginx会立即将第一个请求发送到上游服务器群，然后将余下12个请求放在队列中。然后每100毫秒转发一个排队的请求，只有当传入请求使队列中排队的请求数超过12时，Nginx才会向客户端返回503。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210801185744.png" alt="Burst"></p></li></ul><p>逻辑上叫漏桶，实现起来是FIFO队列，把得不到执行的请求暂时缓存起来。</p><p>这样漏出的速度仍然是100ms一个请求，但并发而来，暂时得不到执行的请求，可以先缓存起来。只有当队列满了的时候，才会拒绝接受新请求。</p><p>这样漏桶在限流的同时，也起到了削峰填谷的作用。</p><p>在这样的配置下，如果有10次请求同时到达，它们会依次执行，每100ms执行1个。</p><p>虽然得到执行了，但因为排队执行，延迟大大增加，在很多场景下仍然是不能接受的。</p><h5 id="3114-无延迟的排队"><a class="markdownIt-Anchor" href="#3114-无延迟的排队"></a> 3.1.1.4 无延迟的排队</h5><p>配置<code>burst</code>参数将会使通讯更流畅，但是可能会不太实用，因为该配置会使站点看起来很慢。在上面的示例中，队列中的第20个包需要等待2秒才能被转发，此时返回给客户端的响应可能不再有用。要解决这个情况，可以在<code>burst</code>参数后添加<code>nodelay</code>参数：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储空间为10m 每秒钟只允许有10个请求经过</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> $binary_remote_addr zone=ip_limit:<span class="number">10m</span> rate=10r/s;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> /login/ &#123;</span><br><span class="line">        <span class="attribute">limit_req</span> zone=ip_limit burst=<span class="number">12</span> nodelay;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://login_upstream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三个参数：nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队。</p><p>也就是说使用<code>nodelay</code>参数，Nginx仍将根据<code>burst</code>参数分配队列中的位置，并应用已配置的速率限制，而不是清理队列中等待转发的请求。相反地，当一个请求到达“太早”时，只要在队列中能分配位置，Nginx将立即转发这个请求。将队列中的该位置标记为”taken”(占据)，并且不会被释放以供另一个请求使用，直到一段时间后才会被释放(在这个示例中是，100毫秒后)。</p><p>假设如前所述，队列中有12个空位，从给定的IP地址发出的13个请求同时到达。Nginx会立即转发这个13个请求，并且标记队列中占据的12个位置，然后每100毫秒释放一个位置。如果是15个请求同时到达，Nginx将会立即转发其中的13个请求，标记队列中占据的12个位置，并且返回503状态码来拒绝剩下的2个请求。</p><p>现在假设，第一组请求被转发后101毫秒，另20个请求同时到达。队列中只会有一个位置被释放，所以Nginx转发一个请求并返回503状态码来拒绝其他19个请求。如果在20个新请求到达之前已经过去了501毫秒，5个位置被释放，所以Nginx立即转发5个请求并拒绝另外15个。</p><p>效果相当于每秒10个请求的“流量限制”。如果希望不限制两个请求间允许间隔的情况下实施“流量限制”，<code>nodelay</code>参数是很实用的。</p><p><strong>注意：</strong> 对于大部分部署，建议使用<code>burst</code>和<code>nodelay</code>参数来配置<code>limit_req</code>指令。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210801185740.png" alt="NoDelay"></p><p>要么立刻执行，要么被拒绝，请求不会因为限流而增加延迟了。</p><p>因为请求从桶里漏出来还是匀速的，桶的空间又是固定的，最终平均下来，还是每秒执行了5次请求，限流的目的还是达到了。</p><p>但这样也有缺点，限流是限了，但是限得不那么匀速。以上面的配置举例，如果有12个请求同时到达，那么这12个请求都能够立刻执行，然后后面的请求只能匀速进桶，100ms执行1个。如果有一段时间没有请求，桶空了，那么又可能出现并发的12个请求一起执行。</p><h5 id="3115-delay"><a class="markdownIt-Anchor" href="#3115-delay"></a> 3.1.1.5 delay</h5><p>大部分情况下，这种限流不匀速，不算是大问题。不过nginx也提供了一个参数才控制并发执行也就是nodelay的请求的数量。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_req_zone</span> $binary_remote_addr zone=ip_limit:<span class="number">10m</span> rate=10r/s;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> /login/ &#123;</span><br><span class="line">        <span class="attribute">limit_req</span> zone=ip_limit burst=<span class="number">12</span> delay=<span class="number">4</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://login_upstream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>delay=4 从桶内第5个请求开始delay</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210801185907.png" alt="DelayNum"></p><p>这样通过控制delay参数的值，可以调整允许并发执行的请求的数量，使得请求变的均匀起来，在有些耗资源的服务上控制这个数量，还是有必要的。</p><h4 id="312-limit_req_conn-并发控制"><a class="markdownIt-Anchor" href="#312-limit_req_conn-并发控制"></a> 3.1.2 limit_req_conn 并发控制</h4><p>用来限制同一时间连接数，即并发限制。</p><p>ngx_http_limit_conn_module这个模块用来限制单个IP的请求数。并非所有的连接都被计数。只有在服务器处理了请求并且已经读取了整个请求头时，连接才被计数。</p><p><strong>语法</strong></p><blockquote><p>limit_conn_zone $variable zone=name:size;</p></blockquote><p><strong>参数说明:</strong></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mo>:</mo><mi mathvariant="normal">定</mi><mi mathvariant="normal">义</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">键</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">限</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">维</mi><mi mathvariant="normal">度</mi><mo separator="true">,</mo><mo stretchy="false">[</mo></mrow><annotation encoding="application/x-tex">variable: 定义的键，要限流的维度,[</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">流</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">维</span><span class="mord cjk_fallback">度</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span></span></span></span>binary_remote_addr:同一客户端IP，$server_name:限制同一server最大并发数]</li><li>size: 定义各个键共享内存空间大小</li><li>name: zone名称</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按IP配置内存区域zone的大小为10m:</span></span><br><span class="line"><span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=perip_conn:<span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按server配置一个连接 zone</span></span><br><span class="line"><span class="attribute">limit_conn_zone</span> $server_name zone=perserver_conn:<span class="number">100m</span>;</span><br></pre></td></tr></table></figure><h5 id="3121-limit_conn"><a class="markdownIt-Anchor" href="#3121-limit_conn"></a> 3.1.2.1 limit_conn</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制同一个IP同一时间来源的连接数:10个</span></span><br><span class="line"><span class="attribute">limit_conn</span> perip_conn <span class="number">10</span>;</span><br><span class="line"><span class="comment"># 限制同一个虚拟服务器同一时的总连接数</span></span><br><span class="line"><span class="attribute">limit_conn</span> perserver_conn <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h5 id="3122-limit_rate-限速"><a class="markdownIt-Anchor" href="#3122-limit_rate-限速"></a> 3.1.2.2 limit_rate 限速</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从下载指定的文件大小(1M)之后开始限速</span></span><br><span class="line"><span class="attribute">limit_rate_after</span> <span class="number">1m</span>;</span><br><span class="line"><span class="comment"># 限制请求资源</span></span><br><span class="line"><span class="attribute">limit_rate</span> <span class="number">1k</span>;</span><br></pre></td></tr></table></figure><h5 id="3123-配置限制固定连接数"><a class="markdownIt-Anchor" href="#3123-配置限制固定连接数"></a> 3.1.2.3 配置限制固定连接数</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据IP地址来限制，存储内存大小10M</span></span><br><span class="line"><span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=addr:<span class="number">1m</span>;</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attribute">location</span> /user/ &#123;</span><br><span class="line">     <span class="comment"># 表示 同一个地址只允许连接2次。</span></span><br><span class="line">     <span class="attribute">limit_conn</span> addr <span class="number">2</span>;</span><br><span class="line">     <span class="attribute">proxy_pass</span> http://172.16.0.235:18083;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3124-限制每个客户端ip与服务器的连接数同时限制与虚拟服务器的连接总数"><a class="markdownIt-Anchor" href="#3124-限制每个客户端ip与服务器的连接数同时限制与虚拟服务器的连接总数"></a> 3.1.2.4 限制每个客户端IP与服务器的连接数，同时限制与虚拟服务器的连接总数</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=perip:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">limit_conn_zone</span> $server_name zone=perserver:<span class="number">10m</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attribute">location</span> /user/ &#123;</span><br><span class="line">     <span class="comment">#limit_conn addr 2;</span></span><br><span class="line">     <span class="comment"># 单个客户端ip与服务器的连接数．</span></span><br><span class="line">     <span class="attribute">limit_conn</span> perip <span class="number">10</span>;</span><br><span class="line">     <span class="comment"># 限制与服务器的总连接数</span></span><br><span class="line">     <span class="attribute">limit_conn</span> perserver <span class="number">100</span>; </span><br><span class="line">     <span class="attribute">proxy_pass</span> http://172.16.0.235:18083;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-高级配置示例"><a class="markdownIt-Anchor" href="#四-高级配置示例"></a> 四、高级配置示例</h2><p>通过将基本的“流量限制”与其他Nginx功能配合使用，我们可以实现更细粒度的流量限制。</p><h3 id="41-白名单"><a class="markdownIt-Anchor" href="#41-白名单"></a> 4.1 白名单</h3><p>下面这个例子将展示，如何对任何不在白名单内的请求强制执行“流量限制”：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">geo</span> $limit &#123;</span><br><span class="line"><span class="attribute">default</span> <span class="number">1</span>;</span><br><span class="line">10.0.0.0/8 0;</span><br><span class="line">192.168.0.0/64 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">map</span> $limit $limit_key &#123;</span><br><span class="line">0 &quot;&quot;;</span><br><span class="line">1 $binary_remote_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">limit_req_zone</span> $limit_key zone=req_zone:<span class="number">10m</span> rate=5r/s;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone=req_zone burst=<span class="number">10</span> nodelay;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子同时使用了<a href="http://nginx.org/en/docs/http/ngx_http_geo_module.html#geo"><code>geo</code></a>和<a href="http://nginx.org/en/docs/http/ngx_http_map_module.html#map"><code>map</code></a>指令。<code>geo</code>块将给在白名单中的IP地址对应的<code>$limit</code>变量分配一个值0，给其它不在白名单中的分配一个值1。然后我们使用一个映射将这些值转为key，如下：</p><ul><li>如果<code>$limit</code>变量的值是0，<code>$limit_key</code>变量将被赋值为空字符串</li><li>如果<code>$limit</code>变量的值是1，<code>$limit_key</code>变量将被赋值为客户端二进制形式的IP地址</li></ul><p>两个指令配合使用，白名单内IP地址的<code>$limit_key</code>变量被赋值为空字符串，不在白名单内的被赋值为客户端的IP地址。当<code>limit_req_zone</code>后的第一个参数是空字符串时，不会应用“流量限制”，所以白名单内的IP地址(10.0.0.0/8和192.168.0.0/24 网段内)不会被限制。其它所有IP地址都会被限制到每秒5个请求。</p><p><code>limit_req</code>指令将限制应用到**/**的location块，允许在配置的限制上最多超过10个数据包的突发，并且不会延迟转发。</p><h3 id="42-location包含多limit_req指令"><a class="markdownIt-Anchor" href="#42-location包含多limit_req指令"></a> 4.2 location包含多<code>limit_req</code>指令</h3><p>我们可以在一个location块中配置多个<code>limit_req</code>指令。符合给定请求的所有限制都被应用时，意味着将采用最严格的那个限制。例如，多个指令都制定了延迟，将采用最长的那个延迟。同样，请求受部分指令影响被拒绝，即使其他指令允许通过也无济于事。</p><p>扩展前面将“流量限制”应用到白名单内IP地址的例子：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">limit_req_zone</span> $limit_key zone=req_zone:<span class="number">10m</span> rate=5r/s;</span><br><span class="line"><span class="attribute">limit_req_zone</span> $binary_remote_addr zone=req_zone_wl:<span class="number">10m</span> rate=15r/s;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone=req_zone burst=<span class="number">10</span> nodelay;</span><br><span class="line"><span class="attribute">limit_req</span> zone=req_zone_wl burst=<span class="number">20</span> nodelay;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>白名单内的IP地址不会匹配到第一个“流量限制”，而是会匹配到第二个<code>req_zone_wl</code>，并且被限制到每秒15个请求。不在白名单内的IP地址两个限制能匹配到，所以应用限制更强的那个：每秒5个请求。</p><h2 id="五-配置相关功能"><a class="markdownIt-Anchor" href="#五-配置相关功能"></a> 五、配置相关功能</h2><h3 id="51-日志记录"><a class="markdownIt-Anchor" href="#51-日志记录"></a> 5.1 日志记录</h3><p>默认情况下，Nginx会在日志中记录由于流量限制而延迟或丢弃的请求，如下所示：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>/<span class="number">06</span>/<span class="number">13</span> <span class="number">04</span><span class="symbol">:</span><span class="number">20</span><span class="symbol">:</span><span class="number">00</span> [error] <span class="number">120315</span><span class="comment">#0: *32086 limiting requests, excess: 1.000 by zone &quot;mylimit&quot;, client: 192.168.1.2, server: nginx.com, request: &quot;GET / HTTP/1.0&quot;, host: &quot;nginx.com&quot;</span></span><br></pre></td></tr></table></figure><p>日志条目中包含的字段：</p><ul><li><em>limiting requests</em> - 表明日志条目记录的是被“流量限制”请求</li><li><em>excess</em> - 每毫秒超过对应“流量限制”配置的请求数量</li><li><em>zone</em> - 定义实施“流量限制”的区域</li><li><em>client</em> - 发起请求的客户端IP地址</li><li><em>server</em> - 服务器IP地址或主机名</li><li><em>request</em> - 客户端发起的实际HTTP请求</li><li><em>host</em> - HTTP报头中host的值</li></ul><p>默认情况下，Nginx以<code>error</code>级别来记录被拒绝的请求，如上面示例中的<code>[error]</code>所示(Ngin以较低级别记录延时请求，一般是<code>info</code>级别)。如要更改Nginx的日志记录级别，需要使用<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_log_level"><code>limit_req_log_level</code></a>指令。这里，我们将被拒绝请求的日志记录级别设置为<code>warn</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /login/ &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone=mylimit burst=<span class="number">20</span> nodelay;</span><br><span class="line"><span class="attribute">limit_req_log_level</span> <span class="literal">warn</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://my_upstream;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="52-发送到客户端的错误代码"><a class="markdownIt-Anchor" href="#52-发送到客户端的错误代码"></a> 5.2 发送到客户端的错误代码</h3><p>一般情况下，客户端超过配置的流量限制时，Nginx响应状态码为<strong>503(Service Temporarily Unavailable)</strong>。可以使用<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_status"><code>limit_req_status</code></a>指令来设置为其它状态码(例如下面的<strong>444</strong>状态码):</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /login/ &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone=mylimit burst=<span class="number">20</span> nodelay;</span><br><span class="line"><span class="attribute">limit_req_status</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定location拒绝所有请求"><a class="markdownIt-Anchor" href="#指定location拒绝所有请求"></a> 指定<code>location</code>拒绝所有请求</h3><p>如果你想拒绝某个指定URL地址的所有请求，而不是仅仅对其限速，只需要在<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location"><code>location</code></a>块中配置<a href="http://nginx.org/en/docs/http/ngx_http_access_module.html#deny"><code>deny</code></a> <strong>all</strong>指令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /foo.php &#123;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-总结"><a class="markdownIt-Anchor" href="#六-总结"></a> 六、总结</h2><p>前文已经涵盖了Nginx和Nginx Plus提供的“流量限制”的很多功能，包括为HTTP请求的不同loation设置请求速率，给“流量限制”配置<code>burst</code>和<code>nodelay</code>参数。还涵盖了针对客户端IP地址的白名单和黑名单应用不同“流量限制”的高级配置，阐述了如何去日志记录被拒绝和延时的请求。</p><h2 id="七-拓展"><a class="markdownIt-Anchor" href="#七-拓展"></a> 七、拓展</h2><p>动态控制，参考https://github.com/openresty/lua-resty-limit-traffic</p><h2 id="八-参考文档"><a class="markdownIt-Anchor" href="#八-参考文档"></a> 八、参考文档</h2><p><a href="https://zhaox.github.io/nginx/2019/09/05/explain-nginx-rate-limit">图解Nginx限流配置</a></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis 分布式锁</title>
      <link href="/2021/07/31/redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2021/07/31/redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式锁篇"><a class="markdownIt-Anchor" href="#分布式锁篇"></a> 分布式锁篇</h2><h2 id="一-引言"><a class="markdownIt-Anchor" href="#一-引言"></a> 一、引言</h2><p>​我们在系统中修改已有数据时，需要先读取，然后进行修改保存，此时很容易遇到并发问题。由于修改和保存不是原子操作，在并发场景下，部分对数据的操作可能会丢失。在单服务器系统我们常用本地锁来避免并发带来的问题，然而，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731180556.png" alt="img"></p><h2 id="二-概述"><a class="markdownIt-Anchor" href="#二-概述"></a> 二、概述</h2><p>​首先，锁在传统多线程环境下，即保证多个线程取操作共享资源的安全性。扩展到分布式的环境中，由于服务是多节点部署，且网络因素也会有一定的影响，因此要保证分布式环境共享资源的正确性，一致性，因此用的分布式锁。分布式锁提供了多个服务器节点访问共享资源互斥的一种手段。</p><h3 id="21-常见的分布式锁"><a class="markdownIt-Anchor" href="#21-常见的分布式锁"></a> 2.1 常见的分布式锁</h3><ul><li>基于数据库</li><li>基于缓存</li><li>基于zookeeper实现的分布式锁。</li></ul><h3 id="22-几个重要的概念"><a class="markdownIt-Anchor" href="#22-几个重要的概念"></a> 2.2 几个重要的概念</h3><ul><li>分布式锁管理(DLM): Distributed Lock Manager，分配给节点锁和释放锁，对分布式锁进行统一的管理</li><li>租约(lease): 从DLM, 获得锁的有效期，超过有效期，DLM自动回收锁，租约保证了一个客户端不会占用锁很长时间。一定程度上保证了高效性。</li></ul><h3 id="23-分布式锁的特点"><a class="markdownIt-Anchor" href="#23-分布式锁的特点"></a> 2.3 分布式锁的特点</h3><ul><li>互斥性：和我们本地锁一样互斥性是最基本，但是分布式锁需要保证在不同节点的不同线程的互斥。</li><li>可重入性：同一个节点上的同一个线程如果获取了锁之后那么也可以再次获取这个锁。</li><li>锁超时：和本地锁一样支持锁超时，防止死锁。</li><li>高效，高可用：加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。</li><li>支持阻塞和非阻塞：和ReentrantLock一样支持lock和trylock以及tryLock(long timeOut)。</li><li>支持公平锁和非公平锁(可选)：公平锁的意思是按照请求加锁的顺序获得锁，非公平锁就相反是无序的。这个一般来说实现的比较少。</li></ul><h2 id="三-如何设计分布式锁"><a class="markdownIt-Anchor" href="#三-如何设计分布式锁"></a> 三、如何设计分布式锁</h2><h3 id="31-基于数据库"><a class="markdownIt-Anchor" href="#31-基于数据库"></a> 3.1 基于数据库</h3><h4 id="311-数据表方案"><a class="markdownIt-Anchor" href="#311-数据表方案"></a> 3.1.1 数据表方案</h4><p>要实现分布式锁，最简单的方式可能就是直接创建一张锁表，然后通过操作该表中的数据来实现了。</p><p>当我们要锁住某个方法或资源时，我们就在该表中增加一条记录，想要释放锁的时候就删除这条记录。</p><p>创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> TDistributedLock (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `lock_key` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;锁的键值&#x27;</span>,</span><br><span class="line">  `lock_timeout` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> NOW() COMMENT <span class="string">&#x27;锁的超时时间&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> NOW() COMMENT <span class="string">&#x27;记录创建时间&#x27;</span>,</span><br><span class="line">  `modify_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> NOW() COMMENT <span class="string">&#x27;记录修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uidx_lock_key` (`lock_key`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;分布式锁表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>需要加锁时，只需要往这张表里插入一条数据就可以了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TDistributedLock(lock_key, lock_timeout) <span class="keyword">values</span>(<span class="string">&#x27;lock_xxxx&#x27;</span>, <span class="string">&#x27;2020-07-19 18:20:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当对共享资源的操作完毕后，可以释放锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> TDistributedLock <span class="keyword">where</span> lock_key<span class="operator">=</span><span class="string">&#x27;lock_xxxx&#x27;</span>;</span><br></pre></td></tr></table></figure><p>该方案简单方便，主要利用数据库表的唯一索引约束特性，保证多个微服务模块同时申请分布式锁时，只有一个能够获得锁。</p><p>下面讨论下一些相关问题：</p><ol><li>获得锁的微服务模块意外crash，来不及释放锁怎么办？因为在插入锁记录时，同时设置了一个<code>lock_timeout</code>属性，可以另外跑一个<code>lock_cleaner</code>，将超时的锁记录删除。当然为了安全，<code>lock_timeout</code>最好设置一个合理的值，以确保在这之后正常的共享资源操作一定是完成了的。</li><li>获得锁失败的微服务模块如何继续尝试获得锁？搞一个while循环，反复尝试，如能成功获得锁就跳出循环，否则sleep一会儿重新进入循环体继续尝试。</li><li>数据库单点不安全怎么办？数据库领域有主从、一主多从、多主多从等复制方案，可保证一个数据库实例挂掉时，其它实例可以接管过来继续提供服务。不过需要注意的是有一些复制方案它是异步的，并不能保证写入一个数据库实例的数据立马可以在另外一个数据库实例中查询到， 这就容易造成锁丢失，导致授予了两把锁的问题。</li><li>获得锁的微服务模块想重入地获得锁怎么办？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给它就可以了。同样为了确保安全，必须在本微服务模块没有主动释放锁，同时离锁的超时时间还很久远的情况下，才可以安全地直接把锁再次分配给它，同时更新锁的超时时间。</li></ol><p>该方案的缺陷：</p><ol><li>该方案利用数据库表自身的唯一键约束，性能相比后面提到的redis方案会差一点。</li><li>该方案中其它尝试获得锁的客户端会反复尝试插入数据，消耗数据库资源。</li><li>该方案中需要为数据库找一种比较可靠的高可用方案，同时还得确保数据库实例之间复制方案是满足一致性要求的。</li></ol><h4 id="312-数据库表的行排它锁方案"><a class="markdownIt-Anchor" href="#312-数据库表的行排它锁方案"></a> 3.1.2 数据库表的行排它锁方案</h4><p>除了动态地往数据库表里插入数据外，还可以预先将锁信息写入数据库表，然后利用数据库的行排它锁来进行加锁与释放锁操作。</p><p>例如加锁时可以执行以后命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TDistributedLock <span class="keyword">WHERE</span> lock_key<span class="operator">=</span><span class="string">&#x27;lock_xxxx&#x27;</span> <span class="keyword">FOR</span> UPDATE;</span><br></pre></td></tr></table></figure><p>当对共享资源的操作完毕后，可以释放锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>该方案也很简单，利用数据库表的行排它锁特性，保证多个微服务模块同时申请分布式锁时，只有一个能够获得锁。</p><p>下面讨论下一些相关问题：</p><ol><li>获得锁的微服务模块意外crash，来不及释放锁怎么办？没有<code>COMMIT</code>，数据库会自动将锁释放掉。</li><li>获得锁失败的微服务模块如何继续尝试获得锁？<code>for update</code>语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功，因此不用写while循环反复尝试获得锁了。</li><li>数据库单点问题跟上面那个方案一致，不再赘述。</li><li>在这个方案下，好像很难做到锁可重入了。</li></ol><p>该方案的缺陷：</p><ol><li>该方案利用数据库表的行排它锁特性，性能上比上面那个方案好一点，但相比后面提到的redis方案还是差一点。</li><li>该方案中需要为该表的数据库事务配置较高的事务超时时间，而且一个排他锁长时间不提交，会占用数据库连接。</li><li>该方案中同样需要为数据库找一种比较可靠的高可用方案，同时还得确保数据库实例之间复制方案是满足一致性要求的。</li></ol><h3 id="32-基于redis"><a class="markdownIt-Anchor" href="#32-基于redis"></a> 3.2 基于redis</h3><p>使用redis做分布式锁的思路大概是这样的：在redis中设置一个值表示加了锁，然后释放锁的时候就把这个key删除。</p><p>Redis 锁主要利用 Redis 的 setnx 命令。</p><ul><li>加锁命令：SETNX key value，当键不存在时，对键进行设置操作并返回成功，否则返回失败。KEY 是锁的唯一标识，一般按业务来决定命名。</li><li>解锁命令：DEL key，通过删除键值对释放锁，以便其他线程可以通过 SETNX 命令来获取锁。</li><li>锁超时：EXPIRE key timeout, 设置 key 的超时时间，以保证即使锁没有被显式释放，锁也可以在一定时间后自动释放，避免资源被永远锁住。</li></ul><p>则加锁解锁伪代码如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (setnx(key, <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">    expire(key, <span class="number">30</span>)</span><br><span class="line">    try &#123;</span><br><span class="line">        <span class="regexp">//</span>TODO 业务逻辑</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        del(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述锁实现方式存在一些问题：</p><h4 id="321-setnx-和-expire-非原子性"><a class="markdownIt-Anchor" href="#321-setnx-和-expire-非原子性"></a> 3.2.1 SETNX 和 EXPIRE 非原子性</h4><p>如果 SETNX 成功，在设置锁超时时间后，服务器挂掉、重启或网络问题等，导致 EXPIRE 命令没有执行，锁没有设置超时时间变成死锁。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731183406.png" alt="img"></p><p>有很多开源代码来解决这个问题，比如使用 lua 脚本。</p><p>具体代码如下：</p><p><strong>获取锁</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NX是指如果key不存在就成功，key存在返回false，PX可以指定过期时间</span></span><br><span class="line">redis.call(<span class="string">&quot;set&quot;</span>, key, ARGV[<span class="number">1</span>], <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, ARGV[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><strong>释放锁</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 释放锁涉及到两条指令，这两条指令不是原子性的</span></span><br><span class="line"><span class="comment">-- 需要用到redis的lua脚本支持特性，redis执行lua脚本是原子性的</span></span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>, key) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>, key)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上述的lua代码比较简单，不具体解释了。这里要注意给锁键的value值要保证唯一，这个是为了避免释放错了锁。</p><p><strong>场景如下：</strong></p><p>​假设A获取了锁，过期时间30s，此时35s之后，锁已经自动释放了，A去释放锁，但是此时可能B获取了锁。加上释放锁前的value值判断，A客户端就不能删除B的锁了。</p><p>如果是javascript的项目，可以使用<a href="https://github.com/danielstjules/redislock">redislock</a>库，它封装了上述加锁、释放锁等操作逻辑，用起来很方便。</p><p>才区区几行代码就优雅地搞定了分布式锁，而且redis的写入、删除键值的性能超高，看样子很完美，但事实上并非如此。</p><h4 id="322-锁误解除"><a class="markdownIt-Anchor" href="#322-锁误解除"></a> 3.2.2 锁误解除</h4><p>​如果线程 A 成功获取到了锁，并且设置了过期时间 30 秒，但线程 A 执行时间超过了 30 秒，锁过期自动释放，此时线程 B 获取到了锁；随后 A 执行完成，线程 A 使用 DEL 命令来释放锁，但此时线程 B 加的锁还没有执行完成，线程 A 实际释放的线程 B 加的锁。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731184253.png" alt="img"></p><p>通过在 value 中设置当前线程加锁的标识，在删除之前验证 key 对应的 value 判断锁是否是当前线程持有。可生成一个 UUID 标识当前线程，使用 lua 脚本做验证标识和解锁操作。</p><p><strong>获取锁</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取UUID</span></span><br><span class="line">String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">SET key uuid NX EX <span class="number">30</span></span><br><span class="line">redis.call(<span class="string">&quot;set&quot;</span>, key, ARGV[<span class="number">1</span>], <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, ARGV[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/<span class="regexp">/ 解锁</span></span><br><span class="line"><span class="regexp">if (redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1])then </span></span><br><span class="line"><span class="regexp">    return redis.call(&#x27;del&#x27;, KEYS[1])</span></span><br><span class="line"><span class="regexp">else</span></span><br><span class="line"><span class="regexp">    return 0</span></span><br><span class="line"><span class="regexp">end</span></span><br></pre></td></tr></table></figure><h4 id="323-超时解锁导致并发"><a class="markdownIt-Anchor" href="#323-超时解锁导致并发"></a> 3.2.3 超时解锁导致并发</h4><p>如果线程 A 成功获取锁并设置过期时间 30 秒，但线程 A 执行时间超过了 30 秒，锁过期自动释放，此时线程 B 获取到了锁，线程 A 和线程 B 并发执行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731233037.png" alt="img"></p><p>A、B 两个线程发生并发显然是不被允许的，一般有两种方式解决该问题：</p><ul><li>将过期时间设置足够长，确保代码逻辑在锁释放之前能够执行完成。</li><li>为获取锁的线程增加守护线程，为将要过期但未释放的锁增加有效时间。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731212922.png" alt="img"></p><h4 id="324-不可重入"><a class="markdownIt-Anchor" href="#324-不可重入"></a> 3.2.4 不可重入</h4><p>当线程在持有锁的情况下再次请求加锁，如果一个锁支持一个线程多次加锁，那么这个锁就是可重入的。如果一个不可重入锁被再次加锁，由于该锁已经被持有，再次加锁会失败。Redis 可通过对锁进行重入计数，加锁时加 1，解锁时减 1，当计数归 0 时释放锁。</p><p>在本地记录记录重入次数，如 Java 中使用 ThreadLocal 进行重入次数统计，简单示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Map&lt;String, Integer&gt;&gt; LOCKERS = ThreadLocal.withInitial(HashMap::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">  Map&lt;String, Integer&gt; lockers = LOCKERS.get();</span><br><span class="line">  <span class="keyword">if</span> (lockers.containsKey(key)) &#123;</span><br><span class="line">    lockers.put(key, lockers.get(key) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (SET key uuid NX EX <span class="number">30</span>) &#123;</span><br><span class="line">      lockers.put(key, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">  Map&lt;String, Integer&gt; lockers = LOCKERS.get();</span><br><span class="line">  <span class="keyword">if</span> (lockers.getOrDefault(key, <span class="number">0</span>) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    lockers.remove(key);</span><br><span class="line">    DEL key</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    lockers.put(key, lockers.get(key) - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地记录重入次数虽然高效，但如果考虑到过期时间和本地、Redis 一致性的问题，就会增加代码的复杂性。另一种方式是 Redis Map 数据结构来实现分布式锁，既存锁的标识也对重入次数进行计数。Redission 加锁示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 lock_key 不存在</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;exists&#x27;</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line">then</span><br><span class="line">    <span class="comment">// 设置 lock_key 线程标识 1 进行加锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 设置过期时间</span></span><br><span class="line">    redis.call(<span class="string">&#x27;pexpire&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">    end;</span><br><span class="line"><span class="comment">// 如果 lock_key 存在且线程标识是当前欲加锁的线程标识</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;hexists&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]) == <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 自增</span></span><br><span class="line">    then redis.call(<span class="string">&#x27;hincrby&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 重置过期时间</span></span><br><span class="line">    redis.call(<span class="string">&#x27;pexpire&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">    end;</span><br><span class="line"><span class="comment">// 如果加锁失败，返回锁剩余时间</span></span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">&#x27;pttl&#x27;</span>, KEYS[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h4 id="325-无法等待锁释放"><a class="markdownIt-Anchor" href="#325-无法等待锁释放"></a> 3.2.5 无法等待锁释放</h4><p>上述命令执行都是立即返回的，如果客户端可以等待锁释放就无法使用。</p><ul><li>可以通过客户端轮询的方式解决该问题，当未获取到锁时，等待一段时间重新获取锁，直到成功获取锁或等待超时。这种方式比较消耗服务器资源，当并发量比较大时，会影响服务器的效率。</li><li>另一种方式是使用 Redis 的发布订阅功能，当获取锁失败时，订阅锁释放消息，获取锁成功后释放时，发送锁释放消息。如下：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731214029.png" alt="img"></p><h4 id="326-redis高可用架构之主备切换"><a class="markdownIt-Anchor" href="#326-redis高可用架构之主备切换"></a> 3.2.6 Redis高可用架构之主备切换</h4><p>为了保证 Redis 的可用性，一般采用主从方式部署。主从数据同步有异步和同步两种方式，Redis 将指令记录在本地内存 buffer 中，然后异步将 buffer 中的指令同步到从节点，从节点一边执行同步的指令流来达到和主节点一致的状态，一边向主节点反馈同步情况。</p><p>在包含主从模式的集群部署方式中，当主节点挂掉时，从节点会取而代之，但客户端无明显感知。当客户端 A 成功加锁，指令还未同步，此时主节点挂掉，从节点提升为主节点，新的主节点没有锁的数据，当客户端 B 加锁时就会成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731233048.png" alt="img"></p><p>单点是不行的，主从架构也不保险，对于这个问题，Redis 的官方给出了一个 <code>RedLock</code> 的解决方案。</p><h4 id="327-redis高可用架构之-集群脑裂"><a class="markdownIt-Anchor" href="#327-redis高可用架构之-集群脑裂"></a> 3.2.7 Redis高可用架构之 集群脑裂</h4><p>集群脑裂指因为网络问题，导致 Redis master 节点跟 slave 节点和 sentinel 集群处于不同的网络分区，因为 sentinel 集群无法感知到 master 的存在，所以将 slave 节点提升为 master 节点，此时存在两个不同的 master 节点。Redis Cluster 集群部署方式同理。</p><p>当不同的客户端连接不同的 master 节点时，两个客户端可以同时拥有同一把锁。如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731233051.png" alt="img"></p><h4 id="328-redlock"><a class="markdownIt-Anchor" href="#328-redlock"></a> 3.2.8 RedLock</h4><p>实现 <code>RedLock</code> 实现分布式锁的前提条件是：假设有 N 个 Redis master 节点，所有节点之间是相互独立，互补影响的，并且业务系统也是单纯的对这些节点进行调用：</p><p>RedLock主要解决Redis没有总是可用的保障，解决failover问题。加锁的时候，它会向过半节点发送 set(key, value, nx=True, ex=xxx)指令，只要过半节点set成功，那就认为加锁成功。释放锁时，需要向所有节点发送del 指令。不过Redlock算法还需要考虑出错重试、时钟漂移等很多细节问题，同时因为RedLock需要向多个节点进行读写，意味着相比单实例Redis性能会下降一些。</p><h5 id="3281-具体实现"><a class="markdownIt-Anchor" href="#3281-具体实现"></a> 3.2.8.1 具体实现</h5><p>在Redis分布式环境中，我们假设有N个Redis master。这些节点完全独立，不存在主从复制或者其他集群协调机制。redlock确保在每（N)个实例上使用此方法获取和释放锁。假设有5个不会同时都宕掉的Redis master节点。</p><p>为了取到锁，客户端应该执行以下操作:</p><ol><li>获取当前Unix时间，以毫秒为单位。</li><li>依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。</li><li>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li><li>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</li><li>如果因为某些原因，获取锁失败（没有在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）</li></ol><h5 id="3282-redlock缺点"><a class="markdownIt-Anchor" href="#3282-redlock缺点"></a> 3.2.8.2 RedLock缺点</h5><p>这个方案看似很好，缺点就是太重，通常不被推荐。如果很在乎高可用性，希望挂了一台Redis完全不受影响，那么应该考虑redlock。仔细审视后该方案还是存在一些问题的，分布式架构师<code>Martin</code>就提出了自己的<a href="http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">意见</a>。这些意见总结下来如下：</p><blockquote><p>分布式锁的用途无非两种：</p><ul><li>要么为了提升效率，用锁来保证一个任务没有必要被执行两次。比如（很昂贵的计算） 保证正确，使用锁来保证任务按照正常的步骤执行，防止两个节点同时操作一份数据，造成文件冲突，数据丢失。这种情况下对锁是有一定宽容度的，就算发生了两个节点同时工作，对系统的影响也仅仅是多付出了一些计算的成本，没什么额外的影响。这个时候 使用单点的 Redis 就能很好的解决问题，没有必要使用RedLock，维护那么多的Redis实例，提升系统的维护成本。</li><li>要么为了安全性，此时必须从理论上确保拿到的锁是安全的，两个进程不可能同时持有某把锁，因为很可能涉及到一些金钱交易，如果锁定失败，并且两个节点同时处理同一数据，则结果将导致文件损坏，数据丢失，永久性不一致，或者金钱方面的损失！而RedLock方案从理论上说并不能保证这一点。</li></ul></blockquote><p><code>RedLock</code>方案从理论上说并不能保证锁的安全性，主要有以下几点原因：</p><ol><li>锁的自动过期机制很可能导致锁的意外丢失。因此采用watchdog机制确保在持有锁之后持续地给锁续期是有必要的。</li><li><code>RedLock</code>方案对于系统时钟有强依赖。假设有A、B、C、D、E 5个redis节点：<ol><li>客户端1获取节点A，B，C的锁定。由于网络问题，无法访问D和E。</li><li>节点C上的时钟向前跳，导致锁过期。</li><li>客户端2获取节点C，D，E的锁定。由于网络问题，无法访问A和B。</li><li>现在，客户1和2都认为他们持有该锁。</li></ol></li><li><code>RedLock</code>方案同样无法避免redis实例意外重启导致的问题。假设有A、B、C、D、E 5个redis节点：<ol><li>客户端1获取节点A，B，C的锁定。由于网络问题，无法访问D和E。</li><li>节点C上的redis实例意外重启，重启后原来写入的键值丢失。</li><li>客户端2获取节点C，D，E的锁定。由于网络问题，无法访问A和B。</li><li>现在，客户1和2都认为他们持有该锁。</li></ol></li></ol><p>虽说<code>RedLock</code>从理论上说确实无法100%保证锁的安全性，但以上列举的场景极为严苛，事实上在现实中很难碰到。而由于该方案获取锁的效率确实很高，事实上还是有不少业务场景就是使用的该方案。</p><h5 id="3283-redisson-工具中的-redlock-实现"><a class="markdownIt-Anchor" href="#3283-redisson-工具中的-redlock-实现"></a> 3.2.8.3 <code>Redisson</code> 工具中的 <code>RedLock</code> 实现</h5><p><code>Redisson</code> 是一个具备内存数据网格特征的 Redis Java 客户端工具。它提供了 30 多种对象类型和服务功能：Set, Multimap, SortedSet, Map, List, Queue, Deque, Semaphore, Lock, AtomicLong, Map Reduce, Publish / Subscribe, Bloom filter, Spring Cache, Tomcat, Scheduler, JCache API, Hibernate, RPC.</p><p>Redisson 对于 RedLock 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.120.0:5378&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">RedissonClient client = Redisson.create(config);</span><br><span class="line"></span><br><span class="line">Config config1 = <span class="keyword">new</span> Config();</span><br><span class="line">config1.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.120.1:5378&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">RedissonClient client1 = Redisson.create(config1);</span><br><span class="line"></span><br><span class="line">Config config2 = <span class="keyword">new</span> Config();</span><br><span class="line">config2.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.120.2:5378&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">RedissonClient client2 = Redisson.create(config2);</span><br><span class="line"></span><br><span class="line">String key = <span class="string">&quot;SIGN_GET_GIFT_&quot;</span> + userId;</span><br><span class="line">RLock rLock = client.getLock(key);</span><br><span class="line">RLock rLock1 = client1.getLock(key);</span><br><span class="line">RLock rLock2 = client2.getLock(key);</span><br><span class="line">RedissonRedLock redLock = <span class="keyword">new</span> RedissonRedLock(rLock, rLock1, rLock2);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!redLock.tryLock()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;签到失败，请勿频繁请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行签到领取礼品逻辑</span></span><br><span class="line">    signGetGift();</span><br><span class="line">    saveSignLog();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;签到成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;签到异常&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    redLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33-基于zookeeper"><a class="markdownIt-Anchor" href="#33-基于zookeeper"></a> 3.3 基于zookeeper</h3><p><code>zookeeper</code>是一种提供配置管理、分布式协同以及命名的中心化服务。很明显<code>zookeeper</code>本身就是为了分布式协同这个目标而生的，它采用一种被称为ZAB(Zookeeper Atomic Broadcast)的一致性协议来保证数据的一致性。基于zk的一些特性，我们很容易得出使用zk实现分布式锁的落地方案：</p><ol><li>使用zk的临时节点和有序节点，每个线程获取锁就是在zk创建一个临时有序的节点，比如在/lock/目录下。</li><li>创建节点成功后，获取/lock目录下的所有临时节点，再判断当前线程创建的节点是否是所有的节点的序号最小的节点</li><li>如果当前线程创建的节点是所有节点序号最小的节点，则认为获取锁成功。</li><li>如果当前线程创建的节点不是所有节点序号最小的节点，则对节点序号的前一个节点添加一个事件监听。 比如当前线程获取到的节点序号为<code>/lock/003</code>,然后所有的节点列表为<code>[/lock/001,/lock/002,/lock/003]</code>,则对<code>/lock/002</code>这个节点添加一个事件监听器。</li></ol><p>如果锁释放了，会唤醒下一个序号的节点，然后重新执行第3步，判断是否自己的节点序号是最小。</p><p>比如<code>/lock/001</code>释放了，<code>/lock/002</code>监听到时间，此时节点集合为<code>[/lock/002,/lock/003]</code>,则<code>/lock/002</code>为最小序号节点，获取到锁。</p><p>从数据一致性的角度来说，zk的方案无疑是最可靠的，而且等候锁的客户端也不用不停地轮循锁是否可用，当锁的状态发生变化时可以自动得到通知。</p><p>但zookeeper实现也存在较大的缺陷：</p><ul><li>性能问题</li></ul><p>zookeeper作为分布式协调系统，不适合作为频繁的读写存储系统。而且通过增加zookeeper服务器来提高集群的读写能力也是有上限的，因为zookeeper集群规模越大，zookeeper数据需要同步到更多的服务器。同时zookeeper分布式锁每一次都要申请锁和释放锁，都要动态创建删除临时节点，所以zookeeper不能维护大量的分布式锁，也不能维护大量的客户端心跳长连接。在分布式定理中，zookeeper追求的是CP，也就是zookeeper保证集群向外提供统一的视图，但是zookeeper牺牲了可用性，在极端情况下，zookeeper可能会丢弃一些请求。并且zookeeper集群在进行leader选举的时候整个集群也是不可用的，集群选举时间长达30 ~ 120s。</p><ul><li>惊群效应</li></ul><p>在获取锁的时候有一个细节，客户端在获取锁失败的情况下，会监听<code>/lock</code>节点。这会存在性能问题，如果在<code>/lock</code>节点下排队等待的有1000个进程，那么锁持有者释放锁(删除<code>/lock</code>节点下的临时节点)时，zookeeper会通知监听<code>/lock</code>的1000个进程。然后这1000个进程会读取zookeeper下<code>/lock</code>节点的全部临时节点，然后判断自己是否为最小的临时节点。但是这1000个进程中只有一个最小序号的进程会持有分布式锁，也就是说999个进程做的都是无用功。这些无用功会对zookeeper造成较大压力的读负载。为了解决惊群效应，需要对zookeeper分布式锁监听逻辑进行优化，实际上，排队进程真正感兴趣的是比自己临时节点序号小的节点，我们只需要监听序号比自己小的节点。</p><p>另外还需要注意的是，使用zookeeper方案也不是说就高枕无忧了。假设某一个客户端通过上述方案获得了锁，但由于网络问题，该客户端与zookeeper集群间失去了联系，zookeeper的心跳无效后，该客户端会收到了一个zookeeper的SessionTimeout的事件。为了保证分布式锁的有效性，这个时候客户端就需要在下一个等侯者获得锁之前，中断对共享资源的访问，然后继续尝试获取锁。</p><p>如果是javascript的项目，可以使用<a href="https://github.com/metamx/zk-lock">zk-lock</a>库，它封装了上述方案的复杂逻辑，用起来也很方便。</p><h2 id="四-三种方案方案比较"><a class="markdownIt-Anchor" href="#四-三种方案方案比较"></a> 四、三种方案方案比较</h2><p>上面几种方式，哪种方式都无法做到完美。就像CAP一样，在复杂性、可靠性、性能等方面无法同时满足，所以，根据不同的应用场景选择最适合自己的才是王道。</p><ul><li>从理解的难易程度角度（从低到高）<ul><li>数据库 &gt; 缓存 &gt; Zookeeper</li></ul></li><li>从实现的复杂性角度（从低到高）<ul><li>Zookeeper &gt;= 缓存 &gt; 数据库</li></ul></li><li>从性能角度（从高到低）<ul><li>缓存 &gt; Zookeeper &gt;= 数据库</li></ul></li><li>从可靠性角度（从高到低）<ul><li>Zookeeper &gt; 缓存 &gt; 数据库</li></ul></li></ul><h2 id="五-分布式锁实现"><a class="markdownIt-Anchor" href="#五-分布式锁实现"></a> 五、分布式锁实现</h2><h3 id="51-基于redisson"><a class="markdownIt-Anchor" href="#51-基于redisson"></a> 5.1 基于Redisson</h3><h4 id="511-redisson介绍"><a class="markdownIt-Anchor" href="#511-redisson介绍"></a> 5.1.1 Redisson介绍</h4><p>大部分网站使用的分布式锁是基于缓存的，有更好的性能，而缓存一般是以集群方式部署，保证了高可用性。而Redis分布式锁官方推荐使用redisson。</p><p>Redisson原理图如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731225633.png" alt="Redisson原理图"></p><h4 id="512-redisson锁说明"><a class="markdownIt-Anchor" href="#512-redisson锁说明"></a> 5.1.2 Redisson锁说明</h4><p>1、redission获取锁释放锁的使用和JDK里面的lock很相似，底层的实现采用了类似lock的处理方式<br>2、redisson 依赖redis，因此使用redisson 锁需要服务端安装redis，而且redisson 支持单机和集群两种模式下的锁的实现<br>3、redisson 在多线程或者说是分布式环境下实现机制，其实是通过设置key的方式进行实现，也就是说多个线程为了抢占同一个锁，其实就是争抢设置key。</p><h4 id="513-redisson原理"><a class="markdownIt-Anchor" href="#513-redisson原理"></a> 5.1.3 Redisson原理</h4><p><strong>1)加锁：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;exists&#x27;</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span>) <span class="keyword">then</span> </span><br><span class="line">        redis.call(<span class="string">&#x27;hset&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">         redis.call(<span class="string">&#x27;pexpire&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">          <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;hexists&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">        redis.call(<span class="string">&#x27;hincrby&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], <span class="number">1</span>);</span><br><span class="line">        redis.call(<span class="string">&#x27;pexpire&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">&#x27;pttl&#x27;</span>, KEYS[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>将业务封装在lua中发给redis，保障业务执行的原子性。</p><p>第1个if表示执行加锁，会先判断要加锁的key是否存在，不存在就加锁。</p><p>当第1个if执行，key存在的时候，会执行第2个if，第2个if会获取第1个if对应的key剩余的有效时间，然后会进入while循环，不停的尝试加锁。</p><p><strong>2)释放锁：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;exists&#x27;</span>, KEYS[<span class="number">1</span>]) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">       redis.call(<span class="string">&#x27;publish&#x27;</span>, KEYS[<span class="number">2</span>], ARGV[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;hexists&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">3</span>]) == <span class="number">0</span>) <span class="keyword">then</span> </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">     <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">local</span> counter = redis.call(<span class="string">&#x27;hincrby&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">3</span>], <span class="number">-1</span>); </span><br><span class="line"><span class="keyword">if</span> (counter &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">     redis.call(<span class="string">&#x27;pexpire&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>]); </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">else</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>]); </span><br><span class="line">     redis.call(<span class="string">&#x27;publish&#x27;</span>, KEYS[<span class="number">2</span>], ARGV[<span class="number">1</span>]); </span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><p>执行lock.unlock(),每次都对myLock数据结构中的那个加锁次数减1。如果发现加锁次数是0了，说明这个客户端已经不再持有锁了，此时就会用：“del myLock”命令，从redis里删除这个key,另外的客户端2就可以尝试完成加锁了。</p><p><strong>3)缺点：</strong></p><p>Redis 的分布式锁在单实例的情况下是可以完美运行的，但是一旦涉及到 <code>reids</code>集群，就会出现重复加锁的情况。</p><p>Redisson存在一个问题，就是如果你对某个redis master实例，写入了myLock这种锁key的value，此时会异步复制给对应的master slave实例。但是这个过程中一旦发生redis master宕机，主备切换，redis slave变为了redis master。接着就会导致，客户端2来尝试加锁的时候，在新的redis master上完成了加锁，而客户端1也以为自己成功加了锁。此时就会导致多个客户端对一个分布式锁完成了加锁。这时系统在业务上一定会出现问题，导致脏数据的产生。</p><h4 id="514-redisson配置与实现"><a class="markdownIt-Anchor" href="#514-redisson配置与实现"></a> 5.1.4  Redisson配置与实现</h4><h5 id="5141-引入依赖"><a class="markdownIt-Anchor" href="#5141-引入依赖"></a> <strong>5.1.4.1 引入依赖</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5142锁操作方法实现"><a class="markdownIt-Anchor" href="#5142锁操作方法实现"></a> <strong>5.1.4.2锁操作方法实现</strong></h5><p>要想用到分布式锁，我们就必须要实现获取锁和释放锁，获取锁和释放锁可以编写一个<code>DistributedLocker</code>接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DistributedLocker</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * lock(), 拿不到lock就不罢休，不然线程就一直block</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey)</span></span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * timeout为加锁时间，单位为秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * timeout为加锁时间，时间单位由unit确定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * tryLock()，马上返回，拿到lock就返回true，不然返回false。</span></span><br><span class="line"><span class="comment">     * 带时间限制的tryLock()，拿不到lock，就等一段时间，超时返回false.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leaseTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime)</span></span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span></span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现上面接口中对应的锁管理方法,编写一个锁管理类<code>RedissonDistributedLocker</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonDistributedLocker</span> <span class="keyword">implements</span> <span class="title">DistributedLocker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * lock(), 拿不到lock就不罢休，不然线程就一直block</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * timeout为加锁时间，单位为秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.lock(timeout, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * timeout为加锁时间，时间单位由unit确定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RLock <span class="title">lock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.lock(timeout, unit);</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * tryLock()，马上返回，拿到lock就返回true，不然返回false。</span></span><br><span class="line"><span class="comment">     * 带时间限制的tryLock()，拿不到lock，就等一段时间，超时返回false.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leaseTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, TimeUnit unit, <span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lock.tryLock(waitTime, leaseTime, unit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lockKey)</span> </span>&#123;</span><br><span class="line">        RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(RLock lock)</span> </span>&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5143配置redis链接"><a class="markdownIt-Anchor" href="#5143配置redis链接"></a> <strong>5.1.4.3配置Redis链接</strong></h5><p>在resources下新建文件<code>redisson.yml</code>，主要用于配置redis集群节点链接配置，代码如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clusterServersConfig:</span></span><br><span class="line">  <span class="comment"># 连接空闲超时，单位：毫秒 默认10000</span></span><br><span class="line">  <span class="attr">idleConnectionTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">pingTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="comment"># 同任何节点建立连接时的等待超时。时间单位是毫秒 默认10000</span></span><br><span class="line">  <span class="attr">connectTimeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="comment"># 等待节点回复命令的时间。该时间从命令发送成功时开始计时。默认3000</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># 命令失败重试次数</span></span><br><span class="line">  <span class="attr">retryAttempts:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 命令重试发送时间间隔，单位：毫秒</span></span><br><span class="line">  <span class="attr">retryInterval:</span> <span class="number">1500</span></span><br><span class="line">  <span class="comment"># 重新连接时间间隔，单位：毫秒</span></span><br><span class="line">  <span class="attr">reconnectionTimeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># 执行失败最大次数</span></span><br><span class="line">  <span class="attr">failedAttempts:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 密码</span></span><br><span class="line">  <span class="comment">#password: test1234</span></span><br><span class="line">  <span class="comment"># 单个连接最大订阅数量</span></span><br><span class="line">  <span class="attr">subscriptionsPerConnection:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">clientName:</span> <span class="literal">null</span></span><br><span class="line">  <span class="comment"># loadBalancer 负载均衡算法类的选择</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> <span class="type">!&lt;org.redisson.connection.balancer.RoundRobinLoadBalancer&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="comment">#从节点发布和订阅连接的最小空闲连接数</span></span><br><span class="line">  <span class="attr">slaveSubscriptionConnectionMinimumIdleSize:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#从节点发布和订阅连接池大小 默认值50</span></span><br><span class="line">  <span class="attr">slaveSubscriptionConnectionPoolSize:</span> <span class="number">50</span></span><br><span class="line">  <span class="comment"># 从节点最小空闲连接数 默认值32</span></span><br><span class="line">  <span class="attr">slaveConnectionMinimumIdleSize:</span> <span class="number">32</span></span><br><span class="line">  <span class="comment"># 从节点连接池大小 默认64</span></span><br><span class="line">  <span class="attr">slaveConnectionPoolSize:</span> <span class="number">64</span></span><br><span class="line">  <span class="comment"># 主节点最小空闲连接数 默认32</span></span><br><span class="line">  <span class="attr">masterConnectionMinimumIdleSize:</span> <span class="number">32</span></span><br><span class="line">  <span class="comment"># 主节点连接池大小 默认64</span></span><br><span class="line">  <span class="attr">masterConnectionPoolSize:</span> <span class="number">64</span></span><br><span class="line">  <span class="comment"># 订阅操作的负载均衡模式</span></span><br><span class="line">  <span class="attr">subscriptionMode:</span> <span class="string">SLAVE</span></span><br><span class="line">  <span class="comment"># 只在从服务器读取</span></span><br><span class="line">  <span class="attr">readMode:</span> <span class="string">SLAVE</span></span><br><span class="line">  <span class="comment"># 集群地址</span></span><br><span class="line">  <span class="attr">nodeAddresses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;redis://192.168.211.137:7001&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;redis://192.168.211.137:7002&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;redis://192.168.211.137:7003&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;redis://192.168.211.137:7004&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;redis://192.168.211.137:7005&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;redis://192.168.211.137:7006&quot;</span></span><br><span class="line">  <span class="comment"># 对Redis集群节点状态扫描的时间间隔。单位是毫秒。默认1000</span></span><br><span class="line">  <span class="attr">scanInterval:</span> <span class="number">1000</span></span><br><span class="line">  <span class="comment">#这个线程池数量被所有RTopic对象监听器，RRemoteService调用者和RExecutorService任务共同共享。默认2</span></span><br><span class="line"><span class="attr">threads:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">#这个线程池数量是在一个Redisson实例内，被其创建的所有分布式数据类型和服务，以及底层客户端所一同共享的线程池里保存的线程数量。默认2</span></span><br><span class="line"><span class="attr">nettyThreads:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 编码方式 默认org.redisson.codec.JsonJacksonCodec</span></span><br><span class="line"><span class="attr">codec:</span> <span class="type">!&lt;org.redisson.codec.JsonJacksonCodec&gt;</span> &#123;&#125;</span><br><span class="line"><span class="comment">#传输模式</span></span><br><span class="line"><span class="attr">transportMode:</span> <span class="string">NIO</span></span><br><span class="line"><span class="comment"># 分布式锁自动过期时间，防止死锁，默认30000</span></span><br><span class="line"><span class="attr">lockWatchdogTimeout:</span> <span class="number">30000</span></span><br><span class="line"><span class="comment"># 通过该参数来修改是否按订阅发布消息的接收顺序出来消息，如果选否将对消息实行并行处理，该参数只适用于订阅发布消息的情况, 默认true</span></span><br><span class="line"><span class="attr">keepPubSubOrder:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 用来指定高性能引擎的行为。由于该变量值的选用与使用场景息息相关（NORMAL除外）我们建议对每个参数值都进行尝试。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#该参数仅限于Redisson PRO版本。</span></span><br><span class="line"><span class="comment">#performanceMode: HIGHER_THROUGHPUT</span></span><br></pre></td></tr></table></figure><h5 id="5144创建redisson管理对象"><a class="markdownIt-Anchor" href="#5144创建redisson管理对象"></a> <strong>5.1.4.4创建Redisson管理对象</strong></h5><p>Redisson管理对象有2个，分别为<code>RedissonClient</code>和<code>RedissonConnectionFactory</code>，我们只用在项目的<code>RedisConfig</code>中配置一下这2个对象即可，在<code>RedisConfig</code>中添加的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment"> * Redisson客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;redssion.yml&quot;</span>);</span><br><span class="line">    Config config = Config.fromYAML(resource.getInputStream());</span><br><span class="line">    RedissonClient redisson = Redisson.create(config);</span><br><span class="line">    <span class="keyword">return</span> redisson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Redisson工厂对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonConnectionFactory <span class="title">redissonConnectionFactory</span><span class="params">(RedissonClient redisson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RedissonConnectionFactory(redisson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5145-测试代码"><a class="markdownIt-Anchor" href="#5145-测试代码"></a> <strong>5.1.4.5 测试代码</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/redisson&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">RedissonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonDistributedLocker redissonDistributedLocker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 多个用户实现加锁操作，只允许有一个用户可以获取到对应锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/lock/&#123;time&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lock</span><span class="params">(<span class="meta">@PathVariable(value = &quot;time&quot;)</span>Long time)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前休眠标识时间：&quot;</span>+time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        RLock rlock = redissonDistributedLocker.lock(<span class="string">&quot;UUUUU&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行休眠：&quot;</span>+time);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(time);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;休眠完成，准备释放锁：&quot;</span>+time);</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        redissonDistributedLocker.unLocke(rlock);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-结语"><a class="markdownIt-Anchor" href="#六-结语"></a> 六、结语</h2><p>总的来说，目前分布式锁领域暂时没有出现十分完美、无懈可击的方案，Redis 以其高性能著称，但使用其实现分布式锁来解决并发仍存在一些困难。Redis 分布式锁只能作为一种缓解并发的手段，如果要完全解决并发问题，仍需要数据库的防并发手段。</p><h2 id="七-扩展"><a class="markdownIt-Anchor" href="#七-扩展"></a> 七、扩展</h2><h3 id="71-分段锁"><a class="markdownIt-Anchor" href="#71-分段锁"></a> 7.1 分段锁</h3><p><strong>ConcurrentHashMap</strong>的源码和底层原理里面的核心思路，就是<strong>分段加锁</strong>！把数据分成很多个段，每个段是一个单独的锁，所以多个线程过来并发修改数据的时候，可以并发的修改不同段的数据。不至于说，同一时间只能有一个线程独占修改ConcurrentHashMap中的数据。</p><p>另外，Java 8中新增了一个LongAdder类，也是针对Java 7以前的AtomicLong进行的优化，解决的是CAS类操作在高并发场景下，使用乐观锁思路，会导致大量线程长时间重复循环。</p><p>LongAdder中也是采用了类似的分段CAS操作，失败则自动迁移到下一个分段进行CAS的思路。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210731231828" alt="img"></p><p>假如现在iphone有1000个库存，可以给拆成20个库存段，例如可以在数据库的表里建20个库存字段，比如stock_01，stock_02，也可以在redis之类的地方放20个库存key。</p><p>接着，每秒1000个请求！此时可以写一个简单的随机算法，每个请求都是随机在20个分段库存里，选择一个进行加锁。</p><p>同时可以有最多20个下单请求一起执行，每个下单请求锁了一个库存分段，然后在业务逻辑里面，就对数据库或者是Redis中的那个分段库存进行操作即可，包括查库存 -&gt; 判断库存是否充足 -&gt; 扣减库存。</p><p>相当于一个20毫秒，可以并发处理掉20个下单请求，那么1秒，也就可以依次处理掉20 * 50 = 1000个对iphone的下单请求了。</p><p>一旦对某个数据做了分段处理之后，<strong>要注意：就是如果某个下单请求，加锁后发现这个分段库存里的库存不足了，需要自动释放锁，然后立马换下一个分段库存，再次尝试加锁后尝试处理。这个过程一定要实现。</strong></p><p>不足肯定是有的，最大的不足，很不方便啊！实现太复杂了。</p><ul><li>首先，需要对一个数据分段存储，一个库存字段本来好好的，现在要分为20个分段库存字段；</li><li>其次，需要每次处理库存的时候，还得自己写随机算法，随机挑选一个分段来处理；</li><li>最后，如果某个分段中的数据不足了，需要自动切换到下一个分段数据去处理。</li></ul><p>这个过程都是要手动写代码实现的，还是有点工作量，挺麻烦的。</p><p>不过我们确实在一些业务场景里，因为用到了分布式锁，然后又必须要进行锁并发的优化，又进一步用到了分段加锁的技术方案，效果当然是很好的了，一下子并发性能可以增长几十倍。</p><h2 id="八-参考"><a class="markdownIt-Anchor" href="#八-参考"></a> 八、参考</h2><p><a href="https://juejin.cn/post/6844903719318847495">石杉的架构笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 事务</title>
      <link href="/2021/07/29/Mysql-%E4%BA%8B%E5%8A%A1/"/>
      <url>/2021/07/29/Mysql-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="一-事物"><a class="markdownIt-Anchor" href="#一-事物"></a> 一、事物</h1><h2 id="1-事务的属性acid"><a class="markdownIt-Anchor" href="#1-事务的属性acid"></a> 1  事务的属性(ACID)</h2><ul><li>原子性(Atomicity): 原子性是指事物是一个不可分割的单位,事务中的操作要么都发生,要么都不发生</li><li>一致性(Consistenc): 事务必须使数据库从一个一致性状态变换到另一个一致性状态</li><li>隔离性(Isolation) 事务的隔离性是指一个事务的执行不能被其他的事务干扰,即一个事务内部的操作及使用的数据库对并发的其他事务是隔离的,并发执行的各个事务之间不能互相干扰.</li><li>持久性(Durability) : 持久性是指一个事务一旦被提交,它对数据库中的数据的改变就是永久性的,接下来的其他操作和数据库故障不应噶对其有任何影响</li></ul><h2 id="2-事务隔离级别tx_isolation"><a class="markdownIt-Anchor" href="#2-事务隔离级别tx_isolation"></a> 2 事务隔离级别（tx_isolation）</h2><p>mysql 有四级事务隔离级别 每个级别都有字符或数字编号</p><table><thead><tr><th>级别</th><th>symbol</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>读未提交</td><td>READ-UNCOMMITTED</td><td>0</td><td>存在脏读、不可重复读、幻读的问题</td></tr><tr><td>读已提交</td><td>READ-COMMITTED</td><td>1</td><td>解决脏读的问题，存在不可重复读、幻读的问题</td></tr><tr><td>可重复读</td><td>REPEATABLE-READ</td><td>2</td><td>mysql 默认级别，解决脏读、不可重复读的问题，存在幻读的问题。使用 MMVC机制 实现可重复读</td></tr><tr><td>序列化</td><td>SERIALIZABLE</td><td>3</td><td>解决脏读、不可重复读、幻读，可保证事务安全，但完全串行执行，性能最低</td></tr></tbody></table><p>我们可以通过以下命令 <code>查看/设置</code> <code>全局/会话</code> 的事务隔离级别</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="variable">@@global</span>.tx_isolation, <span class="variable">@@tx_isolation</span>;</span><br><span class="line">+-----------------------+------------------+</span><br><span class="line"><span class="params">| @@global.tx_isolation |</span> <span class="variable">@@tx_isolation</span>   <span class="params">|</span></span><br><span class="line"><span class="params">+-----------------------+------------------+</span></span><br><span class="line"><span class="params">|</span> REPEATABLE-READ       <span class="params">| READ-UNCOMMITTED |</span></span><br><span class="line">+-----------------------+------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定全局的隔离级别 设定会话 global 替换为 session 即可</span></span><br><span class="line"><span class="comment"># SET [GLOABL] config_name = &#x27;foobar&#x27;;</span></span><br><span class="line"><span class="comment"># SET @@[session.|global.]config_name = &#x27;foobar&#x27;;</span></span><br><span class="line"><span class="comment"># SELECT @@[global.]config_name;</span></span><br><span class="line"></span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="number">0</span>;</span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="string">&#x27;READ-UNCOMMITTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="number">1</span>;</span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="string">&#x27;READ-COMMITTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="number">2</span>;</span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="string">&#x27;REPEATABLE-READ&#x27;</span>;</span><br><span class="line"></span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="number">3</span>;</span><br><span class="line">SET <span class="variable">@@gloabl</span>.tx_isolation = <span class="string">&#x27;SERIALIZABLE&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-什么是脏读-幻读-不可重复读"><a class="markdownIt-Anchor" href="#3-什么是脏读-幻读-不可重复读"></a> 3 什么是脏读、幻读、不可重复读</h2><h3 id="1-脏读drity-read"><a class="markdownIt-Anchor" href="#1-脏读drity-read"></a> 1 脏读（Drity Read）</h3><blockquote><p>某个事物已更新一份数据，另一个事物在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事物读取的数据就不会是正确的</p></blockquote><h3 id="2-不可重复度non-repeatable-read"><a class="markdownIt-Anchor" href="#2-不可重复度non-repeatable-read"></a> 2 不可重复度(Non-repeatable read)</h3><blockquote><p>在一个事物的两次查询中数据不一致，这可能是两次查询过程中插入一个事物的更新</p></blockquote><h3 id="3-幻读phantom-read"><a class="markdownIt-Anchor" href="#3-幻读phantom-read"></a> 3 幻读（Phantom Read）</h3><blockquote><p>在一个事物的两次查询中数据数量不一致，对于两个事务T1,T2,T1从一个表中读取了一个字段,然后T2再该表插入了一些新的行,之后,如果T1再次筛选同一个表,就会多出几行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Merge</title>
      <link href="/2021/07/29/Git-Merge-%E4%B8%8E%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/07/29/Git-Merge-%E4%B8%8E%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一-git-merge"><a class="markdownIt-Anchor" href="#一-git-merge"></a> 一、Git Merge</h1><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210729143535.png" alt="image-20210729143535128"></p><h2 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h2><ul><li><code>--commit</code>和<code>--no-commit</code></li></ul><blockquote><p><code>--commit</code>参数使得合并后产生一个合并结果的commit节点。该参数可以覆盖<code>--no-commit</code>。<br><code>--no-commit</code>参数使得合并后，为了防止合并失败并不自动提交，能够给使用者一个机会在提交前审视和修改合并结果。</p></blockquote><ul><li><code>--squash</code></li></ul><blockquote><p>根据字面意思，这个操作完成的是压缩的提交；解决的是什么问题呢，由于在dev分支上执行的是开发工作，有一些很小的提交，或者是纠正前面的错误的提交，对于这类提交对整个工程来说不需要单独显示出来一次提交，不然导致项目的提交历史过于复杂；所以基于这种原因，我们可以把dev上的所有提交都合并成一个提交；然后提交到主干。</p></blockquote><h3 id="使用条件"><a class="markdownIt-Anchor" href="#使用条件"></a> 使用条件:</h3><blockquote><p>判断是否使用<code>--squash</code>选项最根本的标准是，待合并分支上的历史是否有意义。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ入门</title>
      <link href="/2021/07/18/RabbitMQ/"/>
      <url>/2021/07/18/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="一-中间件"><a class="markdownIt-Anchor" href="#一-中间件"></a> 一、中间件</h1><h2 id="1-什么是中间件"><a class="markdownIt-Anchor" href="#1-什么是中间件"></a> 1. 什么是中间件</h2><blockquote><p>什么是中间件</p></blockquote><p>我国企业从20世纪80年代开始就逐渐进行信息化建设，由于方法和体系的不成熟，以及企业业务的市场需求的不断变化，一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。</p><p>中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件+平台+通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和使用软件区分开来</p><blockquote><p>为什么需要使用消息中间件</p></blockquote><p>具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。</p><blockquote><p>中间件特点</p></blockquote><p>为解决分布异构问题，人们提出了中间件（middleware)的概念。中间件时位于平台（硬件和操作系统）和应用之间的通用服务，如下图所示，这些服务具有标准的程序接口和协议。针对不同的操作系统和硬件平台，它们可以有符合接口的协议规范的多种实现。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184704.jpg" alt="中间件特点"></p><p>也很难给中间件一个严格的定义，但中间件应具有如下的一些特点：</p><p>（1）满足大量应用的需要</p><p>（2）运行于多种硬件和 OS平台</p><p>（3）支持分布计算，提供跨网络、硬件和 OS平台的透明性的应用或服务的交互</p><p>（4）支持标准的协议</p><p>（5）支持标准的接口</p><p>由于标准接口对于可移植性和标准协议对于互操作性的重要性，中间件已成为许多标准化工作的主要部分。对于应用软件开发，中间件远比操作系统和网络服务更为重要，中间件提供的程序接口定义了一个相对稳定的高层应用环境，不管底层的计算机硬件和系统软件怎样更新换代，只要将中间件升级更新，并保持中间件对外的接口定义不变，应用软件几乎不需任何修改，从而保护了企业在应用软件开发和维护中的重大投资。</p><p>简单说：中间件有个很大的特点，是脱离于具体设计目标，而具备提供普遍独立功能需求的模块。这使得中间件一定是可替换的。如果一个系统设计中，中间件时不可替代的，不是架构、框架设计有问题，那么就是这个中间件，在别处可能是个中间件，在这个系统内是引擎。</p><blockquote><p>在项目中什么时候使用中间件技术</p></blockquote><p>在项目的架构和重构中，使用任何技术和架构的改变我们都需要谨慎斟酌和思考，因为任何技术的融入和变化都可能人员，技术，和成本的增加，中间件的技术一般现在一些互联网公司或者项目中使用比较多，如果你仅仅还只是一个初创公司建议还是使用单体架构，最多加个缓存中间件即可，不要盲目追求新或者所谓的高性能，而追求的背后一定是业务的驱动和项目的驱动，因为一旦追求就意味着你的学习成本，公司的人员结构以及服务器成本，维护和运维的成本都会增加，所以需要谨慎选择和考虑。</p><p>但是作为一个开放人员，一定要有学习中间件技术的能力和思维，否则很容易当项目发展到一个阶段在去掌握估计或者在面试中提及，就会给自己带来不小的困扰，在当今这个时代这些技术也并不是什么新鲜的东西，如果去掌握和挖掘最关键的还是自己花时间和经历去探讨和研究。</p><h2 id="2-中间件技术及架构的概述"><a class="markdownIt-Anchor" href="#2-中间件技术及架构的概述"></a> 2. 中间件技术及架构的概述</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184710.png" alt></p><blockquote><p>学习中间件的方式和技巧</p></blockquote><ol><li>理解中间件在项目架构中的作用，以及各中间件的底层实现</li><li>可以使用一些类比的生活概念去理解中间件</li><li>使用一些流程图或者脑图的方式去梳理各个中间件在架构中的作用</li><li>尝试用 java技术去实现中间件的原理</li><li>静下来去思考中间件在项目中设计的和使用的原因</li><li>如果找到对应的代替总结方案</li><li>尝试编写博文总结类同中间件技术的对比和使用场景</li><li>学会查看中间件的源码以及开源项目和博文</li></ol><blockquote><p>什么是消息中间件</p></blockquote><p>在实际的项目中，大部分的企业项目开发中，在早起都采用的是单体的架构模式</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184715.jpg" alt></p><blockquote><p>单体架构</p></blockquote><p>在企业开发当中，大部分的初期架构都采用的是单体架构的模式进行架构，而这种架构的典型的特点：就是把所有的业务和模块，源代码，静态资源文件等都放在一个工程中，如果其中的一个模块升级或者迭代发生一个很小的变动都会重新编译和重新部署项目。这种这狗存在的问题是：</p><ol><li>耦合度太高</li><li>不易维护</li><li>服务器的成本高</li><li>以及升级架构的复杂度也会增大</li></ol><p>这样就有后续的分布式架构系统。如下</p><blockquote><p>分布式架构</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184724.jpg" alt></p><p><strong>何谓分布式系统：</strong></p><blockquote><p>通俗一点：就是一个请求由服务器端的多个服务（服务或者系统）协同处理完成</p></blockquote><p>和单体架构不同的是，单体架构是一个请求发起 jvm调度线程（确切的是 tomcat线程池）分配线程 Thread来处理请求直到释放，而分布式系统是：一个请求时由多个系统共同来协同完成，jvm和环境都可能是独立。如果生活中的比喻的话，单体架构就像建设一个小房子很快就能够搞定，如果你要建设一个鸟巢或者大型的建筑，你就必须是各个环节的协同和分布，这样目的也是项目发展到后期的时候要去部署和思考的问题。我们也不难看出来：分布式架构系统存在的特点和问题如下：</p><p><strong>存在问题：</strong></p><ol><li>学习成本高，技术栈过多</li><li>运维成本和服务器成本增高</li><li>人员的成本也会增高</li><li>项目的负载度也会上升</li><li>面临的错误和容错性也会成倍增加</li><li>占用的服务器端口和通讯的选择的成本高</li><li>安全性的考虑和因素逼迫可能选择 RMI/MQ相关的服务器端通讯</li></ol><p><strong>好处：</strong></p><ol><li>服务系统的独立，占用的服务器资源减少和占用的硬件成本减少，确切的说是：可以合理的分配服务资</li><li>源，不造成服务器资源的浪费</li><li>系统的独立维护和部署，耦合度降低，可插拔性</li><li>系统的架构和技术栈的选择可以变的灵活（而不是单纯地选择 java）</li><li>弹性的部署，不会造成平台因部署造成的瘫痪和停服的状态</li></ol><h2 id="3-基于消息中间件的分布式系统的架构"><a class="markdownIt-Anchor" href="#3-基于消息中间件的分布式系统的架构"></a> 3. 基于消息中间件的分布式系统的架构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184731.jpg" alt></p><p>从上图中可以看出来，消息中间件的是</p><ol><li>利用可靠的消息传递机制进行系统和系统直接的通讯</li><li>通过提供消息传递和消息的派对机制，它可以在分布式系统环境下扩展进程间的通讯</li></ol><blockquote><p>消息中间件应用的场景</p></blockquote><ol><li>跨系统数据传递</li><li>高并发的流量削峰</li><li>数据的并发和异步处理</li><li>大数据分析与传递</li><li>分布式事务比如你有一个数据要进行迁移或者请求并发过多的时候，</li></ol><p>比如你有10 W的并发请求下订单，我们可以在这些订单入库之前，我们可以把订单请求堆积到消息队列中，让它稳健可靠的入库和执行</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184735.jpg" alt></p><blockquote><p>常见的消息中间件</p></blockquote><p>ActiveMQ、RabbitMQ、Kafka、RocketMQ等</p><blockquote><p>消息中间件的本质及设计</p></blockquote><p>它是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务</p><p>MQ消息队列：负责数据的传接受，存储和传递，所以性能要高于普通服务和技术<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184742.jpg" alt></p><p>谁来生产消息，存储消息和消费消息呢？<img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184749.jpg" alt></p><blockquote><p>消息中间件的核心组成部分</p></blockquote><p>消息的协议<br>消息的持久化机制<br>消息的分发策略<br>消息的高可用，高可靠<br>消息的容错机制</p><blockquote><p>小结</p></blockquote><p>其实不论选择单体架构还是分布式架构都是项目开发的一个阶段，在什么阶段选择合适的架构方式，而不能盲目追求，最后造成的后果和问题都需要自己买单。但作为一个开发人员学习和探讨新的技术使我们每个程序开发者都应该去保持和思考的问题。当我们没办法去改变社会和世界的时候，我们为了生活和生存那就必须要迎合企业和市场的需求，发挥你的价值和所学的才能，创造价值和实现自我</p><h2 id="4-消息队列协议"><a class="markdownIt-Anchor" href="#4-消息队列协议"></a> 4. 消息队列协议</h2><blockquote><p>什么是协议</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184756.jpg" alt></p><p>所谓协议是指：</p><ol><li>计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流</li><li>和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较的高</li><li>协议对数据格式和计算机之间交换数据都必须严格遵守规范</li></ol><blockquote><p>网络协议的三要素</p></blockquote><ol><li>语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序</li><li>语义：语义是解释控制信息每个部分的意义，它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应</li><li>时序：时序是对事件发生顺序的详细说明</li></ol><p>比如我 MQ发送一个信息，是以什么数据格式发送到队列中，然后每个部分的含义是什么，发送完毕以后的执行的动作，以及消费者消费消息的动作，消费完毕的相应结构和反馈是什么，然后按照对应的执行顺序进行处理。如果你还是不理解：大家每天都在接触的 http请求协议：</p><ol><li>语法：http规定了请求报文和响应报文的格式</li><li>语义：客户端主动发起请求称之为请求（这是一种定义，同时你发起的是 post/get请求）</li><li>时序：一个请求对应一个响应（一定先有请求在有响应，这个是时序）</li></ol><p>而消息中间件采用的并不是 http协议，而常见的消息中间件协议有有：OpenWire、AMQP、MQTT、Kafka，OpenMessage协议</p><p><strong>面试题：为什么消息中间件不直接使用 http协议</strong></p><ol><li>因为 http请求报文头和响应报文头是比较复杂的，包含了Cookie，数据的加密解密，窗台吗，响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速</li><li>大部分情况下 http大部分都是短链接，在实际的交互过程中，一个请求到响应都很有可能会中断，中断以后就不会执行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取信息的过程，出现问题和故障要对数据或消息执行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行</li></ol><blockquote><p>AMQP协议</p></blockquote><p>AMQP：（全称：Advanced Message Queuing Protocol）是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。Erlang中的实现由 RabbitMQ等</p><p>特性：</p><ol><li>分布式事务支持</li><li>消息的持久化支持</li><li>高性能和高可靠的消息处理优势</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184802.jpg" alt></p><blockquote><p>MQTT协议</p></blockquote><p>MQTT协议（Message Queueing Telemetry Transport）消息队列是 IBM开放的及时通讯协议，物联网系统架构中的重要组成部分</p><p>特点：</p><ol><li>轻量</li><li>结构简单</li><li>传输快，不支持事务</li><li>没有持久化设计</li></ol><p>应用场景：</p><ol><li>适用于计算能力有限</li><li>低带宽</li><li>网络不稳定的场景</li></ol><p>支持者：<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184808.jpg" alt></p><blockquote><p>OpenMessage协议</p></blockquote><p>是近几年由阿里、雅虎和滴滴出行、Stremalio等公司共同参与创立的分布式信息中间件、流处理等领域的应用开发标准</p><p>特点：</p><ol><li>结构简单</li><li>解析速度快</li><li>支持事务和持久化设计</li></ol><blockquote><p>Kafka协议</p></blockquote><p>Kafka协议是基于 TCP/IP的二进制协议。消息内部是 通过长度来分割，由一些基本数据类型组成</p><p>特点：</p><ol><li>结构简单</li><li>解析速度快</li><li>无事务支持</li><li>有持久化设计</li></ol><blockquote><p>小结</p></blockquote><p>协议：实在 tcp/ip协议基础之上构建的一种约定俗称的规范和机制、它的主要目的可以让客户端（应用程序 java，go）进行沟通和通讯。并且这种写一下规范必须具有持久性，高可用，高可靠的性能</p><h2 id="5-消息队列持久化"><a class="markdownIt-Anchor" href="#5-消息队列持久化"></a> 5. 消息队列持久化</h2><blockquote><p>持久化</p></blockquote><p>简单来说就是将数据存入磁盘，而不是存在内存中随服务器重启断开而消失，使数据能够永久保存</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184815.jpg" alt></p><blockquote><p>常见的持久化方式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184819.jpg" alt></p><h2 id="6-消息的分发策略"><a class="markdownIt-Anchor" href="#6-消息的分发策略"></a> 6. 消息的分发策略</h2><blockquote><p>消息的分发策略</p></blockquote><p>MQ消息 队列有如下几个角色</p><ol><li>生产者</li><li>存储消息</li><li>消费者</li></ol><p>那么生产者生成消息以后，MQ进行存储，消费者是如何获取消息的呢？一般获取数据的方式无外乎推（push）或者拉（pull）两种方式，典型的 git就有推拉机制，我们发送的 http请求就是一种典型的拉取数据库数据返回的过程。而消息队列 MQ是一种推送的过程，而这些推机制会使用到很多的业务场景也有很多对应推机制策略</p><blockquote><p>场景分析一</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184823.jpg" alt></p><p>比如我在 APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被哪个系统或者哪些服务器或者系统进行消费，那这个时候就需要一个分发的策略。这就需要消费策略。或者称之为消费的方法论</p><blockquote><p>场景分析二</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184828.jpg" alt></p><p>在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费 MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发<br>消息分发策略的机制和对比</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184831.jpg" alt></p><h2 id="7-消息队列高可用和高可靠"><a class="markdownIt-Anchor" href="#7-消息队列高可用和高可靠"></a> 7. 消息队列高可用和高可靠</h2><blockquote><p>什么是高可用机制</p></blockquote><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力</p><p>当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU，内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的</p><blockquote><p>集群模式1 - Master-slave主从共享数据的部署方式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184834.jpg" alt></p><blockquote><p>集群模式2 - Master-slave主从同步部署方式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184840.jpg" alt></p><p>解释：这种模式写入消息同样在 Master主节点上，但是主节点会同步数据到 slave节点形成副本，和 zookeeper或者 redis主从机制很雷同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点进行消费，以为消息的拷贝和同步会占用很大的带宽和网络资源。在后去的 rabbitmq中会有使用</p><blockquote><p>集群模式3 - 多主集群同步部署模式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184845.jpg" alt></p><p>解释：和上面的区别不是特别的大，但是它的写入可以往任意节点去写入</p><blockquote><p>集群模式4 - 多主集群转发部署模式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184850.jpg" alt></p><p>解释：如果你插入的数据是 broker-1中国，元数据信息会存储数据的相关描述和记录存放的位置（队列）。它会对描述信息也就是元数据信息进行同步，如果消费者在 broker-2中进行消费，发现自己节点没有对应的信息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他回去联系其他的黄牛询问，如果有就返回</p><blockquote><p>集群模式5 Master-slave与 Broker-cluster组合的方案</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184857.jpg" alt></p><p>解释：实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高</p><blockquote><p>什么是高可靠机制</p></blockquote><p>所谓高可靠是指：系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠</p><p>在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的</p><p>如何保证中间件消息的可靠性呢，可以从两个方面考虑：</p><ol><li>消息的传输：通过协议来保证系统间数据解析的正确性</li><li>消息的存储区可靠：通过持久化来保证消息的可靠性</li></ol><h1 id="二-入门及安装"><a class="markdownIt-Anchor" href="#二-入门及安装"></a> 二、入门及安装</h1><h2 id="1-rabbitmq入门及安装"><a class="markdownIt-Anchor" href="#1-rabbitmq入门及安装"></a> 1. RabbitMQ入门及安装</h2><p><a href="https://www.bilibili.com/video/BV1dX4y1V73G?p=27">https://www.bilibili.com/video/BV1dX4y1V73G?p=27</a></p><h3 id="01-概述"><a class="markdownIt-Anchor" href="#01-概述"></a> 01 概述</h3><p>简单概述：</p><p>RabbitMQ是一个开源的遵循 AMQP协议实现的基于 Erlang语言编写，支持多种客户端（语言），用于在分布式系统中存储消息，转发消息，具有高可用，高可扩性，易用性等特征</p><h3 id="02下载rabbitmq"><a class="markdownIt-Anchor" href="#02下载rabbitmq"></a> 02下载RabbitMQ</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211705.jpg" alt></p><ol><li>下载地址：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></li><li>环境准备：CentOS7.x + /Erlang</li></ol><p>RabbitMQ是采用 Erlang语言开发的，所以系统环境必须提供 Erlang环境，第一步就是安装 Erlang</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184915.jpg" alt></p><h3 id="03-安装erlang"><a class="markdownIt-Anchor" href="#03-安装erlang"></a> 03 安装Erlang</h3><blockquote><p>查看系统版本号</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184922.jpg" alt></p><blockquote><p>安装下载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/rabbitmq</span><br><span class="line">ca /usr//rabbitmq</span><br><span class="line"># 将安装包上传到linux系统中</span><br><span class="line">erlang-22.0.7-1.el7.x86_64.rpm</span><br><span class="line">rabbitmq-server-3.7.18-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">rpm -Uvh erlang-solutions-2.0-1.noarch.rpm</span><br><span class="line">yum install -y erlang</span><br><span class="line">erl -v</span><br></pre></td></tr></table></figure><h3 id="04-安装socat"><a class="markdownIt-Anchor" href="#04-安装socat"></a> 04 安装socat</h3><blockquote><p>安装下载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y socat</span><br></pre></td></tr></table></figure><h3 id="05-安装rabbitmq"><a class="markdownIt-Anchor" href="#05-安装rabbitmq"></a> 05 安装rabbitmq</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184926.jpg" alt></p><blockquote><p>安装下载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh rabbitmq-server-3.7.18-1.el7.noarch.rpm</span><br><span class="line">yum install rabbitmq-server -y</span><br></pre></td></tr></table></figure><blockquote><p>启动服务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">systemctl start rabbitmq-server</span><br><span class="line"># 查看服务状态，如图</span><br><span class="line">systemctl status rabbitmq-server.service</span><br><span class="line"># 开机自启动</span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"># 停止服务</span><br><span class="line">systemctl stop rabbitmq-server</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184932.jpg" alt></p><h2 id="2-rabbitmqweb管理界面及授权操作"><a class="markdownIt-Anchor" href="#2-rabbitmqweb管理界面及授权操作"></a> 2. RabbitMQWeb管理界面及授权操作</h2><h3 id="01-rabbitmq管理界面"><a class="markdownIt-Anchor" href="#01-rabbitmq管理界面"></a> 01 RabbitMQ管理界面</h3><blockquote><p>默认情况下，是没有安装web端的客户端插件，需要安装才可以生效</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>说明：rabbitmq有一个默认账号和密码是：<code>guest</code>默认情况只能在 localhost本计下访问，所以需要添加一个远程登录的用户</p><blockquote><p>安装完毕以后，重启服务即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><p>一定要记住，在对应服务器（阿里云，腾讯云等）的安全组中开放<code>15672</code>端口</p><blockquote><p>在浏览器访问</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184940.jpg" alt></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 10.关闭防火墙服务</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">systemctl stop firewalld   </span><br><span class="line"># 11.访问web管理界面</span><br><span class="line">http://10.15.0.8:15672/</span><br></pre></td></tr></table></figure><h3 id="02-授权账号和密码"><a class="markdownIt-Anchor" href="#02-授权账号和密码"></a> 02 授权账号和密码</h3><blockquote><p>新增用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br></pre></td></tr></table></figure><blockquote><p>设置用户分配操作权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>用户级别：</p><ol><li>administrator：可以登录控制台、查看所有信息、可以对 rabbitmq进行管理</li><li>monitoring：监控者 登录控制台，查看所有信息</li><li>policymaker：策略制定者 登录控制台，指定策略</li><li>managment 普通管理员 登录控制台</li></ol><blockquote><p>为用户添加资源权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>网页登录成功</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184944.jpg" alt></p><h3 id="03小结"><a class="markdownIt-Anchor" href="#03小结"></a> 03小结：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184949.jpg" alt></p><h2 id="3-rabbitmq之docker安装"><a class="markdownIt-Anchor" href="#3-rabbitmq之docker安装"></a> 3. RabbitMQ之Docker安装</h2><h3 id="01-dokcer安装rabbitmq"><a class="markdownIt-Anchor" href="#01-dokcer安装rabbitmq"></a> 01 Dokcer安装RabbitMQ</h3><blockquote><p>虚拟化容器技术 - Docker的安装</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718184956.jpg" alt></p><blockquote><p>docker的相关命令</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185004.jpg" alt></p><blockquote><p>安装rabbitmq</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185012.jpg" alt></p><p><code>可以直接走图中代码，不用走下面两项！</code></p><blockquote><p>获取rabbit镜像</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><blockquote><p>创建并运行容器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=myrabbit -p <span class="number">15672</span>:<span class="number">15672</span> rabbitmq:management</span><br><span class="line">--hostname：指定容器主机名称</span><br><span class="line">--name:指定容器名称</span><br><span class="line">-p：将mq端口号映射到本地</span><br><span class="line">或者运行时设置用户和密码</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185405.jpg" alt></p><blockquote><p>启动</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185021.jpg" alt></p><p>访问网页，访问成功！</p><h2 id="4-rabbitmq的角色分类"><a class="markdownIt-Anchor" href="#4-rabbitmq的角色分类"></a> 4. RabbitMQ的角色分类</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185134.jpg" alt></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185139.jpg" alt></p><h1 id="三-入门案例"><a class="markdownIt-Anchor" href="#三-入门案例"></a> 三、入门案例</h1><h2 id="1-rabbitmq入门案例-simple-简单模式"><a class="markdownIt-Anchor" href="#1-rabbitmq入门案例-simple-简单模式"></a> 1. RabbitMQ入门案例 - Simple 简单模式</h2><p><a href="https://www.bilibili.com/video/BV1dX4y1V73G?p=44">https://www.bilibili.com/video/BV1dX4y1V73G?p=44</a> 实现步骤</p><ol><li>jdk1.8</li><li>构建一个 maven工程</li><li>导入 rabbitmq的 maven依赖</li><li>启动 rabbitmq-server服务</li><li>定义生产者</li><li>定义消费者</li><li>观察消息的在 rabbitmq-server服务中的进程</li></ol><h3 id="01-构建一个maven工程"><a class="markdownIt-Anchor" href="#01-构建一个maven工程"></a> 01 构建一个maven工程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185144.jpg" alt></p><h3 id="02-导入依赖"><a class="markdownIt-Anchor" href="#02-导入依赖"></a> 02 导入依赖</h3><blockquote><p>java原生依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="03-第一种模型"><a class="markdownIt-Anchor" href="#03-第一种模型"></a> 03 第一种模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718185151.jpg" alt></p><p>在上图的模型中，有以下概念：</p><ol><li>生产者，也就是要发送消息的程序</li><li>消费者：消息的接受者，会一直等待消息到来。</li><li>消息队列：图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ol><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    connectionFactory.setHost(<span class="string">&quot;10.15.0.9&quot;</span>);</span><br><span class="line">    connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">    connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    Connection connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建通道</span></span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">//3.通过创建交换机，声明队列，绑定关系，路由key，发送消息和接受消息</span></span><br><span class="line">    <span class="comment">/*参数1: 是否持久化，非持久化消息会存盘吗？会存盘，但是会随着重启服务器而丢失</span></span><br><span class="line"><span class="comment">      参数2:是否独占队列 </span></span><br><span class="line"><span class="comment">      参数3:是否自动删除，随着最后一个消费者消息完毕消息以后是否把队列自动删除</span></span><br><span class="line"><span class="comment">    参数4:携带附属属性</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String queueName = <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queueName,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//4.发送消息给队列queue</span></span><br><span class="line">    <span class="comment">/*参数1: 交换机</span></span><br><span class="line"><span class="comment">      参数2:队列、路由key</span></span><br><span class="line"><span class="comment">      参数3:消息的状态控制</span></span><br><span class="line"><span class="comment">    参数4:消息主题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//面试题：可以存在没有交换机的队列吗？不可能，虽然没有指定交换机但是一定会存在一个默认的交换机</span></span><br><span class="line">    String message = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>,message, <span class="keyword">null</span>,message.getBytes());</span><br><span class="line">    <span class="comment">//5.关闭</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 所有的中间件都是基于tcp/ip 协议基础上构建新型协议，mq遵循amqp</span></span><br><span class="line">        <span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.173.10&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 通过连接获取通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        String queueName = <span class="string">&quot;q1&quot;</span>;</span><br><span class="line"><span class="comment">//3.接受内容</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, (s, delivery) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(<span class="string">&quot;收到消息是&quot;</span>+<span class="keyword">new</span> String(delivery.getBody())));</span><br><span class="line">        &#125;, s -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接受失败了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-什么是amqp"><a class="markdownIt-Anchor" href="#2-什么是amqp"></a> 2. 什么是AMQP</h2><h3 id="01-什么是amqp"><a class="markdownIt-Anchor" href="#01-什么是amqp"></a> 01 什么是AMQP</h3><p>AMQP全称：Advanced Message Queuing Protocol（高级消息队列协议）。是应用层协议的一个开发标准，为面向消息的中间件设计</p><h3 id="02-amqp生产者流转过程"><a class="markdownIt-Anchor" href="#02-amqp生产者流转过程"></a> 02 AMQP生产者流转过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718191834.jpg" alt></p><h3 id="03-amqp消费者流转过程"><a class="markdownIt-Anchor" href="#03-amqp消费者流转过程"></a> 03 AMQP消费者流转过程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192154.jpg" alt></p><h2 id="3-rabbitmq的核心组成部分"><a class="markdownIt-Anchor" href="#3-rabbitmq的核心组成部分"></a> 3. RabbitMQ的核心组成部分</h2><h3 id="01-rabbitmq的核心组成部分"><a class="markdownIt-Anchor" href="#01-rabbitmq的核心组成部分"></a> 01 RabbitMQ的核心组成部分</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192201.jpg" alt></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192207.jpg" alt></p><h3 id="02-rabbitmq整体架构是什么样子的"><a class="markdownIt-Anchor" href="#02-rabbitmq整体架构是什么样子的"></a> 02 RabbitMQ整体架构是什么样子的？</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192239.jpg" alt="         "></p><h3 id="03-rabbitmq的运行流程"><a class="markdownIt-Anchor" href="#03-rabbitmq的运行流程"></a> 03 RabbitMQ的运行流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192245.jpg" alt></p><h3 id="04-rabbitmq支持的消息模型"><a class="markdownIt-Anchor" href="#04-rabbitmq支持的消息模型"></a> 04 RabbitMQ支持的消息模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192256.jpg" alt></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192258.jpg" alt></p><ol><li>简单模式 Simple</li><li>工作模式 Work</li><li>发布订阅模式</li><li>路由模式</li><li>主题 Topic模式</li><li>参数模式</li></ol><h2 id="4-rabbitmq入门案例-fanout-模式"><a class="markdownIt-Anchor" href="#4-rabbitmq入门案例-fanout-模式"></a> 4. RabbitMQ入门案例 - fanout 模式</h2><h3 id="01-rabbitmq的模式之发布订阅模式"><a class="markdownIt-Anchor" href="#01-rabbitmq的模式之发布订阅模式"></a> 01 RabbitMQ的模式之发布订阅模式</h3><blockquote><p>图解</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718192309.jpg" alt></p><p><strong>发布订阅模式的具体实现</strong></p><ol><li>web操作查看视频</li><li>类型：fanout</li><li>特点：Fanout - 发布与订阅模式，是一种广播机制，它是没有路由 key的模式</li></ol><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.创建连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    connectionFactory.setHost(<span class="string">&quot;10.15.0.9&quot;</span>);</span><br><span class="line">    connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">    connectionFactory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    connectionFactory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    Connection connection = connectionFactory.newConnection(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建通道</span></span><br><span class="line">    Channel channel = connection.createChannel();</span><br><span class="line">    <span class="comment">//3.通过创建交换机，声明队列，绑定关系，路由key，发送消息和接受消息</span></span><br><span class="line">    <span class="comment">/*参数1: 是否持久化，非持久化消息会存盘吗？会存盘，但是会随着重启服务器而丢失</span></span><br><span class="line"><span class="comment">      参数2:是否独占队列 </span></span><br><span class="line"><span class="comment">      参数3:是否自动删除，随着最后一个消费者消息完毕消息以后是否把队列自动删除</span></span><br><span class="line"><span class="comment">    参数4:携带附属属性</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String queueName = <span class="string">&quot;queue1&quot;</span>;</span><br><span class="line">    channel.queueDeclare(queueName,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//4.发送消息给队列queue</span></span><br><span class="line">    <span class="comment">/*参数1: 交换机</span></span><br><span class="line"><span class="comment">      参数2:队列、路由key</span></span><br><span class="line"><span class="comment">      参数3:消息的状态控制</span></span><br><span class="line"><span class="comment">    参数4:消息主题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//面试题：可以存在没有交换机的队列吗？不可能，虽然没有指定交换机但是一定会存在一个默认的交换机</span></span><br><span class="line">    String message = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="comment">//5.准备交换机</span></span><br><span class="line">    String exchangeName = <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//6.定义路由key</span></span><br><span class="line">    String routeKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//7.指定交换机的类型</span></span><br><span class="line">    String type = <span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">    channel.basicPublish(exchangeName,routeKey, <span class="keyword">null</span>,message.getBytes());</span><br><span class="line">    <span class="comment">//8.关闭</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><p>代码一样，使用线程启动测试而已！</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211104.jpg" alt></p><p>此处没有通过代码去绑定交换机和队列，而是通过可视化界面去绑定的！</p><h2 id="5-rabbitmq入门案例-direct-模式"><a class="markdownIt-Anchor" href="#5-rabbitmq入门案例-direct-模式"></a> 5. RabbitMQ入门案例 - Direct 模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.定义路由key</span></span><br><span class="line">String routeKey = <span class="string">&quot;email&quot;</span>;</span><br><span class="line"><span class="comment">//7.指定交换机的类型</span></span><br><span class="line">String type = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">channel.basicPublish(exchangeName,routeKey, <span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-rabbitmq入门案例-topic-模式"><a class="markdownIt-Anchor" href="#6-rabbitmq入门案例-topic-模式"></a> 6. RabbitMQ入门案例 - Topic 模式</h2><blockquote><p><code>#</code>代表0,1,n级</p><p><code>*</code> 代表必须要有1 级</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211118.jpg" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.定义路由key</span></span><br><span class="line">String routeKey = <span class="string">&quot;com.order.test.xxx&quot;</span>;</span><br><span class="line"><span class="comment">//7.指定交换机的类型</span></span><br><span class="line">String type = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">channel.basicPublish(exchangeName,routeKey, <span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>代码创建及绑定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.准备交换机</span></span><br><span class="line">String exchangeName = <span class="string">&quot;direct_message_exchange&quot;</span>;</span><br><span class="line">String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line"><span class="comment">//如果你用界面把queue和exchange的关系先绑定话，代码就不需要在编写这些声明代码可以让代码变得更简洁</span></span><br><span class="line"><span class="comment">//如果用代码的方式去声明，我们要学习一下</span></span><br><span class="line"><span class="comment">//6.声明交换机 所谓的持久化就是指，交换机会不会随着服务器重启造成丢失</span></span><br><span class="line">channel.exchangeDeclare(exchangeName,exchangeType,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.声明队列</span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;queue5&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;queue6&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;queue7&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.绑定队列和交换机的关系</span></span><br><span class="line">channel.queueBind(<span class="string">&quot;queue5&quot;</span>,exchangeName,<span class="string">&quot;order&quot;</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;queue6&quot;</span>,exchangeName,<span class="string">&quot;order&quot;</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;queue7&quot;</span>,exchangeName,<span class="string">&quot;course&quot;</span>);</span><br><span class="line"></span><br><span class="line">channel.basicPublish(exchangeName,course, <span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-rabbitmq入门案例-work模式"><a class="markdownIt-Anchor" href="#7-rabbitmq入门案例-work模式"></a> 7. RabbitMQ入门案例 - Work模式</h2><h3 id="01-work模式轮询模式round-robin"><a class="markdownIt-Anchor" href="#01-work模式轮询模式round-robin"></a> 01 Work模式轮询模式（Round-Robin）</h3><blockquote><p>图解</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211123.jpg" alt></p><p>当有多个消费者时，我们的消息会被哪个消费者消费呢，我们又该如何均衡消费者消费信息的多少呢？</p><p>主要有两种模式：</p><ol><li>轮询模式的分发：一个消费者一条，按均分配</li><li>公平分发：根据消费者的消费能力进行公平分发，处理快的处理的多，处理慢的处理的少；按劳分配</li></ol><blockquote><p>生产者</p></blockquote><p>跟简单模式一样！</p><blockquote><p>消费者</p></blockquote><p>创建两个一样的！</p><h3 id="02-work模式公平分发模式"><a class="markdownIt-Anchor" href="#02-work模式公平分发模式"></a> 02 Work模式公平分发模式</h3><blockquote><p>生产者</p></blockquote><p>跟简单模式一样！</p><blockquote><p>消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span></span>&#123;</span><br><span class="line"><span class="comment">//3.接受内容</span></span><br><span class="line">    <span class="comment">//指标定义出来</span></span><br><span class="line">    channel.basicQos(<span class="number">1</span>);</span><br><span class="line">    channel.basicConsume(<span class="string">&quot;queue1&quot;</span>,<span class="keyword">false</span>,<span class="keyword">new</span> DefaultConsumer()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag, Delivery message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">          System.out.println(<span class="keyword">new</span> String(<span class="string">&quot;收到消息是&quot;</span> + <span class="keyword">new</span> String(meassage.getBody()),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">          <span class="comment">//改成手动应答</span></span><br><span class="line">          channel.basicAck(delivery.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">        &#125;,<span class="keyword">new</span> CancelCallback()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String consumerTag)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接受失败了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">//4.关闭</span></span><br><span class="line">    channel.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建两个一样的！</p><h2 id="8-rabbitmq使用场景"><a class="markdownIt-Anchor" href="#8-rabbitmq使用场景"></a> 8. RabbitMQ使用场景</h2><h3 id="01-解耦-削峰-异步"><a class="markdownIt-Anchor" href="#01-解耦-削峰-异步"></a> 01 解耦、削峰、异步</h3><blockquote><p>同步异步的问题（串行）</p></blockquote><p>串行方式：将订单信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211131.jpg" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.发送订单</span></span><br><span class="line">    <span class="comment">//2.发送短信服务</span></span><br><span class="line">    <span class="comment">//3.发送email服务</span></span><br><span class="line">    <span class="comment">//4.发送app服务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>并行方式 异步线程池</p></blockquote><p>并行方式：将订单信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211134.jpg" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line">    theadpool.submit(<span class="keyword">new</span> Callable&lt;Object&gt;&#123;</span><br><span class="line">        <span class="comment">//1.发送短信服务</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line">    theadpool.submit(<span class="keyword">new</span> Callable&lt;Object&gt;&#123;</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line">    theadpool.submit(<span class="keyword">new</span> Callable&lt;Object&gt;&#123;</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line">    theadpool.submit(<span class="keyword">new</span> Callable&lt;Object&gt;&#123;</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在问题</p><ol><li>耦合度高</li><li>需要自己写线程池自己维护成本太高</li><li>出现了消息可能会丢失，需要你自己做消息补偿</li><li>如何保证消息的可靠性你自己写</li><li>如果服务器承载不了，你需要自己去写高可用</li></ol><blockquote><p>异步消息队列的方式</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211143.jpg" alt></p><p>好处：</p><ol><li>完全解耦，用 MQ建立桥接</li><li>有独立的线程池和运行模型</li><li>出现了消息可能会丢失，MQ有持久化功能</li><li>如何保证消息的可靠性，死信队列和消息转移等</li><li>如果服务器承载不了，你需要自己去写高可用，HA镜像模型高可用</li></ol><p>按照以上约定，用户的响应时间相当于是订单信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍</p><h3 id="02-高内聚低耦合"><a class="markdownIt-Anchor" href="#02-高内聚低耦合"></a> 02 高内聚，低耦合</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211208.jpg" alt></p><p>好处：</p><ol><li>完全解耦，用 MQ建立桥接</li><li>有独立的线程池和运行模型</li><li>出现了消息可能会丢失，MQ有持久化功能</li><li>如何保证消息的可靠性，死信队列和消息转移等</li><li>如果服务器承载不了，你需要自己去写高可用，HA镜像模型高可用</li></ol><p>按照以上约定，用户的响应时间相当于是订单信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍</p><h1 id="四-springboot案例"><a class="markdownIt-Anchor" href="#四-springboot案例"></a> 四、Springboot案例</h1><h2 id="1-fanout-模式"><a class="markdownIt-Anchor" href="#1-fanout-模式"></a> 1. Fanout 模式</h2><p><a href="https://www.bilibili.com/video/BV1dX4y1V73G?p=44">https://www.bilibili.com/video/BV1dX4y1V73G?p=44</a></p><blockquote><p>生产者</p></blockquote><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 配置rabbitmq服务</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OrderService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">//模拟用户下单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid,String productid,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.根据商品id查询库存是否足够</span></span><br><span class="line">        <span class="comment">//2.保存订单</span></span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        sout(<span class="string">&quot;订单生产成功：&quot;</span>+orderId);</span><br><span class="line">        <span class="comment">//3.通过MQ来完成消息的分发</span></span><br><span class="line">        <span class="comment">//参数1：交换机 参数2：路由key/queue队列名称 参数3：消息内容</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;fanout_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 配置rabbitmq服务</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>RabbitMqConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明注册fanout模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanout_order_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.fanout.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.fanout.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.fanout.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.完成绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>   BindingBuilder.bind(smsQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(duanxinQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>FanoutSmsConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queue = &#123;&quot;sms.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutSmsConsumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviceMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sms接收到了的订单信息是：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>FanoutDuanxinConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queue = &#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutDuanxinConsumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviceMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;duanxin接收到了的订单信息是：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>FanoutEmailConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queue = &#123;&quot;duanxin.direct.queue&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutEmailConsumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviceMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;email接收到了的订单信息是：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-direct-模式"><a class="markdownIt-Anchor" href="#2-direct-模式"></a> 2. Direct 模式</h2><blockquote><p>生产者</p></blockquote><p><strong>OrderService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">//模拟用户下单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid,String productid,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.根据商品id查询库存是否足够</span></span><br><span class="line">        <span class="comment">//2.保存订单</span></span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        sout(<span class="string">&quot;订单生产成功：&quot;</span>+orderId);</span><br><span class="line">        <span class="comment">//3.通过MQ来完成消息的分发</span></span><br><span class="line">        <span class="comment">//参数1：交换机 参数2：路由key/queue队列名称 参数3：消息内容</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;email&quot;</span>,orderId);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;duanxin&quot;</span>,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>消费者</p></blockquote><p><strong>RabbitMqConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明注册fanout模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;direct_order_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;sms.direct.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">duanxinQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;duanxin.direct.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;email.direct.queue&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.完成绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bin(smsQueue()).to(fanoutExchange()).with(<span class="string">&quot;sms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">duanxinBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bin(duanxinQueue()).to(fanoutExchange()).with(<span class="string">&quot;duanxin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bin(emailQueue()).to(fanoutExchange()).with(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-topic-模式"><a class="markdownIt-Anchor" href="#3-topic-模式"></a> 3. Topic 模式</h2><blockquote><p>生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">//模拟用户下单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid,String productid,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.根据商品id查询库存是否足够</span></span><br><span class="line">        <span class="comment">//2.保存订单</span></span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        sout(<span class="string">&quot;订单生产成功：&quot;</span>+orderId);</span><br><span class="line">        <span class="comment">//3.通过MQ来完成消息的分发</span></span><br><span class="line">        <span class="comment">//参数1：交换机 参数2：路由key/queue队列名称 参数3：消息内容</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;direct_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;com.duanxin&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>消费者（采用注解）</p></blockquote><p><strong>FanoutSmsConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">value = @Queue(value = &quot;sms.topic.queue&quot;,durable = &quot;true&quot;,antoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = &quot;ExchangeTypes.TOPIC&quot;)</span></span><br><span class="line"><span class="meta">    key = &quot;#.sms.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicSmsConsumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviceMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;sms接收到了的订单信息是：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>FanoutDuanxinConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">value = @Queue(value = &quot;duanxin.topic.queue&quot;,durable = &quot;true&quot;,antoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = &quot;ExchangeTypes.TOPIC&quot;)</span></span><br><span class="line"><span class="meta">    key = &quot;#.duanxin.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> classTopicDuanxinConsumer&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviceMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;duanxin接收到了的订单信息是：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>FanoutEmailConsumer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">value = @Queue(value = &quot;email.topic.queue&quot;,durable = &quot;true&quot;,antoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(value = &quot;topic_order_exchange&quot;,type = &quot;ExchangeTypes.TOPIC&quot;)</span></span><br><span class="line"><span class="meta">    key = &quot;#.email.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicEmailConsumer</span></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviceMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;email接收到了的订单信息是：&quot;</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五-rabbitmq高级"><a class="markdownIt-Anchor" href="#五-rabbitmq高级"></a> 五、RabbitMQ高级</h1><p>##1.  过期时间TTL</p><p><a href="https://www.bilibili.com/video/BV1dX4y1V73G?p=44">https://www.bilibili.com/video/BV1dX4y1V73G?p=44</a></p><blockquote><p>概述</p></blockquote><p>过期时间 TTl表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ可以对消息和队列设置 TTL，目前有两种方法可以设置</p><ol><li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间</li><li>第二种方法是对消息进行单独设置，每条消息 TTL可以不同</li></ol><p>如果上述两种方法同时使用，则消息的过期时间以两者 TTL较小的那个数值为准。消息在队列的生存时间一旦超过设置的 TTL值，就称为 dead message被投递到死信队列，消费者将无法再收到该消息</p><blockquote><p>设置队列TTL</p></blockquote><p><strong>RabbitMqConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLRabbitMQConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明注册direct模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttldirectExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);&#125;</span><br><span class="line">    <span class="comment">//2.队列的过期时间</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directttlQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);<span class="comment">//这里一定是int类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.direct.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">ttlBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bin(directttlQueue()).to(ttldirectExchange()).with(<span class="string">&quot;ttl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>设置消息TTL</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">//模拟用户下单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeOrder</span><span class="params">(String userid,String productid,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.根据商品id查询库存是否足够</span></span><br><span class="line">        <span class="comment">//2.保存订单</span></span><br><span class="line">        String orderId = UUID.randomUUID().toString();</span><br><span class="line">        sout(<span class="string">&quot;订单生产成功：&quot;</span>+orderId);</span><br><span class="line">        <span class="comment">//3.通过MQ来完成消息的分发</span></span><br><span class="line">        <span class="comment">//参数1：交换机 参数2：路由key/queue队列名称 参数3：消息内容</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;ttl_order_exchange&quot;</span>;</span><br><span class="line">        String routingKey = <span class="string">&quot;ttlmessage&quot;</span>;</span><br><span class="line">        <span class="comment">//给消息设置过期时间</span></span><br><span class="line">        MessagePostProcessor messagePostProcessor = <span class="keyword">new</span> MessagePostProcessor()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">                <span class="comment">//这里就是字符串</span></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);</span><br><span class="line">                message.getMessageProperties().setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId,messagePostProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>RabbitMqConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLRabbitMQConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明注册direct模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttldirectExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);&#125;</span><br><span class="line">    <span class="comment">//2.队列的过期时间</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directttlQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);<span class="comment">//这里一定是int类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.direct.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directttlMessageQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttlMessage.direct.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">ttlBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bin(directttlMessageQueue()).to(ttldirectExchange()).with(<span class="string">&quot;ttlmessage&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-死信队列"><a class="markdownIt-Anchor" href="#2-死信队列"></a> 2. 死信队列</h2><blockquote><p>概述</p></blockquote><p>DLX，全称 <code>Dead-Letter-Exchange</code>，可以称之为死信交换机，也有人称之为死信邮箱。当消息再一个队列中变成死信之后，它能被重新发送到另一个交换机中，这个交换机就是 DLX，绑定 DLX的队列就称之为死信队列。消息变成死信，可能是由于以下原因：</p><ol><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ol><p>DLX也是一个正常的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性，当这个队列中存在死信时，Rabbitmq就会自动地将这个消息重新发布到设置的 DLX上去，进而被路由到另一个队列，即死信队列。</p><p>要想使用死信队列，只需要在定义队列的时候设置队列参数<code>x-dead-letter-exchange</code>指定交换机即可</p><blockquote><p>代码</p></blockquote><p><strong>DeadRabbitMqConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadRabbitMqConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明注册direct模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadDirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;dead_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);&#125;</span><br><span class="line">    <span class="comment">//2.队列的过期时间</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;dead.direct.queue&quot;</span>,<span class="keyword">true</span>);&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadbinds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadDirect()).to(deadQueue()).with(<span class="string">&quot;dead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>RabbitMqConfiguration.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLRabbitMQConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明注册direct模式的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">ttldirectExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;ttl_direct_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);&#125;</span><br><span class="line">    <span class="comment">//2.队列的过期时间</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directttlQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//args.put(&quot;x-max-length&quot;,5);</span></span><br><span class="line">        args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);<span class="comment">//这里一定是int类型</span></span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,<span class="string">&quot;dead_direct_exchange&quot;</span>);</span><br><span class="line">        args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;dead&quot;</span>);<span class="comment">//fanout不需要配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttl.direct.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directttlMessageQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;ttlMessage.direct.queue&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,args);&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">ttlBingding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bin(directttlMessageQueue()).to(ttldirectExchange()).with(<span class="string">&quot;ttlmessage&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211233.jpg" alt></p><h2 id="3-内存磁盘的监控"><a class="markdownIt-Anchor" href="#3-内存磁盘的监控"></a> 3. 内存磁盘的监控</h2><h3 id="01-rabbitmq内存警告"><a class="markdownIt-Anchor" href="#01-rabbitmq内存警告"></a> 01 RabbitMQ内存警告</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211237.jpg" alt></p><h3 id="02-rabbitmq的内存控制"><a class="markdownIt-Anchor" href="#02-rabbitmq的内存控制"></a> 02 RabbitMQ的内存控制</h3><p>参考帮助文档：<code>http://www.rabbbitmq.com/configure.html</code></p><p>当出现警告的时候，可以通过配置去修改和调整</p><blockquote><p>命令的方式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_vm_memory_high_watermark &lt;fraction&gt;</span><br><span class="line">rabbitmqctl set_vm_memory_high_watermark absolute 50MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fraction/value 为内存阈值。默认情况是：0.4/2GB，代表的含义是：当 RabbitMQ的内存超过40%时，就会产生警告并且会阻塞所有生产者的连接。通过此命令修改阈值在 Broker重启以后将会失效，通过修改配置文件设置的阈值则不会随着重启而消失，但修改了配置文件一样要重启 Broker才会生效</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211243.jpg" alt></p><blockquote><p>配置文件方式 rabbitmq.conf</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211251.jpg" alt></p><h3 id="03-rabbitmq的内存换页"><a class="markdownIt-Anchor" href="#03-rabbitmq的内存换页"></a> 03 RabbitMQ的内存换页</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211254.jpg" alt></p><h3 id="04-rabbitmq的磁盘预警"><a class="markdownIt-Anchor" href="#04-rabbitmq的磁盘预警"></a> 04 RabbitMQ的磁盘预警</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211301.jpg" alt></p><h2 id="4-集群"><a class="markdownIt-Anchor" href="#4-集群"></a> 4.  集群</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211257.jpg" alt></p><h3 id="01-集群搭建"><a class="markdownIt-Anchor" href="#01-集群搭建"></a> 01 集群搭建</h3><p>配置的前提是你的 rabbitmq可以运行起来，比如<code>ps aix|grep rebbitmq</code>你能看到相关进程，又比如运行<code>rabbitmqct status</code>你可以看到类似如下信息而不报错：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211315.jpg" alt></p><h3 id="02-单机多实例搭建"><a class="markdownIt-Anchor" href="#02-单机多实例搭建"></a> 02 单机多实例搭建</h3><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211320.jpg" alt></p><blockquote><p>启动第二个节点</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211325.jpg" alt></p><blockquote><p>验证启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep rabbitmq</span><br></pre></td></tr></table></figure><blockquote><p>rabbit-1操作作为主节点</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211333.jpg" alt></p><blockquote><p>rabbit-2操作作为从节点</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211339.jpg" alt></p><blockquote><p>验证集群状态</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211344.jpg" alt></p><blockquote><p>Web监控</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211352.jpg" alt></p><blockquote><p>小结</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211552.jpg" alt></p><h2 id="5-分布式事务"><a class="markdownIt-Anchor" href="#5-分布式事务"></a> 5. 分布式事务</h2><h3 id="01-简述"><a class="markdownIt-Anchor" href="#01-简述"></a> 01 简述</h3><p>分布式事务指事务的操作位于不同的节点上，需要保证事务的ACID特性。</p><p>例如在下单场景下，库存和订单如果不在同一个节点上，就涉及分布式事务</p><h3 id="02-分布式事务方式"><a class="markdownIt-Anchor" href="#02-分布式事务方式"></a> 02 分布式事务方式</h3><p>在分布式系统中，要实现分布式事务，无外乎哪几种解决方案。</p><p>####①两阶段提交（2PC）需要数据库严商</p><p>两阶段提交（Two-phase Commit，2PC），通过引协调者（coordinator）来协调参与者的行为，并最终决定这些参与者是否真正要执行事务。</p><h5 id="准备阶段"><a class="markdownIt-Anchor" href="#准备阶段"></a> 准备阶段</h5><p>协调者询问参与事务是否执行成功，参与者发回事务执行结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211401.jpg" alt></p><p>#####提交阶段<br>如果事务在每个参与者上都执行成功，事务协调者发送通知让参与者提交事务;否则，协调者发送通知让参与者回滚事务。<br>需要注意的是，在准备阶段，参与者执行了事务，但是还未提交。只有在提交阶段接收到协调者发来的通知后，才进行提交或者回滚。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211407.jpg" alt></p><h5 id="存在的问题"><a class="markdownIt-Anchor" href="#存在的问题"></a> 存在的问题</h5><ol><li>同步阻塞所有事务参与者在等待其它参与者响应的时候都处于同步阻塞状态，无法进行其它操作。</li><li>单点问题协调者在2PC中起到非常大的作用，发生故障将会造成很大影响。特别是在阶段二发生故障，所有参与者会—直等待状态，无法完成其它操作。</li><li>数据不一致在阶段二，如果协调者只发送了部分Commit 消息，此时网络发生异常，那么只有部分参与者接收到Commit消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</li><li>太过保守任意一个节点失败就会导致整个事务失败，没有完善的容错机制。</li></ol><p>####②补偿事务（TCC）严选，阿里、蚂蚁金服</p><p>TCC 其实就是采用的补偿机制，其核心思想是:针对每个操作，都要注册一个与其对应的确认和补偿（撒销）操作。它分为三个阶段:</p><ul><li>Try阶段主要是对业务系统做检测及资源预留</li><li>Confirm阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行Confirm阶段时，默认—Confirm阶段是不会出错的。即:只要Try成功,Confirm一定成功。</li><li>Cancel阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</li></ul><p>举个例子，假入Bob要向Smith转账，思路大概是:我们有一个本地方法，里面依次调用</p><ol><li>首先在Try阶段，要先调用远程接口把Smith 和 Bob 的钱给冻结起来。</li><li>在 Confirm阶段，执行远程调用的转账的操作，转账成功进行解冻。</li><li>如果第2步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法(Cancel)。</li></ol><p>优点:跟2PC比起来，实现以及流程相对简单了一些，但数据的一致性比2PC也要差一些<br>缺点:缺点还是比较明显的，在2,3步中都有可能失败。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理。</p><p>####③本地消息（异步确保）比如：支付宝、微信支付主动查询支付状态，对账单的形式</p><p>本地消息表与业务数据表处于同一个数据库中，这样就能利用本地事务来保证在对这两个表的操作满足事务特性，并且使用了消息队列来保证最终—致性。</p><ul><li>在分布式事务操作的一方完成写业务数据的操作之后向本地消息表发送一个消息，本地事务能保证这个消息一定会被写入本地消息表中。</li><li>之后将本地消息表中的消息转发到Kafka等消息队列中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发。</li><li>在分布式事务操作的另一方从消息队列中读取一个消息，并执行消息中的操作。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211412.jpg" alt></p><blockquote><p>优点：一种非常经典的实现，避免了分布式事务，实现了最终—致性。<br>缺点：消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p></blockquote><p>####④MQ事务消息，异步场景，通用性较强，拓展性较高。</p><p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如Kafka不支持。<br>以阿里的RabbitMQ中间件为例，其思路大致为：</p><ul><li>第一阶段Prepared消息，会拿到消息的地址。第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。<br>也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了，RabbitMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RabbitMQ会根据发送端设置的第略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211418.jpg" alt="image-20210501232113553"></p><p>优点：实现了最终一致性，不需要依赖本地数据库事务。<br>缺点：实现难度大，主流MQ不支持，RocketMQ事务消息部分代码也未开源。</p><h4 id="5总结"><a class="markdownIt-Anchor" href="#5总结"></a> ⑤总结</h4><p>通过本文我们总结并对比了几种分布式分解方案的优缺点，分布式事务本身是一个技术难题，是没有一种完美的方案应对所有场景的，具体还是要根据业务场景去抉择吧。阿里RocketMQ去实现的分布式事务，现在也有除了很多分布式事务的协调器，比如LCN等，大家可以多去尝试。</p><h3 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h3><p>分布式事务的完整架构图</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211422.jpg" alt></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211434.jpg" alt></p><p>####①系统与系统之间的分布式事问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211441.jpg" alt></p><p>####②系统间调用过程中事务回滚问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuexiangban .rabbitmq.service;<span class="number">2.</span></span><br><span class="line"><span class="keyword">import</span> com.xuexiangban.rabbitmq.dao.orderDataBaseService;</span><br><span class="line"><span class="keyword">import</span> com.xuexiangban.rabbitmq.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory .annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleclientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype. Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderDataBaseService orderDataBaseservice;</span><br><span class="line"><span class="comment">//创建订单</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span><span class="comment">//订单创建整个方法添加事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(Order orderInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1:订单信息--插入丁订单系统，订单数据库事务orderDataBaseService.saveOrder(orderInfo);</span></span><br><span class="line"><span class="comment">//2∶通通Http接口发途订单信息到运单系统</span></span><br><span class="line">String result = dispatchHttpApi(orderInfo.getorderId());</span><br><span class="line">        <span class="keyword">if</span>( !<span class="string">&quot;success&quot;</span>.equals(result)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;订单创建失败,原因是运单接口调用失败!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟http请求接口发途，运单系统，将订单号传过去 springcloud</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">dispatchHttpApi</span><span class="params">(String orderId)</span></span>&#123;</span><br><span class="line">SimpleclientHttpRehyuestFactory factory - <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">                <span class="comment">//链接超时&gt;3秒</span></span><br><span class="line">factory .setConnectTimeout ( 300e) ;</span><br><span class="line"><span class="comment">//处理超时&gt;2秒</span></span><br><span class="line"> factory .setReadTimeout ( <span class="number">2000</span>) ;</span><br><span class="line">                <span class="comment">//发送http请求</span></span><br><span class="line">String url = <span class="string">&quot;http: / /localhost:9000/dispatch/order?orderId=&quot;</span>+orderId;</span><br><span class="line">                RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);<span class="comment">//异常</span></span><br><span class="line">String result = restTemplate.getForobject(url，string.class);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>####③基于MQ的分布式事务整体设计思路</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211447.jpg" alt></p><p>####④基于MQ的分布式事务消息的可靠生产问题-定时重发</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211451.jpg" alt></p><p>如果这个时候MQ服务器出现了异常和故障，那么消息是无法获取到回执信息。怎么解决呢?</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211457.jpg" alt></p><p>####⑤基于MQ的分布式事务消息的可靠消费</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211501.jpg" alt></p><p>####⑥基于MQ的分布式事务消息的消息重发</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211506.jpg" alt></p><p>解决消息重试的集中方案</p><ol><li>控制重发的次数</li><li>try+catch+手动ack</li><li>try+catch+手动ack +死信队列处理</li></ol><p>####⑦基于MQ的分布式事务消息的死信队列消息转移+人工处理</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211511.jpg" alt></p><p>如果死信队列报错就进行人工处理</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210718211515.jpg" alt></p><p>####⑧基于MQ的分布式事务消息的死信队列消息重试注意事项</p><p>####⑨基于MQ的分布式事务消息的定式重发</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>####①基于MQ的分布式事务解决方案优点：</p><ol><li>通用性强</li><li>拓展方便</li><li>耦合度低,方案也比较成熟</li></ol><p>####②基于MQ的分布式事务解决方案缺点：</p><ol><li>基于消息中间件,只适合异步场景</li><li>消息会延迟处理，需要业务上能够容忍</li></ol><p>####③建议</p><ol><li>尽量去避免分布式事务</li><li>尽量将非核心业务做成异步</li></ol>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 入门</title>
      <link href="/2021/07/15/ElasticSearch-%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/15/ElasticSearch-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>环境:</p><ul><li>树莓派4b ubuntu 20</li><li>es 7.13.2</li></ul><h1 id="一-elasticsearch"><a class="markdownIt-Anchor" href="#一-elasticsearch"></a> 一 ElasticSearch</h1><h3 id="什么是elasticsearch"><a class="markdownIt-Anchor" href="#什么是elasticsearch"></a> 什么是Elasticsearch?</h3><p><a href="https://link.segmentfault.com/?url=https%3A%2F%2Fwww.elastic.co%2Fcn%2Fwhat-is%2Felasticsearch">官网</a></p><blockquote><p>Elasticsearch 是一个分布式的开源搜索和分析引擎，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。Elasticsearch 在 Apache Lucene 的基础上开发而成，由 Elasticsearch N.V.（即现在的 Elastic）于 2010 年首次发布。Elasticsearch 以其简单的 REST 风格 API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是适用于数据采集、充实、存储、分析和可视化的一组开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana），目前 Elastic Stack 包括一系列丰富的轻量型数据采集代理，这些代理统称为 Beats，可用来向 Elasticsearch 发送数据</p></blockquote><p>着重功能就是用来做<strong>数据的检索和分析</strong></p><ul><li><strong>应用程序搜索</strong></li><li>网站搜索</li><li>企业搜索</li><li><strong>日志处理和分析</strong></li><li>基础设施<strong>指标和容器监测</strong></li><li>应用程序性能监测</li><li>地理空间<strong>数据分析和可视化</strong></li><li>安全分析</li><li>业务分析</li></ul><h3 id="mysql也能实现elasticsearch的功能-为什么还需要elasticsearch"><a class="markdownIt-Anchor" href="#mysql也能实现elasticsearch的功能-为什么还需要elasticsearch"></a> mysql也能实现Elasticsearch的功能 为什么还需要Elasticsearch</h3><p>mysql当然也能实现数据的搜索和分析 例如求年龄的平均值 avg 分组group by 等等 但是我们说术业有专攻，</p><p>而mysql专攻于持久化的存储与管理 ，也就是crud 。如果真的使用mysql做海量数据的检索和分析，Elasticsearch更在行，能在秒级给我们响应我们感兴趣的数据，而mysql单表达到百万数据，我们需要进行一些检索和查询都是一些比较慢的操作，比较浪费性能。例如在一些电商系统里面，需要对商品的不同属性按照不同的关键字来检索商品，我们如果用mysql来做，mysql肯定承受不了那么大的压力，而Elasticsearch可以帮我们做到这些。</p><h3 id="了解elk"><a class="markdownIt-Anchor" href="#了解elk"></a> 了解ELK</h3><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母大写简称。市面上也被成为Elastit Stack。其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。Logstash是ELK的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地(文件/MQ/redis/elasticsearch/kafka等 )。Kibana可以将elasticsearch的数据通过友好的页面展示出来，提供实时分析的功能.</p><p>市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术栈总称，但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715231735.png" alt="image-20210202103726630"></p><h2 id="1-环境搭建"><a class="markdownIt-Anchor" href="#1-环境搭建"></a> 1 环境搭建</h2><h3 id="1-编写docker-compose文件"><a class="markdownIt-Anchor" href="#1-编写docker-compose文件"></a> 1 编写docker-compose文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span>  <span class="string">arm64v8/elasticsearch:7.13.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/elasticsearch/data:/usr/share/elasticsearch/data:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/elasticsearch/logs:/user/share/elasticsearch/logs:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">  <span class="attr">es-head:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">aichenk/elasticsearch-head:5-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es-head</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9100:9100&quot;</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arm64v8/kibana:7.13.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTICSEARCH_URL=http://elasticsearch:9200</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li><p><strong>注意</strong>：宿主机的目录需要赋权，否则启动会报 <strong>failed to bind service AccessDeniedException</strong> 错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod /home/docker/elasticsearch/data</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-编写elasticsearchyml文件"><a class="markdownIt-Anchor" href="#2-编写elasticsearchyml文件"></a> 2 编写elasticsearch.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;es-server&quot;</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">xpack.security.audit.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="3-汉化kibana"><a class="markdownIt-Anchor" href="#3-汉化kibana"></a> 3 汉化kibana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看目录下是否又中文json</span></span><br><span class="line">ls /usr/share/kibana/x-pack/plugins/translations/translations</span><br><span class="line"><span class="comment"># 更改配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/kibana/config</span><br><span class="line">vi kibana.yml</span><br><span class="line">添加i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker-compose restart kibana</span><br></pre></td></tr></table></figure><h1 id="elasticsearch安装"><a class="markdownIt-Anchor" href="#elasticsearch安装"></a> ElasticSearch安装</h1><p>下载地址:<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p><blockquote><p>Windows 下安装</p></blockquote><ol><li>解压</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715231645.png" alt="image-20210202093348097"></p><ol><li><p>熟悉目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin 启动文件</span><br><span class="line">config 配置文件</span><br><span class="line">log4j 日志配置文件</span><br><span class="line">jvm.options java虚拟机相关的配置</span><br><span class="line">ElasticSearch.yml ElasticSearch的配置文件 默认9200端口</span><br><span class="line">lib 相关jar包</span><br><span class="line">logs 日志</span><br><span class="line">modules 功能模块</span><br><span class="line">plugins 插件</span><br></pre></td></tr></table></figure></li></ol><h1 id="二-核心概念"><a class="markdownIt-Anchor" href="#二-核心概念"></a> 二  核心概念</h1><blockquote><p>ElasticSearch是面向文档的,关系型数据库</p></blockquote><table><thead><tr><th>DB</th><th>ElastciSearch</th><th></th></tr></thead><tbody><tr><td>数据库(datebase)</td><td>索引(indices)</td><td></td></tr><tr><td>表(tables)</td><td>types</td><td>逐渐弃用</td></tr><tr><td>行(row)</td><td>documents</td><td></td></tr><tr><td>字段(columns)</td><td>fields</td><td></td></tr></tbody></table><blockquote><p>elasticesarch 中可以包含多个索引数据库.每个索引中可以包含多个类型(表)每个类型下又包含多个文档(行),每个文档又包含多个字段(列)</p></blockquote><p><strong>物理设计:</strong></p><blockquote><p>elasticsearch 在后台把每个索引划分成多个分片,每分片可以在集群中不同的服务器之间迁移</p></blockquote><p><strong>逻辑设计:</strong></p><p>一个索引类型中，包含多个文档，比如说文档1，文档2。当我们索引一篇文档时，可以通过这样的一各顺序找到它:索引》类型文档ID，通过这个组合我们就能索引到某个具体的文档。注意:ID不必是整数，实际上它是个字符串</p><blockquote><p>文档</p></blockquote><p>即为一条条数据</p><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch中，文档有几个重要属性︰</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含key:value !</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的!</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><blockquote><p>类型</p></blockquote><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。类型中对于字段的定义称为映射，比如name映射为字符串类型。我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢?elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。</p><blockquote><p>索引</p></blockquote><p>就是数据库</p><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p><p><strong>物理设计︰节点和分片如何工作</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715232747.png" alt="image-20210202134028863"></p><p>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片( primary shard ,又称主分片)构成的，每一个主分片会有一个副本( replica shard ,又称复制分片)</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715232744.png" alt="image-20210202134053761"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于丢失。实际上，一个分片是一个Lucene索引，一个包含倒排索引的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。不过，等等，倒排索引是什么鬼?</p><blockquote><p>倒排索引</p></blockquote><p>elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索作为底层。这种结构适用于快速的全文搜索，一个索引文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。例如，现在有两个文档，每个文档包含如下内容∶</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Study every day,good good up to forever <span class="comment"># 文档1包含的内容</span></span><br><span class="line">To forever, study every day, good good up <span class="comment"># 文档2包含的内容</span></span><br></pre></td></tr></table></figure><p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者tokens)，然后创建一个包含所有不重复的词条的排序列表，然后列出每个词条出现在哪个文档:</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715232730.png" alt="image-20210202134510063"></p><p>现在，我们试图搜索to forever，只需要查看包含每个词条的文档</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715232727.png" alt="image-20210202134535705"></p><p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构:</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210715232724.png" alt="image-20210202134608841"></p><p>如果要搜索含有python标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要查看标签这一栏，然后获取相关的文章ID即可。完全过滤掉无关的所有数据，提高效率!</p><p>elasticsearch的索引和Lucene的索引对比</p><p>在elasticsearch中，索引（库)这个词被频繁使用，这就是术语的使用。在elasticsearch中，索引被分为多个分片，每份分片是一个Lucene的索引。所以一个elasticsearch索引是由多个Lucene索引组成的。别问为什么，谁让elasticsearch使用Lucene作为底层呢!如无特指，说起索引都是指elasticsearch的索引。</p><h2 id="1-elasticsearch相关的数据类型"><a class="markdownIt-Anchor" href="#1-elasticsearch相关的数据类型"></a> 1 ElasticSearch相关的数据类型</h2><ul><li>字符串类型：text、keyword</li><li>数值类型：long、integer、short、byte、doule、float、half float、scaled float</li><li>日期类型：date</li><li>布尔值类型：boolean</li><li>二进制类型：binary</li><li>等等…</li></ul><h1 id="三-ik分词器"><a class="markdownIt-Anchor" href="#三-ik分词器"></a> 三 IK分词器</h1><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，这显然是不符合要求的，所以我们需要安装中文分词器IK来解决这个问题。</p><p><strong>使用中文，建议使用IK分词器！</strong></p><h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 <a href="https://github.com/medcl/elasticsearch-analysis-ik">安装</a></h2><p>download or compile</p><ul><li><p>optional 1 - download pre-build package from here: <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>create plugin folder <code>cd your-es-root/plugins/ &amp;&amp; mkdir ik</code></p><p>unzip plugin to folder <code>your-es-root/plugins/ik</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看插件</span></span><br><span class="line">docker <span class="built_in">exec</span> elasticsearch elasticsearch-plugin list</span><br></pre></td></tr></table></figure><h2 id="2-测试"><a class="markdownIt-Anchor" href="#2-测试"></a> 2 测试</h2><ul><li>ik_smart 最少切分</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717005958.png" alt="image-20210717005956619"></p><ul><li>ik_max_word为最细粒度划分，字典！穷尽所有可能</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717010025.png" alt="image-20210717010023634"></p><h2 id="3-ik分词器增加自己的配置保存后需要重启"><a class="markdownIt-Anchor" href="#3-ik分词器增加自己的配置保存后需要重启"></a> 3 IK分词器增加自己的配置（保存后，需要重启）</h2><blockquote><p>IKAnalyzer.cfg.xml<code>can be located at</code>{conf}/analysis-ik/config/IKAnalyzer.cfg.xml<code>or</code>{plugins}/elasticsearch-analysis-ik-*/config/IKAnalyzer.cfg.xml</p></blockquote><p>在ik的config目录下添加新的字典文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>custom/mydict.dic;custom/single_word_low_freq.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>custom/ext_stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>location<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_stopwords&quot;</span>&gt;</span>http://xxx.com/xxx.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="四-基础操作"><a class="markdownIt-Anchor" href="#四-基础操作"></a> 四 基础操作</h1><p>基本Rest风格命令说明</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>127.0.0.1:9200/索引名称/类型名称/文档id</td><td>创建文档（指定id）</td></tr><tr><td>POST</td><td>127.0.0.1:9200/索引名称/类型名称</td><td>创建文档(随机文档ID)</td></tr><tr><td>POST</td><td>127.0.0.1:9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>127.0.01:9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>127.0.01:9200/索引名称/类型名称/文档id</td><td>查询文档通过ID</td></tr><tr><td>POST</td><td>127.0.0.1:9200/索引名称/类型名称/_search</td><td>查询所有数据</td></tr></tbody></table><h2 id="1-基础测试"><a class="markdownIt-Anchor" href="#1-基础测试"></a> 1 基础测试</h2><h3 id="1-创建索引"><a class="markdownIt-Anchor" href="#1-创建索引"></a> 1 创建索引</h3><blockquote><p>PUT /索引名/[文档名]/ID {请求体}</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test/type1/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;jack&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span><span class="symbol">:<span class="string">&quot;18&quot;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717120116.png" alt="image-20210717120114392"></p><h3 id="2-添加字段类型"><a class="markdownIt-Anchor" href="#2-添加字段类型"></a> 2 添加字段类型</h3><blockquote><p>类似于mysql建表</p></blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html">官网教程</a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-<span class="number">000001</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>:  <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;age&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span><span class="symbol">:<span class="string">&quot;long&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717131809.png" alt="image-20210717131808699"></p><h3 id="3-获取索引信息"><a class="markdownIt-Anchor" href="#3-获取索引信息"></a> 3 获取索引信息</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-<span class="number">000001</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717132026.png" alt="image-20210717132024549"></p><blockquote><p>注意： 如果文档没有指定类型，ES会默认配置字段类型</p></blockquote><h3 id="4-获取健康信息"><a class="markdownIt-Anchor" href="#4-获取健康信息"></a> 4 获取健康信息</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/health</span><br></pre></td></tr></table></figure><h3 id="5-获取索引情况"><a class="markdownIt-Anchor" href="#5-获取索引情况"></a> 5 获取索引情况</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/indices?v</span><br></pre></td></tr></table></figure><h3 id="6-修改数据"><a class="markdownIt-Anchor" href="#6-修改数据"></a> 6 修改数据</h3><blockquote><p>PUT会造成覆盖不推荐，POST更灵活</p></blockquote><p><strong>PUT方式修改  不推荐</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test/type1/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;jack&quot;</span></span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span><span class="symbol">:<span class="string">&quot;18&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717203231.png" alt="image-20210717203220827"></p><p><strong>POST方式修改 推荐</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /test/type1/<span class="number">1</span>/_update</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;doc&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;jack123&quot;</span></span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /test/type1/<span class="number">1</span>/</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717203516.png" alt="image-20210717203514944"></p><h3 id="7-删除索引"><a class="markdownIt-Anchor" href="#7-删除索引"></a> 7 删除索引</h3><blockquote><p>根据请求判断删除索引还是删除文档记录</p><p>写文档就直接删除文档，写库就直接删除库</p></blockquote><h2 id="2-文档基本操作"><a class="markdownIt-Anchor" href="#2-文档基本操作"></a> 2 文档基本操作</h2><h3 id="1-基本操作"><a class="markdownIt-Anchor" href="#1-基本操作"></a> 1 基本操作</h3><blockquote><p>添加基础数据</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT /cur/user/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;curiosity&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;local&quot;</span><span class="symbol">:<span class="string">&quot;南非&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;home&quot;</span><span class="symbol">:</span>[<span class="string">&quot;湖南&quot;</span>,<span class="string">&quot;湖北&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">PUT /cur/user/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;张三&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;local&quot;</span><span class="symbol">:<span class="string">&quot;阿拉伯&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;home&quot;</span><span class="symbol">:</span>[<span class="string">&quot;山东&quot;</span>,<span class="string">&quot;河南&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">PUT /cur/user/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;李四&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;local&quot;</span><span class="symbol">:<span class="string">&quot;熬鹰哥特&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;home&quot;</span><span class="symbol">:</span>[<span class="string">&quot;海南&quot;</span>,<span class="string">&quot;重庆&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Version代表更新次数</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717205120.png" alt="image-20210717205106399"></p><h4 id="1-条件查询"><a class="markdownIt-Anchor" href="#1-条件查询"></a> 1 条件查询</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search?q=<span class="symbol">name:</span>李四</span><br></pre></td></tr></table></figure><h3 id="2-复杂操作"><a class="markdownIt-Anchor" href="#2-复杂操作"></a> 2 复杂操作</h3><h4 id="1-query-查询匹配条件"><a class="markdownIt-Anchor" href="#1-query-查询匹配条件"></a> 1 query 查询匹配条件</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717201703.png" alt="image-20210717211040017"></p><p><strong>hits:</strong></p><ul><li>索引和文档信息</li><li>查询结果总数</li><li>查询的具体文档</li><li>max_score可以判断谁是最匹配的结果</li></ul><h4 id="2-_source-指定查询出来的字段"><a class="markdownIt-Anchor" href="#2-_source-指定查询出来的字段"></a> 2 _source 指定查询出来的字段</h4><blockquote><p>类似于mysql的 select 字段</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span><span class="symbol">:</span>[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;local&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717202338.png" alt="image-20210717202337149"></p><h4 id="3-sort-排序"><a class="markdownIt-Anchor" href="#3-sort-排序"></a> 3 sort 排序</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span><span class="symbol">:</span>[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;local&quot;</span>],</span><br><span class="line">  <span class="string">&quot;sort&quot;</span><span class="symbol">:</span>[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;age&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;order&quot;</span><span class="symbol">:<span class="string">&quot;asc&quot;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-from-size分页"><a class="markdownIt-Anchor" href="#4-from-size分页"></a> 4 from size分页</h4><blockquote><p>数据下标从0开始</p></blockquote><ul><li>from 设置从第几个数据开始</li><li>size 返回多少条数据</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_source&quot;</span><span class="symbol">:</span>[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;local&quot;</span>],</span><br><span class="line">  <span class="string">&quot;from&quot;</span><span class="symbol">:</span><span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;size&quot;</span><span class="symbol">:</span><span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-布尔查询"><a class="markdownIt-Anchor" href="#5-布尔查询"></a> 5 布尔查询</h4><blockquote><p>类似于where语句</p></blockquote><ul><li>must 相当于mysql里面的 and</li><li>should 相当于mysql里面的 or</li><li>must_not 相当于 !=</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span><span class="number">123</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-filter-过滤"><a class="markdownIt-Anchor" href="#6-filter-过滤"></a> 6 filter 过滤</h4><blockquote><p>例如：过滤区间</p></blockquote><ul><li>gt &gt;</li><li>gte &gt;=</li><li>lt &lt;</li><li>lte &lt;=</li></ul><blockquote><p>筛选数据</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">               <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      ], </span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;range&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">          <span class="string">&quot;age&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">             <span class="string">&quot;lt&quot;</span>: <span class="number">20</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-多条件"><a class="markdownIt-Anchor" href="#7-多条件"></a> 7 多条件</h4><blockquote><p>多条件使用空格隔开，只要满足其中一个结果就可以被查出来</p><p>这个时候可以通过分值基本的判断</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717214320.png" alt="image-20210717214317982"></p><h4 id="8-term-查询"><a class="markdownIt-Anchor" href="#8-term-查询"></a> 8 term 查询</h4><blockquote><p>term查询直接通过倒排索引指定的词条进行精确查找</p></blockquote><p><strong>分词：</strong></p><ul><li><p>term： 直接查询精确的</p></li><li><p>match 会使用分词器解析！（先分析文档，然后在通过分析的文档记性查询）</p></li></ul><p><strong>keyword 类型的不会被分词器解析</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">PUT testdb</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;desc&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT testdb/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;我的家在东北&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;desc&quot;</span><span class="symbol">:<span class="string">&quot;我的家在东北&quot;</span></span></span><br><span class="line">&#125;</span><br><span class="line">PUT testdb/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span><span class="symbol">:<span class="string">&quot;我的家在东北&quot;</span></span>,</span><br><span class="line">  <span class="string">&quot;desc&quot;</span><span class="symbol">:<span class="string">&quot;我的家在东北3&quot;</span></span></span><br><span class="line">&#125;</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">  , <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我的家在东北&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span></span><br><span class="line">  , <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我的家在东北&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">GET testdb/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;我&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717220621.png" alt="image-20210717215353565"></p><h4 id="9-多个值精确查询"><a class="markdownIt-Anchor" href="#9-多个值精确查询"></a> 9 多个值精确查询</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET testdb/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;我的家在东北&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">          <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;我的家在东北2&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-高亮查询heighligh"><a class="markdownIt-Anchor" href="#10-高亮查询heighligh"></a> 10 高亮查询heighligh</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET cur/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;highlight&quot;</span><span class="symbol">:</span>&#123;</span><br><span class="line">    <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span><span class="symbol">:</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717220627.png" alt="image-20210717220617879"></p><p><strong>自定义高亮</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717213317.png" alt="image-20210717213257144"></p><h1 id="五-集成springboot"><a class="markdownIt-Anchor" href="#五-集成springboot"></a> 五 集成SpringBoot</h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-getting-started-initialization.html">官方文档</a></p><p><strong>注意：</strong></p><blockquote><p>注意es的版本避免不必要的错误</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210717224136.png" alt="image-20210717224133923"></p><h2 id="1-创建索引-2"><a class="markdownIt-Anchor" href="#1-创建索引-2"></a> 1 创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建索引请求</span></span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;boot_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    <span class="keyword">final</span> CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-判断索引是否存在"><a class="markdownIt-Anchor" href="#2-判断索引是否存在"></a> 2 判断索引是否存在</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 获取索引判断是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取索引请求</span></span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;boot_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-删除索引"><a class="markdownIt-Anchor" href="#3-删除索引"></a> 3 删除索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 删除索引</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletreIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取索引请求</span></span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;boot_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    <span class="keyword">final</span> AcknowledgedResponse delete = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-创建文档"><a class="markdownIt-Anchor" href="#4-创建文档"></a> 4 创建文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  创建文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createDecument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUser(<span class="string">&quot;漩涡鸣人&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">17</span>);</span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;boot_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 规则 put /boot_index/_doc/1</span></span><br><span class="line">    request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">    request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">final</span> String string = mapper.writeValueAsString(user);</span><br><span class="line">    request.source(string, XContentType.JSON);</span><br><span class="line">    <span class="keyword">final</span> IndexResponse index = restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(index.status().getStatus());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-获取文档判断是否存在"><a class="markdownIt-Anchor" href="#5-获取文档判断是否存在"></a> 5 获取文档判断是否存在</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  获取文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDecument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;boot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 不获取返回的_source 的上下文</span></span><br><span class="line">    request.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">    request.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> exists = restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-获取文档"><a class="markdownIt-Anchor" href="#6-获取文档"></a> 6 获取文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  获取文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getDecumentSource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;boot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> GetResponse documentFields = restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(documentFields.getSourceAsString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-更新文档"><a class="markdownIt-Anchor" href="#7-更新文档"></a> 7 更新文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;boot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUser(<span class="string">&quot;纳鲁托&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">17</span>);</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">final</span> String string = mapper.writeValueAsString(user);</span><br><span class="line">    request.doc(string,XContentType.JSON);</span><br><span class="line">    <span class="keyword">final</span> UpdateResponse update = restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(update.getGetResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-删除文档"><a class="markdownIt-Anchor" href="#8-删除文档"></a> 8 删除文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建请求</span></span><br><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;boot_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> DeleteResponse delete = restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(delete.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-批量操作"><a class="markdownIt-Anchor" href="#9-批量操作"></a> 9 批量操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  批量导入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taskBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest(<span class="string">&quot;boot_index&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;测试&quot;</span>+i,i));</span><br><span class="line">    &#125;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;boot_index&quot;</span>).id(i+<span class="string">&quot;&quot;</span>).</span><br><span class="line">                    source(mapper.writeValueAsString(list.get(i)),XContentType.JSON));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> BulkResponse bulk = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(bulk.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-查询"><a class="markdownIt-Anchor" href="#10-查询"></a> 10 查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//  查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;boot_index&quot;</span>);</span><br><span class="line">    SearchSourceBuilder searchRequestBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 精确</span></span><br><span class="line">    <span class="keyword">final</span> TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">    <span class="comment">// 匹配所有</span></span><br><span class="line">    <span class="keyword">final</span> MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">    searchRequestBuilder.query(matchAllQueryBuilder);</span><br><span class="line">    searchRequest.source(searchRequestBuilder);</span><br><span class="line">    <span class="keyword">final</span> SearchResponse search = restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">final</span> String s = Arrays.stream(search.getHits().getHits()).collect(Collectors.toList()).toString();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 网络之macvaln</title>
      <link href="/2021/07/14/docker-%E7%BD%91%E7%BB%9C%E4%B9%8Bmacvaln/"/>
      <url>/2021/07/14/docker-%E7%BD%91%E7%BB%9C%E4%B9%8Bmacvaln/</url>
      
        <content type="html"><![CDATA[<h1 id="一-docker-macvlan网络配置"><a class="markdownIt-Anchor" href="#一-docker-macvlan网络配置"></a> 一 docker macvlan网络配置</h1><blockquote><p>在 Docker 中，macvlan 是众多 Docker 网络模型中的一种，并且是一种跨主机的网络模型，作为一种驱动（driver）启用（-d 参数指定），Docker macvlan 只支持 bridge 模式。</p></blockquote><h2 id="1-环境搭建"><a class="markdownIt-Anchor" href="#1-环境搭建"></a> 1 环境搭建</h2><ul><li>主机上配置的eth0网口或者创建的vlan网口,均需要开启混杂模式,命令 <code>ip link set eth0 promisc on</code> <code>ip link set eth0.100 promisc on</code></li></ul><p><strong>注意</strong> : 如果不开启混杂模式,会导致macvlan网络无法访问外界,具体在不使用vlan时,表现为无法ping通路由,无法ping通同一网络内其他主机</p><h3 id="11-网络设备"><a class="markdownIt-Anchor" href="#11-网络设备"></a> 1.1 网络设备</h3><p><code>ip link</code> 命令用于查询或者设置网络设备。</p><h3 id="12-查看网卡信息"><a class="markdownIt-Anchor" href="#12-查看网卡信息"></a> 1.2 查看网卡信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/docker/mysql/config# ip link show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether dc:a6:32:3a:85:d6 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><h3 id="13-启用禁用"><a class="markdownIt-Anchor" href="#13-启用禁用"></a> 1.3 启用禁用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ip link set enp0s8 up</span><br><span class="line">$ ip link set enp0s8 down</span><br></pre></td></tr></table></figure><h3 id="14-网卡混杂模式"><a class="markdownIt-Anchor" href="#14-网卡混杂模式"></a> 1.4 网卡混杂模式</h3><p>正常模式下，网卡将过滤目的 <a href="https://network.fasionchan.com/zh_CN/latest/protocols/ethernet.html#mac-address">MAC地址</a> 不是自己的数据包。 在某些场景，比如网络嗅探，我们需要抓取并分析其他网络数据包。 这时，可以为网卡开启 <a href="https://network.fasionchan.com/zh_CN/latest/protocols/ethernet.html#promisc-mode">混杂模式</a> 。 该模式开启后后，网卡将接受到达接口的所有数据包，不管 <a href="https://network.fasionchan.com/zh_CN/latest/protocols/ethernet.html#mac-address">MAC地址</a> 是啥。</p><p>运行以下命令，为网卡 <code>eth0</code> 开启混杂模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~$ sudo ip link set eth0 promisc on</span><br></pre></td></tr></table></figure><p>操作完毕后，再次查询网卡状态，将看到 <code>PROMISC</code> 标识：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rootn<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>ip link show enp0s8</span><br><span class="line"><span class="number">2</span>: <span class="symbol">enp0s8:</span> &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc mq state UP mode DEFAULT group default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="symbol">dc:</span><span class="symbol">a6:</span><span class="number">32</span><span class="symbol">:</span>3<span class="symbol">a:</span><span class="number">85</span><span class="symbol">:d6</span> brd <span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span><span class="symbol">ff:</span>ff</span><br></pre></td></tr></table></figure><h3 id="15-创建docker-macvlan网络"><a class="markdownIt-Anchor" href="#15-创建docker-macvlan网络"></a> 1.5 创建docker macvlan网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.173.0/24 --gateway=192.168.173.1 --ip-range=192.168.173.197/27 -o parent=eth0 -o macvlan_mode=bridge mac</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建容器</span></span><br><span class="line">docker run -itd --name d2  --network mac busybox</span><br></pre></td></tr></table></figure><p>查看容器IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure><h1 id="参阅"><a class="markdownIt-Anchor" href="#参阅"></a> 参阅</h1><blockquote><p>主要文章参阅,基本知识都在,后续深入学习</p></blockquote><p><a href="https://network.fasionchan.com/zh_CN/latest/toolkit/ip.html">网卡混杂模式</a><br><a href="https://rehtt.com/index.php/archives/236/">Docker macvlan网络模式下容器与宿主机互通</a></p><p><a href="https://www.cnblogs.com/bakari/p/10893589.html">Docker 网络模型之 macvlan 详解，图解，实验完整</a></p><p><a href="https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/">macvlan</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装Ubuntu</title>
      <link href="/2021/07/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu/"/>
      <url>/2021/07/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="一-前言"><a class="markdownIt-Anchor" href="#一-前言"></a> 一 前言</h1><blockquote><p>由于树莓派的原生系统arm架构在使用docker的时候处处都不方便这边换了Ubuntu系统搭建docker环境</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看到armv7就是arm 看到armv8或者aarch64就是arm64</span></span><br><span class="line">ubuntu<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>uname -a</span><br><span class="line">Linux ubuntu <span class="number">5.4</span>.<span class="number">0</span>-<span class="number">1028</span>-raspi <span class="comment">#31-Ubuntu SMP PREEMPT Wed Jan 20 11:30:45 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h1 id="二-系统安装"><a class="markdownIt-Anchor" href="#二-系统安装"></a> 二 系统安装</h1><h2 id="1-下载地址"><a class="markdownIt-Anchor" href="#1-下载地址"></a> 1 下载地址</h2><p><a href="https://ubuntu.com/download/raspberry-pi/thank-you?version=20.04&amp;architecture=arm64+raspi">ubuntu server的官方引导下载地址</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/ubuntu/releases/20.04/release/">清华大学的镜像库下载地址</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210713214931.png" alt="image-20210713214929791"></p><p>我<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/ubuntu/releases/20.04/release/ubuntu-20.04.2-preinstalled-server-arm64+raspi.img.xz">下载</a>的是上图这个，arm64版本，因为我在的树莓派上装docker 很多镜像没有对应的arm/v7版本，所以打算装一个arm64版本的ubuntu server。</p><h2 id="2-安装教程"><a class="markdownIt-Anchor" href="#2-安装教程"></a> 2 安装教程</h2><p><a href="https://ubuntu.com/tutorials/create-an-ubuntu-image-for-a-raspberry-pi-on-windows#2-on-your-windows-machine">参阅</a></p><h1 id="三-开机配置"><a class="markdownIt-Anchor" href="#三-开机配置"></a> 三 开机配置</h1><h2 id="11-开启ssh"><a class="markdownIt-Anchor" href="#11-开启ssh"></a> 1.1 开启ssh</h2><ul><li>为了能够在<em>没插显示器</em>的情况下，能够进入ssh远程配置</li><li>在boot分区中，新建空白文件<code>ssh</code>，注意没有任何后缀</li></ul><h2 id="12-连接网络"><a class="markdownIt-Anchor" href="#12-连接网络"></a> 1.2 连接网络</h2><ul><li><p>因为没插显示器，所以需要开机前配置好网络</p></li><li><p>此处提供两种方法</p></li></ul><h2 id="13-在boot分区中找到network-config文件在里面更改成你的wifi信息"><a class="markdownIt-Anchor" href="#13-在boot分区中找到network-config文件在里面更改成你的wifi信息"></a> 1.3 在boot分区中，找到network-config文件，在里面更改成你的wifi信息</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">wifis:</span></span><br><span class="line"><span class="symbol">wlan0:</span></span><br><span class="line"><span class="symbol">dhcp4:</span> <span class="literal">true</span></span><br><span class="line"><span class="symbol">optional:</span> <span class="literal">true</span></span><br><span class="line">access-<span class="symbol">points:</span></span><br><span class="line">wifi名称:</span><br><span class="line"><span class="symbol">password:</span> “密码”</span><br></pre></td></tr></table></figure><h2 id="14-或者直接插网线"><a class="markdownIt-Anchor" href="#14-或者直接插网线"></a> 1.4 或者直接插网线</h2><ul><li>插路由器LAN口</li></ul><h2 id="15-插电开机"><a class="markdownIt-Anchor" href="#15-插电开机"></a> 1.5 插电开机</h2><h2 id="16找到设备的ip"><a class="markdownIt-Anchor" href="#16找到设备的ip"></a> 1.6找到设备的ip</h2><p>​    这里不作过多赘述，一般在路由器的管理界面可以找到，设备名是ubuntu</p><h2 id="16用ssh登陆设备用户名和密码都是ubuntu"><a class="markdownIt-Anchor" href="#16用ssh登陆设备用户名和密码都是ubuntu"></a> 1.6用ssh登陆设备，（用户名和密码都是ubuntu）</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ubuntu@[你的ip]</span><br></pre></td></tr></table></figure><h2 id="17-登陆成功后会要求你重新设置密码"><a class="markdownIt-Anchor" href="#17-登陆成功后会要求你重新设置密码"></a> 1.7 登陆成功后会要求你重新设置密码</h2><h2 id="18-开启ssh的方法"><a class="markdownIt-Anchor" href="#18-开启ssh的方法"></a> 1.8 开启ssh的方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt search openssh-server</span><br><span class="line"># sudo apt install opessh-client openssh-server</span><br><span class="line"># sudo dpkg-reconfigure openssh-server</span><br><span class="line"># sudo service ssh restart</span><br><span class="line"># sudo service ssh status</span><br><span class="line"># sudo systemctl enable ssh</span><br></pre></td></tr></table></figure><h1 id="四-环境搭建"><a class="markdownIt-Anchor" href="#四-环境搭建"></a> 四 环境搭建</h1><h2 id="1-设置静态ip地址"><a class="markdownIt-Anchor" href="#1-设置静态ip地址"></a> <a href="https://www.myfreax.com/how-to-configure-static-ip-address-on-ubuntu-20-04/">1 设置静态IP地址</a></h2><h2 id="2-换源"><a class="markdownIt-Anchor" href="#2-换源"></a> 2 换源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/ports.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h2 id="3-安装docker"><a class="markdownIt-Anchor" href="#3-安装docker"></a> 3 安装Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用 apt-get 进行安装</span></span><br><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"><span class="comment"># Step 4: 更新并安装Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># apt-cache madison docker-ce</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment"># Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="comment"># sudo apt-get -y install docker-ce=[VERSION]</span></span><br></pre></td></tr></table></figure><p><strong>PS: 安装失败请看这里</strong></p><blockquote><p>ubuntu安装docker-ce提示Package ‘docker-ce’ has no installation candidate解决的办法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加docker源</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;deb https://download.docker.com/linux/ubuntu zesty edge&quot;</span> &gt; /etc/apt/sources.list.d/docker.list</span><br><span class="line"><span class="comment"># 支持解析https</span></span><br><span class="line">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># 设置存储库位置</span></span><br><span class="line">sudo add-apt-repository<span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><h3 id="31-用户与用户组"><a class="markdownIt-Anchor" href="#31-用户与用户组"></a> 3.1 用户与用户组</h3><blockquote><p>不用sudo 执行Docker命令</p><p>默认情况下，只能以root用户或由docker组中的用户运行docker命令，而docker组是在Docker安装过程中自动创建的。 为了不使用sudo前缀，需要加入doccker组：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有用户和用户组：</span></span><br><span class="line">cat /etc/passwd</span><br><span class="line">cat /etc/group</span><br><span class="line"><span class="comment"># 为该用户添加sudo权限</span></span><br><span class="line">sudo usermod -a -G adm wyx</span><br><span class="line">sudo usermod -a -G sudo wyx</span><br><span class="line"><span class="comment"># 检查自己在哪些组的命令是</span></span><br><span class="line">id -nG</span><br><span class="line"><span class="comment"># 添加到docker组</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$&#123;USER&#125;</span></span><br></pre></td></tr></table></figure><h3 id="32-安装docker-compose"><a class="markdownIt-Anchor" href="#32-安装docker-compose"></a> 3.2 安装Docker-compose</h3><p><a href="https://github.com/docker/compose/issues/6831">Docker-compose安装</a></p><p><a href="https://hub.docker.com/r/linuxserver/docker-compose">linuxserver/docker-compose</a></p><h2 id="4-安装redis"><a class="markdownIt-Anchor" href="#4-安装redis"></a> 4 安装Redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">docker pull redis </span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录</span></span><br><span class="line">mkdir -p /home/docker/redis/conf</span><br><span class="line">mkdir -p /home/docker/redis/data</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增配置文件</span></span><br><span class="line">cd /home/redis/conf</span><br><span class="line">vim redis.conf</span><br><span class="line">-----------------</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启远程访问</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span> </span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启数据持久化</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置访问密码</span></span><br><span class="line">requirepass 123456 </span><br><span class="line">------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建容器并启动</span></span><br><span class="line">docker run --name redis -p 6379:6379 -v /home/docker/redis/data:/data -v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用maclan 的方式启动</span></span><br><span class="line">docker run --name redis --n -p 6379:6379 -v /home/docker/redis/data:/data -v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h2 id="5-安装nacos"><a class="markdownIt-Anchor" href="#5-安装nacos"></a> 5 安装Nacos</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull chenfengwei/nacos:v1</span><br><span class="line">docker run --env MODE=standalone --name nacos -d -p 8848:8848 chenfengwei/nacos:v1</span><br><span class="line">docker cp nacos:/home/nacos /home/</span><br></pre></td></tr></table></figure><h2 id="6-安装mysql"><a class="markdownIt-Anchor" href="#6-安装mysql"></a> 6 安装Mysql</h2><h3 id="61-安装"><a class="markdownIt-Anchor" href="#61-安装"></a> 6.1 安装</h3><ol><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql/mysql-server</span><br></pre></td></tr></table></figure></li><li><p>运行mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql mysql/mysql-server</span><br></pre></td></tr></table></figure></li><li><p>查看密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs mysql</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure></li><li><p>进入mysql的命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li><p>修改root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;pwd123456&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="62-创建用户与授权"><a class="markdownIt-Anchor" href="#62-创建用户与授权"></a> 6.2 创建用户与授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;test&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"># 更改加密方式</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line"># 重新修改密码</span><br><span class="line"># navicat连接mysql报错1251解决方案</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"># 刷新</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="621-创建用户命令解释"><a class="markdownIt-Anchor" href="#621-创建用户命令解释"></a> 6.2.1 创建用户命令解释</h4><p><code>create user '&lt;userName&gt;'@'&lt;host&gt;' identified by '&lt;passWord&gt;';</code></p><ul><li><p>userName 代表你要创建的此数据库的新用户账号</p></li><li><p>host 代表访问权限，如下</p><ul><li><p>%代表通配所有host地址权限(可远程访问)</p></li><li><p>localhost为本地权限(不可远程访问)</p></li><li><p>指定特殊Ip访问权限 如10.138.106.102</p></li></ul></li><li><p>passWord 代表你要创建的此数据库的新用密码</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要创建的用户是testUser，密码是Haier...123,并且可远程访问</span></span><br><span class="line"><span class="comment"># 密码强度需要大小写及数字字母，否则会报密码强度不符合</span></span><br><span class="line"><span class="comment"># 用户名如果重复，会报错ERROR 1396 (HY000): Operation CREATE USER failed for &#x27;testUser&#x27;@&#x27;%&#x27;</span></span><br><span class="line">create user <span class="string">&#x27;testUser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;Haier...123&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="6211-查看用户"><a class="markdownIt-Anchor" href="#6211-查看用户"></a> 6.2.1.1 查看用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql系统数据库</span></span><br><span class="line">user mysql;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户的相关信息</span></span><br><span class="line">select host, user, authentication_string, plugin from user;</span><br></pre></td></tr></table></figure><h4 id="622-授权解释"><a class="markdownIt-Anchor" href="#622-授权解释"></a> 6.2.2 授权解释</h4><p><code>grant &lt;auth&gt; on &lt;databaseName&gt;.&lt;table&gt; to '&lt;userName&gt;'@'&lt;host&gt;;'</code></p><ul><li>auth 代表权限，如下<ul><li>all privileges 全部权限</li><li>select 查询权限</li><li>select,insert,update,delete 增删改查权限</li><li>select,[…]增…等权限</li></ul></li><li>databaseName 代表数据库名</li><li>table 代表具体表，如下<ul><li><code>*</code> 代表全部表</li><li>A,B 代表具体A,B表</li></ul></li><li>userName 代表用户名</li><li>host 代表访问权限，如下<ul><li>%代表通配所有host地址权限(可远程访问)</li><li>localhost为本地权限(不可远程访问)</li><li>指定特殊Ip访问权限 如10.138.106.102</li></ul></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋予test用户对test数据库area_code表增删改差权限</span></span><br><span class="line">grant select,insert,update,delete on test.area_code to <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="6221-查看权限"><a class="markdownIt-Anchor" href="#6221-查看权限"></a> 6.2.2.1 查看权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;#userName&#x27;@&#x27;#host&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash">userName 代表用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">host 代表访问权限，如下</span></span><br><span class="line"><span class="meta">%</span><span class="bash">代表通配所有host地址权限(可远程访问)</span></span><br><span class="line">localhost为本地权限(不可远程访问)</span><br><span class="line">指定特殊Ip访问权限 如10.138.106.102</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看的是testUser</span></span><br><span class="line">show grants for &#x27;testUser&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h5 id="6222-撤销权限"><a class="markdownIt-Anchor" href="#6222-撤销权限"></a> 6.2.2.2 撤销权限</h5><p><code>revoke &lt;auth&gt; on &lt;databaseName&gt;.&lt;table&gt; from '&lt;userName&gt;'@'&lt;host&gt;';</code></p><ul><li><p>auth 代表权限，如下</p><ul><li><p>all privileges 全部权限</p></li><li><p>select 查询权限</p></li><li><p>select,insert,update,delete 增删改查权限</p></li><li><p>select,[…]增…等权限</p></li></ul></li><li><p>databaseName 代表数据库名</p><ul><li>table 代表具体表，如下</li><li><code>*</code>代表全部表</li><li>A,B 代表具体A,B表</li></ul></li><li><p>userName 代表用户名</p></li><li><p>host 代表访问权限，如下</p><ul><li>%代表通配所有host地址权限(可远程访问)</li><li>localhost为本地权限(不可远程访问)</li><li>指定特殊Ip访问权限 如10.138.106.102</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要撤销testUser用户对b2b数据库中的area_code表的增删改差权限</span></span><br><span class="line">revoke select,insert,update,delete on b2b.area_code from &#x27;testUser&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看用户权限</span><br><span class="line">show grants for &#x27;testUser&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="63-修改mysql-默认字符集"><a class="markdownIt-Anchor" href="#63-修改mysql-默认字符集"></a> 6.3 修改MYSQL 默认字符集</h3><ol><li><p>查看字符集命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql01 bash</span><br><span class="line">mysql -uroot -ppwd123456</span><br><span class="line">use mysql;</span><br><span class="line">show variables like <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line"><span class="params">| Variable_name            |</span> Value                          <span class="params">|</span></span><br><span class="line"><span class="params">+--------------------------+--------------------------------+</span></span><br><span class="line"><span class="params">|</span> character_set_client     <span class="params">| latin1                         |</span></span><br><span class="line"><span class="params">| character_set_connection |</span> latin1                         <span class="params">|</span></span><br><span class="line"><span class="params">|</span> character_set_database   <span class="params">| utf8mb4                        |</span></span><br><span class="line"><span class="params">| character_set_filesystem |</span> binary                         <span class="params">|</span></span><br><span class="line"><span class="params">|</span> character_set_results    <span class="params">| latin1                         |</span></span><br><span class="line"><span class="params">| character_set_server     |</span> utf8mb4                        <span class="params">|</span></span><br><span class="line"><span class="params">|</span> character_set_system     <span class="params">| utf8                           |</span></span><br><span class="line"><span class="params">| character_sets_dir       |</span> /usr/share/mysql-<span class="number">8.0</span>/charsets/ <span class="params">|</span></span><br><span class="line"><span class="params">+--------------------------+--------------------------------+</span></span><br></pre></td></tr></table></figure></li><li><p>修改my.cnf</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4 </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure></li></ol><h3 id="64-docker容器参数启动mysql"><a class="markdownIt-Anchor" href="#64-docker容器参数启动mysql"></a> 6.4 docker容器参数启动Mysql</h3><ol><li>创建容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_USER=&quot;admin&quot; -e MYSQL_PASSWORD=&quot;123456&quot; -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; -e MYSQL_ROOT_HOST=% --restart=always --name mysql mysql/mysql-server --character-set-server=utf8 --collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash </span><br><span class="line">mysql -uroot -ppwd123456</span><br><span class="line">use mysql;</span><br><span class="line"><span class="meta">#</span><span class="bash"> navicat连接mysql报错1251解决方案</span></span><br><span class="line">ALTER USER &#x27;admin&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="65-mysql挂载资料卷"><a class="markdownIt-Anchor" href="#65-mysql挂载资料卷"></a> 6.5 MySql挂载资料卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意:需要先创建/home/docker/mysql/config/my.cnf文件和/home/docker/mysql/data文件夹</span></span><br><span class="line">mkdir -p /home/docker/mysql/config</span><br><span class="line">mkdir -p /home/docker/mysql/data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前容器正在运行</span></span><br><span class="line">docker cp mysql:/etc/my.cnf /home/docker/mysql/config/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或使用vim创建</span></span><br><span class="line">vim config/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server = utf8</span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL8默认的认证插件是caching_sha2_password，很多客户端都不支持，可将默认的认证插件修改为mysql_native_password，在配置文件中配置default_authentication_plugin=mysql_native_password。</span></span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">character-set-server=utf8</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql挂载资料卷</span></span><br><span class="line">docker run -d -p 3306:3306 -v /home/docker/mysql/config/my.cnf:/etc/my.cnf -v /home/docker/mysql/data:/var/lib/mysql -e MYSQL_USER=&quot;admin&quot; -e MYSQL_PASSWORD=&quot;123456&quot; -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; -e MYSQL_ROOT_HOST=% --restart=always --name mysql mysql/mysql-server --character-set-server=utf8 --collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><h2 id="7-安装es"><a class="markdownIt-Anchor" href="#7-安装es"></a> 7 安装ES</h2><p>镜像文档：<a href="https://hub.docker.com/r/arm64v8/elasticsearch">https://hub.docker.com/r/arm64v8/elasticsearch</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像：</span></span><br><span class="line">docker pull arm64v8/elasticsearch:7.11.1 (注意版本号根据文档上的，没有latest默认版本)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建网络：</span></span><br><span class="line">docker network create somenetwork 便于kibana等接入</span><br><span class="line"><span class="meta">#</span><span class="bash"> run镜像：</span></span><br><span class="line">docker run -d --name es --net somenetwork -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; -e &quot;discovery.type=single-node&quot; arm64v8/elasticsearch:7.11.1 (Xms和Xmx根据实际设置，一般设置主存的一半)</span><br></pre></td></tr></table></figure><h2 id="8-安装mq"><a class="markdownIt-Anchor" href="#8-安装mq"></a> 8 安装MQ</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装插件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先执行docker ps 拿到当前的镜像ID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装插件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ctrl+p+q退出当前容器</span></span><br><span class="line">docker exec -it 镜像ID /bin/bash</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">用户名和密码默认都是guest</span><br></pre></td></tr></table></figure><h3 id="1-stats-in-management-ui-are-disabled-on-this-node"><a class="markdownIt-Anchor" href="#1-stats-in-management-ui-are-disabled-on-this-node"></a> 1 Stats in management UI are disabled on this node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入rabbitmq容器</span></span><br><span class="line">docker exec -it &#123;rabbitmq容器名称或者id&#125; /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器后，<span class="built_in">cd</span>到以下路径</span></span><br><span class="line">cd /etc/rabbitmq/conf.d/</span><br><span class="line"><span class="meta">#</span><span class="bash">修改 management_agent.disable_metrics_collector = <span class="literal">false</span></span></span><br><span class="line">echo management_agent.disable_metrics_collector = false &gt; management_agent.disable_metrics_collector.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash">重启rabbitmq容器</span></span><br><span class="line">docker retart &#123;rabbitmq容器id&#125;</span><br></pre></td></tr></table></figure><h3 id="2-web-ui界面无法访问-同样遇到"><a class="markdownIt-Anchor" href="#2-web-ui界面无法访问-同样遇到"></a> 2 Web-UI界面无法访问 (同样遇到)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &#123;rabbitmq容器名称或者id&#125; rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta">#</span><span class="bash">重启rabbitmq容器</span></span><br><span class="line">docker retart &#123;rabbitmq容器id&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO文件拷贝剪切删除</title>
      <link href="/2021/07/07/JavaIO%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E6%88%96%E5%89%AA%E5%88%87/"/>
      <url>/2021/07/07/JavaIO%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E6%88%96%E5%89%AA%E5%88%87/</url>
      
        <content type="html"><![CDATA[<h1 id="一-创建写入文件"><a class="markdownIt-Anchor" href="#一-创建写入文件"></a> 一 创建写入文件</h1><table><thead><tr><th>方法名</th><th></th></tr></thead><tbody><tr><td>Files.newBufferedReader()</td><td>Java 8</td></tr><tr><td>Files.write()</td><td>Java 7 推荐</td></tr><tr><td>PrintWriter</td><td>一行一行写入</td></tr><tr><td>File.createNewFile</td><td></td></tr><tr><td>FileOutputStream.write</td><td>管道流,古老但灵活</td></tr></tbody></table><ul><li>Files.newBufferedReader()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Path path=Paths.get(<span class="string">&quot;D:\\delete\\123\\test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (BufferedWriter bufferedWriter = Files.newBufferedWriter(path, StandardCharsets.UTF_8))&#123;</span><br><span class="line">    bufferedWriter.write(<span class="string">&quot;hello word&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> (BufferedWriter bufferedWriter = Files.newBufferedWriter(path, StandardCharsets.UTF_8,StandardOpenOption.APPEND))&#123;</span><br><span class="line">    bufferedWriter.write(<span class="string">&quot;追加&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Files.write()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Path path=Paths.get(<span class="string">&quot;D:\\delete\\123\\test.txt&quot;</span>);</span><br><span class="line">Files.write(path,<span class="string">&quot;hello world&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">Files.write(path,<span class="string">&quot;hello world&quot;</span>.getBytes(StandardCharsets.UTF_8),StandardOpenOption.APPEND);</span><br></pre></td></tr></table></figure><ul><li>PrintWriter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String fileName = <span class="string">&quot;D:\\delete\\123\\test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (PrintWriter writer=<span class="keyword">new</span> PrintWriter(fileName,<span class="string">&quot;UTF-8&quot;</span>))&#123;</span><br><span class="line">    writer.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>File.createNewFile</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String fileName = <span class="string">&quot;D:\\delete\\123\\test.txt&quot;</span>;</span><br><span class="line">File file=<span class="keyword">new</span> File(fileName);</span><br><span class="line">file.createNewFile();</span><br><span class="line"><span class="keyword">try</span> (FileWriter writer=<span class="keyword">new</span> FileWriter(file))&#123; </span><br><span class="line">    writer.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FileOutputStream.write</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String fileName = <span class="string">&quot;D:\\delete\\123\\test.txt&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (FileOutputStream fos =<span class="keyword">new</span> FileOutputStream(fileName);</span><br><span class="line">     OutputStreamWriter ios =<span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">     BufferedWriter writer=<span class="keyword">new</span> BufferedWriter(ios)</span><br><span class="line">    )&#123;</span><br><span class="line">    writer.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    writer.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-从文件中读取数据"><a class="markdownIt-Anchor" href="#二-从文件中读取数据"></a> 二 从文件中读取数据</h1><ul><li><code>Scanner</code>(Java 1.5) 按行读数据及String、Int类型等按分隔符读数据。</li><li><code>Files.lines</code>, 返回<code>Stream</code> 流式数据处理，按行读取</li><li><code>Files.readAllLines</code>, 返回<code>List&lt;String&gt;</code></li><li><code>Files.readString</code>, 读取<code>String</code>(Java 11), 文件最大 2G.</li><li><code>Files.readAllBytes</code>, 读取<code>byte[]</code>(Java 7), 文件最大 2G.</li><li><code>BufferedReader</code>, 经典方式 (Java 1.1 -&gt; forever)</li></ul><h2 id="1scanner"><a class="markdownIt-Anchor" href="#1scanner"></a> 1.Scanner</h2><blockquote><p>第一种方式是Scanner，从JDK1.5开始提供的API，特点是可以按行读取、按分割符去读取文件数据，既可以读取String类型，也可以读取Int类型、Long类型等基础数据类型的数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReadFile1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="comment">//文件内容：Hello World|Hello Zimug</span></span><br><span class="line">   String fileName = <span class="string">&quot;D:\data\test\newFile4.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> (Scanner sc = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">      <span class="keyword">while</span> (sc.hasNextLine()) &#123;  <span class="comment">//按行读取字符串</span></span><br><span class="line">         String line = sc.nextLine();</span><br><span class="line">         System.out.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> (Scanner sc = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">      sc.useDelimiter(<span class="string">&quot;\|&quot;</span>);  <span class="comment">//分隔符</span></span><br><span class="line">      <span class="keyword">while</span> (sc.hasNext()) &#123;   <span class="comment">//按分隔符读取字符串</span></span><br><span class="line">         String str = sc.next();</span><br><span class="line">         System.out.println(str);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//sc.hasNextInt() 、hasNextFloat() 、基础数据类型等等等等。</span></span><br><span class="line">   <span class="comment">//文件内容：1|2</span></span><br><span class="line">   fileName = <span class="string">&quot;D:\data\test\newFile5.txt&quot;</span>;</span><br><span class="line">   <span class="keyword">try</span> (Scanner sc = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">      sc.useDelimiter(<span class="string">&quot;\|&quot;</span>);  <span class="comment">//分隔符</span></span><br><span class="line">      <span class="keyword">while</span> (sc.hasNextInt()) &#123;   <span class="comment">//按分隔符读取Int</span></span><br><span class="line">          <span class="keyword">int</span> intValue = sc.nextInt();</span><br><span class="line">         System.out.println(intValue);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2fileslines"><a class="markdownIt-Anchor" href="#2fileslines"></a> 2.Files.lines</h2><blockquote><p>按行处理数据文件的内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReadFile2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   String fileName = <span class="string">&quot;D:\data\test\newFile.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 读取文件内容到Stream流中，按行读取</span></span><br><span class="line">   Stream&lt;String&gt; lines = Files.lines(Paths.get(fileName));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 随机行顺序进行数据处理</span></span><br><span class="line">   lines.forEach(ele -&gt; &#123;</span><br><span class="line">      System.out.println(ele);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>forEach获取Stream流中的行数据不能保证顺序，但速度快。如果你想按顺序去处理文件中的行数据，可以使用forEachOrdered，但处理效率会下降。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按文件行顺序进行处理</span></span><br><span class="line">lines.forEachOrdered(System.out::println);</span><br></pre></td></tr></table></figure><p>或者利用CPU多和的能力，进行数据的并行处理parallel()，适合比较大的文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按文件行顺序进行处理</span></span><br><span class="line">lines.parallel().forEachOrdered(System.out::println);</span><br></pre></td></tr></table></figure><p>也可以把<code>Stream&lt;String&gt;</code>转换成<code>List&lt;String&gt;</code>,但是要注意这意味着你要将所有的数据一次性加载到内存，要注意<a href="http://www.zimug.com/tag/java">java</a>.lang.OutOfMemoryError</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换成List&lt;String&gt;, 要注意java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line">List&lt;String&gt; collect = lines.collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="3filesreadalllines"><a class="markdownIt-Anchor" href="#3filesreadalllines"></a> 3.Files.readAllLines</h2><p>这种方法仍然是java8 为我们提供的，如果我们不需要<code>Stream&lt;String&gt;</code>,我们想直接按行读取文件获取到一个<code>List&lt;String&gt;</code>，就采用下面的方法。同样的问题：这意味着你要将所有的数据一次性加载到内存，要注意java.lang.OutOfMemoryError</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void testReadFile3() throws IOException &#123;</span><br><span class="line">   String fileName = &quot;D:\data\test\newFile3.txt&quot;;</span><br><span class="line"></span><br><span class="line">   // 转换成List&lt;String&gt;, 要注意java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">   List&lt;String&gt; lines = Files.readAllLines(Paths.get(fileName),</span><br><span class="line">               StandardCharsets.UTF_8);</span><br><span class="line">   lines.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4filesreadstringjdk-11"><a class="markdownIt-Anchor" href="#4filesreadstringjdk-11"></a> 4.Files.readString(JDK 11)</h2><p>从 java11开始，为我们提供了一次性读取一个文件的方法。文件不能超过2G，同时要注意你的服务器及JVM内存。<strong>这种方法适合快速读取小文本文件。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void testReadFile4() throws IOException &#123;</span><br><span class="line">   String fileName = &quot;D:\data\test\newFile3.txt&quot;;</span><br><span class="line"></span><br><span class="line">   // java 11 开始提供的方法，读取文件不能超过2G，与你的内存息息相关</span><br><span class="line">   //String s = Files.readString(Paths.get(fileName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5filesreadallbytes"><a class="markdownIt-Anchor" href="#5filesreadallbytes"></a> 5.Files.readAllBytes()</h2><p>如果你没有JDK11（readAllBytes()始于JDK7）,仍然想一次性的快速读取一个文件的内容转为String，该怎么办？先将数据读取为二进制数组，然后转换成String内容。<strong>这种方法适合在没有JDK11的请开给你下，快速读取小文本文件。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void testReadFile5() throws IOException &#123;</span><br><span class="line">   String fileName = &quot;D:\data\test\newFile3.txt&quot;;</span><br><span class="line"></span><br><span class="line">   //如果是JDK11用上面的方法，如果不是用这个方法也很容易</span><br><span class="line">   byte[] bytes = Files.readAllBytes(Paths.get(fileName));</span><br><span class="line"></span><br><span class="line">   String content = new String(bytes, StandardCharsets.UTF_8);</span><br><span class="line">   System.out.println(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6经典管道流的方式"><a class="markdownIt-Anchor" href="#6经典管道流的方式"></a> 6.经典管道流的方式</h2><p>最后一种就是经典的管道流的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void testReadFile6() throws IOException &#123;</span><br><span class="line">   String fileName = &quot;D:\data\test\newFile3.txt&quot;;</span><br><span class="line"></span><br><span class="line">   // 带缓冲的流读取，默认缓冲区8k</span><br><span class="line">   try (BufferedReader br = new BufferedReader(new FileReader(fileName)))&#123;</span><br><span class="line">      String line;</span><br><span class="line">      while ((line = br.readLine()) != null) &#123;</span><br><span class="line">         System.out.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //java 8中这样写也可以</span><br><span class="line">   try (BufferedReader br = Files.newBufferedReader(Paths.get(fileName)))&#123;</span><br><span class="line">      String line;</span><br><span class="line">      while ((line = br.readLine()) != null) &#123;</span><br><span class="line">         System.out.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式可以通过管道流嵌套的方式，组合使用，比较灵活。比如我们<br>想从文件中读取java Object就可以使用下面的代码，前提是文件中的数据是ObjectOutputStream写入的数据，才可以用ObjectInputStream来读取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try (FileInputStream fis = new FileInputStream(fileName);</span><br><span class="line">     ObjectInputStream ois = new ObjectInputStream(fis))&#123;</span><br><span class="line">   ois.readObject();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id><a class="markdownIt-Anchor" href="#"></a> </h1><h1 id="三-文件复制剪切重命名"><a class="markdownIt-Anchor" href="#三-文件复制剪切重命名"></a> 三 文件复制,剪切,重命名</h1><h2 id="1传统文件复制"><a class="markdownIt-Anchor" href="#1传统文件复制"></a> 1.传统文件复制</h2><blockquote><p>缺点:文件强行覆盖对使用者无感知</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">&quot;/home/a.text&quot;</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">&quot;/home/b.text&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (FileInputStream in = <span class="keyword">new</span> FileInputStream(file1)</span><br><span class="line">     ; FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file2)) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">while</span> ((length=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,length);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2nio文件复制与重命名推荐"><a class="markdownIt-Anchor" href="#2nio文件复制与重命名推荐"></a> 2.NIO文件复制与重命名(推荐)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Path formFile = Paths.get(<span class="string">&quot;/home/a.text&quot;</span>);</span><br><span class="line">Path toFile = Paths.get(<span class="string">&quot;/home/b.text&quot;</span>);</span><br><span class="line"><span class="comment">// 源文件不存在会抛出异常,目标文件不存在也会抛出异常</span></span><br><span class="line">Files.copy(formFile, toFile);</span><br><span class="line"><span class="comment">// 如果目标文件已经存在就直接覆盖</span></span><br><span class="line">Files.copy(formFile, toFile, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连文件属性也一起拷贝</span></span><br><span class="line">CopyOption[] options = &#123;StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES&#125;;</span><br><span class="line">Files.copy(formFile, toFile, options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件重命名</span></span><br><span class="line">Files.move(formFile, toFile, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好的文件重命名</span></span><br><span class="line"><span class="comment">// 兼容性更好</span></span><br><span class="line">Files.move(formFile, formFile.resolveSibling(<span class="string">&quot;b.text&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="3-nio文件剪切"><a class="markdownIt-Anchor" href="#3-nio文件剪切"></a> 3. NIO文件剪切</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path formFile = Paths.get(<span class="string">&quot;/home/a.text&quot;</span>);</span><br><span class="line">Path anotherDir = Paths.get(<span class="string">&quot;/home/user/&quot;</span>);</span><br><span class="line"><span class="comment">// 文件剪切</span></span><br><span class="line">Files.createDirectories(anotherDir);</span><br><span class="line">Files.move(formFile, anotherDir.resolve(formFile.getFileName()), StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure><h1 id="四-文件删除文件夹删除"><a class="markdownIt-Anchor" href="#四-文件删除文件夹删除"></a> 四 文件删除,文件夹删除</h1><blockquote><p>NIO使用Path 代表文件或者文件夹</p><p>传统IO使用File 代表文件或者文件夹</p></blockquote><h2 id="1-删除文件或者空文件夹"><a class="markdownIt-Anchor" href="#1-删除文件或者空文件夹"></a> 1. 删除文件或者空文件夹</h2><table><thead><tr><th></th><th>成功返回值</th><th>是否能判断文件夹不存在导致失败</th><th>是否能判断文件夹位空导致失败</th><th>备注</th></tr></thead><tbody><tr><td>File.delete()</td><td>true</td><td>不能(返回false)</td><td>不能(返回false)</td><td>传统不推荐</td></tr><tr><td>File.deleteOnExit()</td><td>void</td><td>不能 但存在就不会执行删除</td><td>不能返回void</td><td>不适用,有坑</td></tr><tr><td>Files.delete(Path path)</td><td>void</td><td>NoSuchFileException</td><td>DirectoryNotEmptyException</td><td>NIO推荐</td></tr><tr><td>Files.deleteExists(Path path)</td><td>true</td><td>false</td><td>DirectoryNotEmptyException</td><td>NIO</td></tr></tbody></table><h3 id="1传统io"><a class="markdownIt-Anchor" href="#1传统io"></a> 1.传统IO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件删除</span></span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">&quot;/home/a.text&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> delete = file1.delete();</span><br></pre></td></tr></table></figure><h3 id="2-nio"><a class="markdownIt-Anchor" href="#2-nio"></a> 2. NIO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件删除,可以抛出异常</span></span><br><span class="line">Path formFile = Paths.get(<span class="string">&quot;/home/a.text&quot;</span>);</span><br><span class="line">Files.delete(formFile);</span><br></pre></td></tr></table></figure><h2 id="2-删除非空文件夹或者某一些符合条件的文件"><a class="markdownIt-Anchor" href="#2-删除非空文件夹或者某一些符合条件的文件"></a> 2. 删除非空文件夹或者某一些符合条件的文件</h2><ul><li>walkFileTree与FileVisitor</li></ul><blockquote><p>可以通过BasicFileAttributes进行条件删除</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String pathname = <span class="string">&quot;D:\\delete\\123&quot;</span>;</span><br><span class="line">Path path = Paths.get(pathname);</span><br><span class="line">Files.walkFileTree(path, <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">    <span class="comment">// 先遍历删除文件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Files.delete(file);</span><br><span class="line">        System.out.printf(<span class="string">&quot;删除文件 :$s:n&quot;</span>,file);</span><br><span class="line">        <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后遍历删除目录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 此时文件已经被删除了,这时候文件夹是空的</span></span><br><span class="line">        Files.delete(dir);</span><br><span class="line">        System.out.printf(<span class="string">&quot;删除文件 :$s:n&quot;</span>,dir);</span><br><span class="line">        <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Files.walk</li></ul><blockquote><p>排序的目的是文件排在目录前面,先去删除文件,再去删除目录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String pathname = <span class="string">&quot;D:\\delete\\123&quot;</span>;</span><br><span class="line">Path path = Paths.get(pathname);</span><br><span class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; walk = Files.walk(path))&#123;</span><br><span class="line">    walk.sorted(Comparator.reverseOrder()).forEach(path1 -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.delete(path1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归listFiles</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String pathname = <span class="string">&quot;D:\\delete\\123&quot;</span>;</span><br><span class="line">delete(<span class="keyword">new</span> File(pathname));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Arrays.stream(files).forEach(file1 -&gt; delete(file));</span><br><span class="line">    &#125;</span><br><span class="line">    file.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-创建文件夹"><a class="markdownIt-Anchor" href="#五-创建文件夹"></a> 五  创建文件夹</h1><h2 id="1传统api创建文件夹方式"><a class="markdownIt-Anchor" href="#1传统api创建文件夹方式"></a> 1.传统API创建文件夹方式</h2><p>Java传统的IO API种使用<code>java.io.File</code>类中的<code>file.mkdir()</code>和<code>file.mkdirs()</code>方法创建文件夹</p><ul><li><code>file.mkdir()</code>创建文件夹成功返回true，失败返回false。如果被创建文件夹的父文件夹不存在也返回false.没有异常抛出。</li><li><code>file.mkdirs()</code>创建文件夹连同该文件夹的父文件夹，如果创建成功返回true，创建失败返回false。创建失败同样没有异常抛出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateDir1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//“D:\data111”目录现在不存在</span></span><br><span class="line">   String dirStr = <span class="string">&quot;D:\data111\test&quot;</span>;</span><br><span class="line">   File directory = <span class="keyword">new</span> File(dirStr);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//mkdir</span></span><br><span class="line">   <span class="keyword">boolean</span> hasSucceeded = directory.mkdir();</span><br><span class="line">   System.out.println(<span class="string">&quot;创建文件夹结果（不含父文件夹）：&quot;</span> + hasSucceeded);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//mkdirs</span></span><br><span class="line">   hasSucceeded = directory.mkdirs();</span><br><span class="line">   System.out.println(<span class="string">&quot;创建文件夹结果（包含父文件夹）：&quot;</span> + hasSucceeded);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：使用mkdir创建失败，使用mkdirs创建成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建文件夹结果（不含父文件夹）：<span class="keyword">false</span></span><br><span class="line">创建文件夹结果（包含父文件夹）：<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>大家可以看到，mkdir和mkdirs虽然可以创建文件，但是它们在异常处理的环节做的非常不友好。创建失败之后统一返回false，创建失败的原因没有说明。是父文件夹不存在所以创建失败？还是文件夹已经存在所以创建失败？还是因为磁盘IO原因导致创建文件夹失败？</p><h2 id="2-java-nio创建文件夹"><a class="markdownIt-Anchor" href="#2-java-nio创建文件夹"></a> 2. Java NIO创建文件夹</h2><p>为了解决传统IO创建文件夹中异常失败处理问题不明确的问题，在Java的NIO中进行了改进。</p><h3 id="21-filescreatedirectory创建文件夹"><a class="markdownIt-Anchor" href="#21-filescreatedirectory创建文件夹"></a> 2.1. <code>Files.createDirectory</code>创建文件夹</h3><ul><li>如果被创建文件夹的父文件夹不存在，则抛出<code>NoSuchFileException</code>.</li><li>如果被创建的文件夹已经存在，则抛出<code>FileAlreadyExistsException</code>.</li><li>如果因为磁盘IO出现异常，则抛出<code>IOException</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">&quot;D:\data222\test&quot;</span>);</span><br><span class="line">Path pathCreate = Files.createDirectory(path);</span><br></pre></td></tr></table></figure><h3 id="22filescreatedirectories创建文件夹及其父文件夹"><a class="markdownIt-Anchor" href="#22filescreatedirectories创建文件夹及其父文件夹"></a> 2.2.<code>Files.createDirectories</code>创建文件夹及其父文件夹</h3><ul><li>如果被创建文件夹的父文件夹不存在，就创建它</li><li>如果被创建的文件夹已经存在，就是用已经存在的文件夹，不会重复创建，没有异常抛出</li><li>如果因为磁盘IO出现异常，则抛出<code>IOException</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">&quot;D:\data222\test&quot;</span>);</span><br><span class="line">Path pathCreate = Files.createDirectorys(path);</span><br></pre></td></tr></table></figure><p>注意：NIO的API创建的文件夹返回值是Path，这样方便我们在创建完成文件夹之后继续向文件夹里面写入文件数据等操作。比传统IO只返回一个boolean值要好得多。</p>]]></content>
      
      
      <categories>
          
          <category> NIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件拷贝 </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装mysql</title>
      <link href="/2021/07/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2021/07/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派docker-安装mysql"><a class="markdownIt-Anchor" href="#树莓派docker-安装mysql"></a> 树莓派Docker 安装mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉镜像</span></span><br><span class="line">docker pull hypriot/rpi-mysql:latest</span><br><span class="line"><span class="comment"># 复制配置</span></span><br><span class="line">docker cp  mysql:/etc/mysql /home/docker/mysql</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rm -f mysql</span><br><span class="line"><span class="comment"># 启动镜像并且映射</span></span><br><span class="line">sudo docker run -p 3307:3306 --name mysql \</span><br><span class="line">    -v /home/mysql/mysql:/etc/mysql \</span><br><span class="line">    -v /home/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">    -v /home/mysql/data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    -d hypriot/rpi-mysql</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 创建远程登录用户和权限设置</span></span><br><span class="line">use mysql;</span><br><span class="line">CREATE USER <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">ALTER USER <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">GRANT ALL ON *.* TO <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 刷新root</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件服务设计</title>
      <link href="/2021/07/03/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/07/03/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="文件服务"><a class="markdownIt-Anchor" href="#文件服务"></a> <strong>文件服务</strong></h1><h2 id="1-需求背景"><a class="markdownIt-Anchor" href="#1-需求背景"></a> 1. 需求背景</h2><p>文件的上传、下载功能是软件系统常见的功能，包括上传文件、下载文件、查看文件等。例如：电商系统中需要上传商品的图片、广告视频，办公系统中上传附件，社交类系统中上传用户头像等等。</p><p>文件上传下载大致流程为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703223532.png" alt="1585711616132"></p><p>这种方式开发起来简单、直接，但是有一些问题：</p><ul><li>重复开发： 比如对接某个OSS(Object Storage Service,简称OSS)服务商， 每个应用都需要对接该服务商，重复工作</li><li>扩展性差： 当需要切换服务商时，所有涉及到的应用都需要修改、测试、上线</li></ul><p>基于以上原因，微服务体系下的应用系统一般都有一个文件服务，用于统一管理文件上传下载等功能，大型电商系统甚至有独立的文件、图片、视频服务。此时架构体系变为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703223617.png" alt="1585712078385"></p><p>这种方式提供一个独立的文件微服务，该微服务向应用系统提供统一的上传、下载、查看接口，应用系统调用方式相同，并且屏蔽了底层对外调用OSS服务的接口，即使以后迁移OSS服务商，应用层面的系统也不需要变动。</p><p>这种模式也有一个小问题，比如我们调用了阿里云的OSS服务，如果所有的下载、查看功能都调用文件服务，那么文件服务的网络流量将会有非常大的压力。所以常用的做法是这样的：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703223622.png" alt="1585712407005"></p><h2 id="2-核心功能"><a class="markdownIt-Anchor" href="#2-核心功能"></a> 2. 核心功能</h2><p>文件服务的核心功能是： <strong>上传</strong>和<strong>下载</strong>， 另一方面，除了这两个核心功能，还需要其他非功能性要求：</p><ul><li>可用性：作为基础性服务，可用性要求非常高</li><li>配置性：OSS服务商配置、上传下载方式等内容</li><li>扩展性：能方便的进行扩展，如添加新的OSS服务商等</li></ul><p>本课程的文件服务提供两种类型的服务：</p><p>​1、面对应用系统的通用附件服务</p><p>​提供统一的上传接口，屏蔽底层的存储方案（本地存储、FastDFS、阿里云存储、七牛云存储等），可独立运行服务</p><p>​2、面对用户的网盘服务</p><p>​有文件夹和文件的概念，支持大文件分片上传、合并</p><h2 id="3-存储策略"><a class="markdownIt-Anchor" href="#3-存储策略"></a> 3. 存储策略</h2><h3 id="31-本地存储"><a class="markdownIt-Anchor" href="#31-本地存储"></a> 3.1 本地存储</h3><p>本地存储，即将上传的文件存储在本地磁盘，并通过本地提供的Nginx服务来对外提供文件的下载和查看等功能。</p><h3 id="32-fastdfs存储"><a class="markdownIt-Anchor" href="#32-fastdfs存储"></a> 3.2 FastDFS存储</h3><p>FastDFS存储，即将上传的文件存储在FastDFS分布式文件存储系统中，并通过FastDFS结合Nginx提供的服务来对外提供文件的下载和查看等功能。</p><h3 id="33-云存储"><a class="markdownIt-Anchor" href="#33-云存储"></a> 3.3 云存储</h3><p>云存储，即将上传的文件存储在第三方云平台上，例如阿里云OSS、七牛云OSS服务等，并通过这些第三方提供的OSS服务来对外提供文件的下载和查看等功能。</p><h2 id="4-技术设计"><a class="markdownIt-Anchor" href="#4-技术设计"></a> 4. 技术设计</h2><p>本课程的文件服务以品达通用权限系统为脚手架，在此基础之上进行开发。为了能够提供统一的上传接口从而屏蔽底层的存储方案，需要进行相应的接口设计：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703223626.png" alt="image-20200424152528386"></p><p>FileStrategy：文件策略顶层接口</p><p>AbstractFileStrategy：抽象文件策略处理类，实现FileStrategy接口。实现主要的文件上传处理流程，但是真正上传的过程需要其子类来完成。</p><p>LocalServiceImpl：具体的文件策略处理类，是AbstractFileStrategy的子类，负责将上传的文件保存在本地磁盘。</p><p>FastDfsServiceImpl：具体的文件策略处理类，是AbstractFileStrategy的子类，负责将上传的文件保存到FastDFS上。</p><p>AliServiceImpl：具体的文件策略处理类，是AbstractFileStrategy的子类，负责将上传的文件保存到阿里云OSS上。</p><p><code>注意：本课程提供的存储策略有以上三种方式（即本地存储、FastDFS存储、阿里云OSS存储），后期也可以根据需要扩展其他的存储策略。这种设计方式其实就是策略模式的一个具体应用。</code></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 代理设置</title>
      <link href="/2021/07/03/Git-%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/07/03/Git-%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="仅为-github-设置代理"><a class="markdownIt-Anchor" href="#仅为-github-设置代理"></a> 仅为 GitHub 设置代理</h1><h2 id="git-代理"><a class="markdownIt-Anchor" href="#git-代理"></a> git 代理</h2><p>设置 <code>git config --global http.https://github.com.proxy socks5://127.0.0.1:7890</code><br>设置完成后, <code>~/.gitconfig</code> 文件中会增加以下条目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http &quot;https://github.com&quot;]</span><br><span class="line">    proxy = socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h2 id="ssh-代理"><a class="markdownIt-Anchor" href="#ssh-代理"></a> ssh 代理</h2><p>修改 <code>~/.ssh/config</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ProxyCommand connect -S 127.0.0.1:7890 -a none %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname github.com</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 注意修改路径为你的路径</span></span><br><span class="line">  IdentityFile &quot;C:\Users\One\.ssh\id_rsa&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line"></span><br><span class="line">Host ssh.github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 443</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 注意修改路径为你的路径</span></span><br><span class="line">  IdentityFile &quot;C:\Users\One\.ssh\id_rsa&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="https://gist.github.com/chenshengzhi/07e5177b1d97587d5ca0acc0487ad677">git ssh 代理设置</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools 入门</title>
      <link href="/2021/07/02/Drools-%E5%85%A5%E9%97%A8/"/>
      <url>/2021/07/02/Drools-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一-规则引擎概述"><a class="markdownIt-Anchor" href="#一-规则引擎概述"></a> 一、规则引擎概述</h1><h2 id="11-什么是规则引擎"><a class="markdownIt-Anchor" href="#11-什么是规则引擎"></a> 1.1 什么是规则引擎</h2><blockquote><p><strong>规则引擎</strong>，全称为<strong>业务规则管理系统</strong>，英文名为BRMS(即Business Rule Management System)。规则引擎的主要思想是将应用程序中的业务决策部分分离出来，并使用预定义的语义模块编写业务决策（业务规则），由用户或开发者在需要时进行配置、管理。</p><p>需要注意的是规则引擎并不是一个具体的技术框架，而是指的一类系统，即业务规则管理系统。目前市面上具体的规则引擎产品有：drools、VisualRules、iLog等。</p><p>规则引擎实现了将业务决策从应用程序代码中分离出来，接收数据输入，解释业务规则，并根据业务规则做出业务决策。规则引擎其实就是一个输入输出平台。</p><p>系统中引入规则引擎后，业务规则不再以程序代码的形式驻留在系统中，取而代之的是处理规则的规则引擎，业务规则存储在规则库中，完全独立于程序。业务人员可以像管理数据一样对业务规则进行管理，比如查询、添加、更新、统计、提交业务规则等。业务规则被加载到规则引擎中供应用系统调用。</p></blockquote><h2 id="12-使用规则引擎的优势"><a class="markdownIt-Anchor" href="#12-使用规则引擎的优势"></a> 1.2 使用规则引擎的优势</h2><ul><li><p>业务规则与系统代码分离，实现业务规则的集中管理</p></li><li><p>在不重启服务的情况下可随时对业务规则进行扩展和维护</p></li><li><p>可以动态修改业务规则，从而快速响应需求变更</p></li><li><p>规则引擎是相对独立的，只关心业务规则，使得业务分析人员也可以参与编辑、维护系统的业务规则</p></li><li><p>减少了硬编码业务规则的成本和风险</p></li><li><p>使用规则引擎提供的规则编辑工具，使复杂的业务规则实现变得的简单</p></li></ul><h2 id="13-规则引擎应用场景"><a class="markdownIt-Anchor" href="#13-规则引擎应用场景"></a> 1.3 规则引擎应用场景</h2><p>对于一些存在比较复杂的业务规则并且业务规则会频繁变动的系统比较适合使用规则引擎，如下：</p><ul><li><p>风险控制系统----风险贷款、风险评估</p></li><li><p>反欺诈项目----银行贷款、征信验证</p></li><li><p>策平台系统----财务计算</p></li><li><p>促销平台系统----满减、打折、加价购</p></li></ul><h2 id="14-drools介绍"><a class="markdownIt-Anchor" href="#14-drools介绍"></a> 1.4 Drools介绍</h2><p>drools是一款由JBoss组织提供的基于Java语言开发的开源规则引擎，可以将复杂且多变的业务规则从硬编码中解放出来，以规则脚本的形式存放在文件或特定的存储介质中(例如存放在数据库中)，使得业务规则的变更不需要修改项目代码、重启服务器就可以在线上环境立即生效。</p><p>drools官网地址：<a href="https://drools.org/">https://drools.org/</a></p><p>drools源码下载地址：<a href="https://github.com/kiegroup/drools">https://github.com/kiegroup/drools</a></p><p>在项目中使用drools时，即可以单独使用也可以整合spring使用。如果单独使用只需要导入如下maven坐标即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702140230.png" alt="image-20210702140230783"></p><h2 id="15-规则引擎构成"><a class="markdownIt-Anchor" href="#15-规则引擎构成"></a> 1.5 规则引擎构成</h2><p>drools规则引擎由以下三部分构成：</p><ul><li>Working Memory（工作内存）</li><li>Rule Base（规则库）</li><li>Inference Engine（推理引擎）</li></ul><p>其中Inference Engine（推理引擎）又包括：</p><ul><li>Pattern Matcher（匹配器）</li><li>Agenda(议程)</li><li>Execution Engine（执行引擎）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702140323.png" alt="image-20210702140323147"></p><h2 id="16-相关概念说明"><a class="markdownIt-Anchor" href="#16-相关概念说明"></a> 1.6 相关概念说明</h2><p><strong>Working Memory</strong>：工作内存，drools规则引擎会从Working Memory中获取数据并和规则文件中定义的规则进行模式匹配，所以我们开发的应用程序只需要将我们的数据插入到Working Memory中即可</p><p><strong>Fact</strong>：事实，是指在drools 规则应用当中，将一个普通的JavaBean插入到Working Memory后的对象就是Fact对象，例如本案例中的Order对象就属于Fact对象。Fact对象是我们的应用和规则引擎进行数据交互的桥梁或通道。</p><p><strong>Rule Base</strong>：规则库，我们在规则文件中定义的规则都会被加载到规则库中。</p><p><strong>Pattern Matcher</strong>：匹配器，将Rule Base中的所有规则与Working Memory中的Fact对象进行模式匹配，匹配成功的规则将被激活并放入Agenda中。</p><p><strong>Agenda</strong>：议程，用于存放通过匹配器进行模式匹配后被激活的规则。</p><p><strong>Execution Engine</strong>：执行引擎，执行Agenda中被激活的规则。</p><h2 id="17-规则引擎执行过程"><a class="markdownIt-Anchor" href="#17-规则引擎执行过程"></a> 1.7 规则引擎执行过程</h2><ol><li><p>将初始数据（fact）输入至工作内存(working memory)</p></li><li><p>使用Pattern Matcher将规则库中的规则和数据（fact）比较</p></li><li><p>如果执行规则存在冲突（conflict），即同时激活了多个规则，将冲突的规则放入冲突集合</p></li><li><p>解决冲突，将激活的规则按顺序执行放入Agenda</p></li><li><p>执行Agenda中的规则。重复步骤2-5.直到执行完毕Agenda中的所有规则</p></li></ol><h1 id="二-drools基础语法"><a class="markdownIt-Anchor" href="#二-drools基础语法"></a> 二、Drools基础语法</h1><h2 id="21-规则文件的构成"><a class="markdownIt-Anchor" href="#21-规则文件的构成"></a> 2.1 规则文件的构成</h2><blockquote><p>使用Drools时非常重要的一个工作就是编写规则文件，通常规则文件的后缀为.drl。</p><p>drl是Drools Rule Language的缩写。在规则文件中编写具体的规则内容。</p></blockquote><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>package</td><td>包名，只限于逻辑上的管理，同一个包名下的查询或者函数可以直接调用</td></tr><tr><td>import</td><td>用于导入类或者静态方法</td></tr><tr><td>global</td><td>全局变量</td></tr><tr><td>function</td><td>自定义函数</td></tr><tr><td>query</td><td>查询</td></tr><tr><td>rule end</td><td>规则体</td></tr></tbody></table><h2 id="22-规则体语法结构"><a class="markdownIt-Anchor" href="#22-规则体语法结构"></a> 2.2 规则体语法结构</h2><p>规则体是规则文件内容中的重要组成部分，是进行业务规则判断、处理业务结果的部分。</p><p>规则体语法结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">&quot;ruleName&quot;</span></span><br><span class="line">    attributes</span><br><span class="line">    when</span><br><span class="line">        LHS</span><br><span class="line">    then</span><br><span class="line">        RHS</span><br><span class="line">end</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td><code>rule</code></td><td>关键字</td><td>表示规则开始，参数为规则的唯一名称</td></tr><tr><td><code>attributes</code></td><td>属性</td><td>是rule与when之间的参数，为可选项</td></tr><tr><td><code>when</code></td><td>关键字</td><td>后面跟规则的条件部分</td></tr><tr><td><code>LHS(Left Hand Side)</code></td><td></td><td>是规则的条件部分的通用名称。它由零个或多个条件元素组成。如果LHS为空，则它将被视为始终为true的条件元素。</td></tr><tr><td><code>then</code></td><td>关键字</td><td>后面跟规则的结果部分</td></tr><tr><td>``RHS<code>(Right Hand Side)</code></td><td></td><td>是规则的后果或行动部分的通用名称。</td></tr><tr><td><code>end</code></td><td></td><td>关键字，表示一个规则结束。</td></tr></tbody></table><h2 id="23-pattern模式匹配"><a class="markdownIt-Anchor" href="#23-pattern模式匹配"></a> 2.3 Pattern模式匹配</h2><p>前面我们已经知道了Drools中的匹配器可以将Rule Base中的所有规则与Working Memory中的Fact对象进行模式匹配，那么我们就需要在规则体的LHS部分定义规则并进行模式匹配。LHS部分由一个或者多个条件组成，条件又称为pattern。</p><p><strong>pattern的语法结构为：绑定变量名:Object(Field约束)</strong></p><p>其中绑定变量名可以省略，通常绑定变量名的命名一般建议以$开始。如果定义了绑定变量名，就可以在规则体的RHS部分使用此绑定变量名来操作相应的Fact对象。Field约束部分是需要返回true或者false的0个或多个表达式。</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rule <span class="string">&quot;book&quot;</span></span><br><span class="line">    when</span><br><span class="line">    <span class="comment">//Order为类型约束，originalPrice为属性约束</span></span><br><span class="line">        $order:Order(originalPrice &lt; <span class="number">200</span> &amp;&amp; originalPrice &gt;= <span class="number">100</span>)</span><br><span class="line">    then</span><br><span class="line">     $order.setRealPrice($order.getOriginalPrice() - <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则二：所购图书总价在100到200元的优惠20元&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>绑定变量既可以用在对象上，也可以用在对象的属性上。例如上面的例子可以改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规则二：所购图书总价在100到200元的优惠20元</span></span><br><span class="line">rule <span class="string">&quot;book_discount_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order:Order($op:originalPrice &lt; <span class="number">200</span> &amp;&amp; originalPrice &gt;= <span class="number">100</span>)</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;$op=&quot;</span> + $op);</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice() - <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则二：所购图书总价在100到200元的优惠20元&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>LHS部分还可以定义多个pattern，多个pattern之间可以使用and或者or进行连接，也可以不写，默认连接为and。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规则二：所购图书总价在100到200元的优惠20元</span></span><br><span class="line">rule <span class="string">&quot;book_discount_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $order:Order($op:originalPrice &lt; <span class="number">200</span> &amp;&amp; originalPrice &gt;= <span class="number">100</span>) and</span><br><span class="line">        $customer:Customer(age &gt; <span class="number">20</span> &amp;&amp; gender==<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;$op=&quot;</span> + $op);</span><br><span class="line">        $order.setRealPrice($order.getOriginalPrice() - <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功匹配到规则二：所购图书总价在100到200元的优惠20元&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="24-比较操作符"><a class="markdownIt-Anchor" href="#24-比较操作符"></a> 2.4 比较操作符</h2><p>Drools提供的比较操作符，如下表：</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>contains</td><td>检查一个Fact对象的某个属性值是否包含一个指定的对象值</td></tr><tr><td>not contains</td><td>检查一个Fact对象的某个属性值是否不包含一个指定的对象值</td></tr><tr><td>memberOf</td><td>判断一个Fact对象的某个属性是否在一个或多个集合中</td></tr><tr><td>not memberOf</td><td>判断一个Fact对象的某个属性是否不在一个或多个集合中</td></tr><tr><td>matches</td><td>判断一个Fact对象的属性是否与提供的标准的Java正则表达式进行匹配</td></tr><tr><td>not matches</td><td>判断一个Fact对象的属性是否不与提供的标准的Java正则表达式进行匹配</td></tr></tbody></table><h2 id="25-语法"><a class="markdownIt-Anchor" href="#25-语法"></a> 2.5 语法</h2><ul><li><p><strong>contains | not contains语法结构</strong></p><p>Object(Field[Collection/Array] contains value)</p><p>Object(Field[Collection/Array] not contains value)</p></li><li><p><strong>memberOf | not memberOf语法结构</strong></p><p>Object(field memberOf value[Collection/Array])</p><p>Object(field not memberOf value[Collection/Array])</p></li><li><p><strong>matches | not matches语法结构</strong></p><p>Object(field matches “正则表达式”)</p><p>Object(field not matches “正则表达式”)</p></li></ul><h2 id="26-操作步骤"><a class="markdownIt-Anchor" href="#26-操作步骤"></a> 2.6 操作步骤</h2><p>第一步：创建实体类，用于测试比较操作符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparisonOperatorEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String names;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在/resources/rules下创建规则文件comparisonOperator.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comparisonOperator</span><br><span class="line"><span class="keyword">import</span> com.test.domain.ComparisonOperatorEntity</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当前规则文件用于测试Drools提供的比较操作符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试比较操作符contains</span></span><br><span class="line">rule <span class="string">&quot;rule_comparison_contains&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names contains <span class="string">&quot;张三&quot;</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(list contains names)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_contains触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试比较操作符not contains</span></span><br><span class="line">rule <span class="string">&quot;rule_comparison_notContains&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names not contains <span class="string">&quot;张三&quot;</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(list not contains names)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_notContains触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试比较操作符memberOf</span></span><br><span class="line">rule <span class="string">&quot;rule_comparison_memberOf&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names memberOf list)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_memberOf触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试比较操作符not memberOf</span></span><br><span class="line">rule <span class="string">&quot;rule_comparison_notMemberOf&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names not memberOf list)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_notMemberOf触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试比较操作符matches</span></span><br><span class="line">rule <span class="string">&quot;rule_comparison_matches&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names matches <span class="string">&quot;张.*&quot;</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_matches触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试比较操作符not matches</span></span><br><span class="line">rule <span class="string">&quot;rule_comparison_notMatches&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names not matches <span class="string">&quot;张.*&quot;</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_notMatches触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第三步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试比较操作符</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">    KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">    KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">    ComparisonOperatorEntity comparisonOperatorEntity = <span class="keyword">new</span> ComparisonOperatorEntity();</span><br><span class="line">    comparisonOperatorEntity.setNames(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    comparisonOperatorEntity.setList(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据提供给规则引擎，规则引擎会根据提供的数据进行规则匹配，如果规则匹配成功则执行规则</span></span><br><span class="line">    kieSession.insert(comparisonOperatorEntity);</span><br><span class="line"></span><br><span class="line">    kieSession.fireAllRules();</span><br><span class="line">    kieSession.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27-执行指定规则"><a class="markdownIt-Anchor" href="#27-执行指定规则"></a> 2.7 执行指定规则</h2><p>通我们在调用规则代码时，满足条件的规则都会被执行。那么如果我们只想执行其中的某个规则如何实现呢？</p><p>Drools给我们提供的方式是通过规则过滤器来实现执行指定规则。对于规则文件不用做任何修改，只需要修改Java代码即可，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">ComparisonOperatorEntity comparisonOperatorEntity = <span class="keyword">new</span> ComparisonOperatorEntity();</span><br><span class="line">comparisonOperatorEntity.setNames(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">comparisonOperatorEntity.setList(list);</span><br><span class="line">kieSession.insert(comparisonOperatorEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过规则过滤器实现只执行指定规则</span></span><br><span class="line">kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEqualsAgendaFilter(<span class="string">&quot;rule_comparison_memberOf&quot;</span>));</span><br><span class="line"></span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><h2 id="28-关键字"><a class="markdownIt-Anchor" href="#28-关键字"></a> 2.8 关键字</h2><p>Drools的关键字分为：硬关键字(Hard keywords)和软关键字(Soft keywords)。</p><p>硬关键字是我们在规则文件中定义包名或者规则名时明确不能使用的，否则程序会报错。软关键字虽然可以使用，但是不建议使用。</p><p>硬关键字包括：true false null</p><p>软关键字包括：lock-on-active date-effective date-expires no-loop auto-focus activation-group agenda-group ruleflow-group entry-point duration package import dialect salience enabled attributes rule extend when then template query declare function global eval not in or and exists forall accumulate collect from action reverse result end over init</p><h1 id="三-drools内置方法"><a class="markdownIt-Anchor" href="#三-drools内置方法"></a> 三、Drools内置方法</h1><blockquote><p>规则文件的<code>RHS</code>部分的主要作用是通过插入，删除或修改工作内存中的Fact数据，来达到控制规则引擎执行的目的。Drools提供了一些方法可以用来操作工作内存中的数据，操作完成后规则引擎会重新进行相关规则的匹配，原来没有匹配成功的规则在我们修改数据完成后有可能就会匹配成功了。</p></blockquote><p>创建如下实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="31-update方法"><a class="markdownIt-Anchor" href="#31-update方法"></a> 3.1 update方法</h2><p>update方法的作用是更新工作内存中的数据，并让相关的规则重新匹配。</p><p>第一步：编写规则文件/resources/rules/student.drl，文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age小于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &lt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $s.setAge(<span class="number">15</span>);</span><br><span class="line">        update($s);<span class="comment">//更新数据，导致相关的规则会重新匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age小于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age小于20岁同时大于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &lt; <span class="number">20</span> &amp;&amp; age &gt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $s.setAge(<span class="number">25</span>);</span><br><span class="line">        update($s);<span class="comment">//更新数据，导致相关的规则会重新匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age小于20岁同时大于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age大于20岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &gt; <span class="number">20</span>)</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age大于20岁触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setAge(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据提供给规则引擎，规则引擎会根据提供的数据进行规则匹配，如果规则匹配成功则执行规则</span></span><br><span class="line">kieSession.insert(student);</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台的输出可以看到规则文件中定义的三个规则都触发了。</p><p>在更新数据时需要注意防止发生死循环。</p><h2 id="32-insert方法"><a class="markdownIt-Anchor" href="#32-insert方法"></a> 3.2 insert方法</h2><p>insert方法的作用是向工作内存中插入数据，并让相关的规则重新匹配。</p><p>第一步：修改student.drl文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当前规则文件用于测试Drools提供的内置方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age等于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age == <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setAge(<span class="number">5</span>);</span><br><span class="line">        insert(student);<span class="comment">//插入数据，导致相关的规则会重新匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age等于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age小于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &lt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $s.setAge(<span class="number">15</span>);</span><br><span class="line">        update($s);</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age小于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age小于20岁同时大于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &lt; <span class="number">20</span> &amp;&amp; age &gt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $s.setAge(<span class="number">25</span>);</span><br><span class="line">        update($s);</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age小于20岁同时大于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age大于20岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &gt; <span class="number">20</span>)</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age大于20岁触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setAge(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据提供给规则引擎，规则引擎会根据提供的数据进行规则匹配，如果规则匹配成功则执行规则</span></span><br><span class="line">kieSession.insert(student);</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台输出可以发现，四个规则都触发了，这是因为首先进行规则匹配时只有第一个规则可以匹配成功，但是在第一个规则中向工作内存中插入了一个数据导致重新进行规则匹配，此时第二个规则可以匹配成功。在第二个规则中进行了数据修改导致第三个规则也可以匹配成功，以此类推最终四个规则都匹配成功并执行了。</p><h2 id="33-retract方法"><a class="markdownIt-Anchor" href="#33-retract方法"></a> 3.3 retract方法</h2><p>retract方法的作用是删除工作内存中的数据，并让相关的规则重新匹配。</p><p>第一步：修改student.drl文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当前规则文件用于测试Drools提供的内置方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age等于10岁时删除数据&quot;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    salience：设置当前规则的执行优先级，数值越大越优先执行，默认值为0.</span></span><br><span class="line"><span class="comment">    因为当前规则的匹配条件和下面规则的匹配条件相同，为了保证先执行当前规则，需要设置优先级</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    salience <span class="number">100</span> </span><br><span class="line">    when</span><br><span class="line">        $s:Student(age == <span class="number">10</span>)</span><br><span class="line">    <span class="function">then</span></span><br><span class="line"><span class="function">        <span class="title">retract</span><span class="params">($s)</span></span>;<span class="comment">//retract方法的作用是删除工作内存中的数据，并让相关的规则重新匹配。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age等于10岁时删除数据触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age等于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age == <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setAge(<span class="number">5</span>);</span><br><span class="line">        insert(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age等于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age小于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &lt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $s.setAge(<span class="number">15</span>);</span><br><span class="line">        update($s);</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age小于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age小于20岁同时大于10岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &lt; <span class="number">20</span> &amp;&amp; age &gt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $s.setAge(<span class="number">25</span>);</span><br><span class="line">        update($s);</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age小于20岁同时大于10岁触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_student_age大于20岁&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $s:Student(age &gt; <span class="number">20</span>)</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_student_age大于20岁触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setAge(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据提供给规则引擎，规则引擎会根据提供的数据进行规则匹配，如果规则匹配成功则执行规则</span></span><br><span class="line">kieSession.insert(student);</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台输出可以发现，只有第一个规则触发了，因为在第一个规则中将工作内存中的数据删除了导致第二个规则并没有匹配成功。</p><h1 id="四-规则的属性"><a class="markdownIt-Anchor" href="#四-规则的属性"></a> 四、规则的属性</h1><p>前面我们已经知道了规则体的构成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">&quot;ruleName&quot;</span></span><br><span class="line">    attributes</span><br><span class="line">    when</span><br><span class="line">        LHS</span><br><span class="line">    then</span><br><span class="line">        RHS</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>本章节就是针对规则体的<strong>attributes</strong>属性部分进行讲解。Drools中提供的属性如下表(部分属性)：</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>salience</td><td>指定规则执行优先级</td></tr><tr><td>dialect</td><td>指定规则使用的语言类型，取值为java和mvel</td></tr><tr><td>enabled</td><td>指定规则是否启用</td></tr><tr><td>date-effective</td><td>指定规则生效时间</td></tr><tr><td>date-expires</td><td>指定规则失效时间</td></tr><tr><td>activation-group</td><td>激活分组，具有相同分组名称的规则只能有一个规则触发</td></tr><tr><td>agenda-group</td><td>议程分组，只有获取焦点的组中的规则才有可能触发</td></tr><tr><td>timer</td><td>定时器，指定规则触发的时间</td></tr><tr><td>auto-focus</td><td>自动获取焦点，一般结合agenda-group一起使用</td></tr><tr><td>no-loop</td><td>防止死循环</td></tr></tbody></table><h2 id="41-enabled属性"><a class="markdownIt-Anchor" href="#41-enabled属性"></a> 4.1 enabled属性</h2><p>enabled属性对应的取值为true和false，默认值为true。</p><p>用于指定当前规则是否启用，如果设置的值为false则当前规则无论是否匹配成功都不会触发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">&quot;rule_comparison_notMemberOf&quot;</span></span><br><span class="line">    <span class="comment">//指定当前规则不可用，当前规则无论是否匹配成功都不会执行</span></span><br><span class="line">    <span class="function">enabled <span class="keyword">false</span></span></span><br><span class="line"><span class="function">    when</span></span><br><span class="line"><span class="function">        <span class="title">ComparisonOperatorEntity</span><span class="params">(names not memberOf list)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_comparison_notMemberOf触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="42-dialect属性"><a class="markdownIt-Anchor" href="#42-dialect属性"></a> 4.2 dialect属性</h2><p>dialect属性用于指定当前规则使用的语言类型，取值为java和mvel，默认值为java。</p><p>注：mvel是一种基于java语法的表达式语言。</p><p>mvel像正则表达式一样，有直接支持集合、数组和字符串匹配的操作符。</p><p>mvel还提供了用来配置和构造字符串的模板语言。</p><p>mvel表达式内容包括属性表达式，布尔表达式，方法调用，变量赋值，函数定义等。</p><h2 id="43-salience属性"><a class="markdownIt-Anchor" href="#43-salience属性"></a> 4.3 salience属性</h2><p>salience属性用于指定规则的执行优先级，取值类型为Integer。数值越大越优先执行。每个规则都有一个默认的执行顺序，如果不设置salience属性，规则体的执行顺序为由上到下。</p><p>可以通过创建规则文件salience.drl来测试salience属性，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.salience</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_1&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_1触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line">    </span><br><span class="line">rule <span class="string">&quot;rule_2&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_2触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_3&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_3触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>通过控制台可以看到，由于以上三个规则没有设置salience属性，所以执行的顺序是按照规则文件中规则的顺序由上到下执行的。接下来我们修改一下文件内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testsalience</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_1&quot;</span></span><br><span class="line">    salience <span class="number">9</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_1触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_2&quot;</span></span><br><span class="line">    salience <span class="number">10</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_2触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_3&quot;</span></span><br><span class="line">    salience <span class="number">8</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则rule_3触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>通过控制台可以看到，规则文件执行的顺序是按照我们设置的salience值由大到小顺序执行的。</p><p>建议在编写规则时使用salience属性明确指定执行优先级。</p><h2 id="44-no-loop属性"><a class="markdownIt-Anchor" href="#44-no-loop属性"></a> 4.4 no-loop属性</h2><p>no-loop属性用于防止死循环，当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环。取值类型为Boolean，默认值为false。测试步骤如下：</p><p>第一步：编写规则文件/resource/rules/noloop.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testnoloop</span><br><span class="line"><span class="keyword">import</span> com.itheima.drools.entity.Student</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试no-loop属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">rule <span class="string">&quot;rule_noloop&quot;</span></span><br><span class="line">    when</span><br><span class="line">    <span class="comment">// no-loop true</span></span><br><span class="line">        $student:Student(age == <span class="number">25</span>)</span><br><span class="line">    <span class="function">then</span></span><br><span class="line"><span class="function">        <span class="title">update</span><span class="params">($student)</span></span>;<span class="comment">//注意此处执行update会导致当前规则重新被激活</span></span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_noloop触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setAge(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据提供给规则引擎，规则引擎会根据提供的数据进行规则匹配，如果规则匹配成功则执行规则</span></span><br><span class="line">kieSession.insert(student);</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台可以看到，由于我们没有设置no-loop属性的值，所以发生了死循环。接下来设置no-loop的值为true再次测试则不会发生死循环。</p><h2 id="45-activation-group属性"><a class="markdownIt-Anchor" href="#45-activation-group属性"></a> 4.5 activation-group属性</h2><p>activation-group属性是指激活分组，取值为String类型。具有相同分组名称的规则只能有一个规则被触发。</p><p>第一步：编写规则文件/resources/rules/activationgroup.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testactivationgroup</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试activation-group属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line">rule <span class="string">&quot;rule_activationgroup_1&quot;</span></span><br><span class="line">    activation-group <span class="string">&quot;mygroup&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_activationgroup_1触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_activationgroup_2&quot;</span></span><br><span class="line">    activation-group <span class="string">&quot;mygroup&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_activationgroup_2触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台可以发现，上面的两个规则因为属于同一个分组，所以只有一个触发了。同一个分组中的多个规则如果都能够匹配成功，具体哪一个最终能够被触发可以通过salience属性确定。</p><h2 id="46-agenda-group属性"><a class="markdownIt-Anchor" href="#46-agenda-group属性"></a> 4.6 agenda-group属性</h2><p>agenda-group属性为议程分组，属于另一种可控的规则执行方式。用户可以通过设置agenda-group来控制规则的执行，只有获取焦点的组中的规则才会被触发。</p><p>第一步：创建规则文件/resources/rules/agendagroup.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testagendagroup</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此规则文件用于测试agenda-group属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_1&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_1触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_2&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_2触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"><span class="comment">//========================================================</span></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_3&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_3触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_4&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_4触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置焦点，对应agenda-group分组中的规则才可能被触发</span></span><br><span class="line">kieSession.getAgenda().getAgendaGroup(<span class="string">&quot;myagendagroup_1&quot;</span>).setFocus();</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台可以看到，只有获取焦点的分组中的规则才会触发。与activation-group不同的是，activation-group定义的分组中只能够有一个规则可以被触发，而agenda-group分组中的多个规则都可以被触发。</p><h2 id="47-auto-focus属性"><a class="markdownIt-Anchor" href="#47-auto-focus属性"></a> 4.7 auto-focus属性</h2><p>auto-focus属性为自动获取焦点，取值类型为Boolean，默认值为false。一般结合agenda-group属性使用，当一个议程分组未获取焦点时，可以设置auto-focus属性来控制。</p><p>第一步：修改/resources/rules/agendagroup.drl文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> testagendagroup</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_1&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_1触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_2&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_2触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"><span class="comment">//========================================================</span></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_3&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_2&quot;</span></span><br><span class="line">    auto-focus <span class="keyword">true</span> <span class="comment">//自动获取焦点</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_3触发&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_agendagroup_4&quot;</span></span><br><span class="line">    agenda-group <span class="string">&quot;myagendagroup_2&quot;</span></span><br><span class="line">    auto-focus <span class="keyword">true</span> <span class="comment">//自动获取焦点</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_agendagroup_4触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p>通过控制台可以看到，设置auto-focus属性为true的规则都触发了。</p><h2 id="48-timer属性"><a class="markdownIt-Anchor" href="#48-timer属性"></a> 4.8 timer属性</h2><p>timer属性可以通过定时器的方式指定规则执行的时间，使用方式有两种：</p><p><strong>方式一</strong>：timer (int: &lt;initial delay&gt; &lt;repeat interval&gt;?)</p><p>此种方式遵循java.util.Timer对象的使用方式，第一个参数表示几秒后执行，第二个参数表示每隔几秒执行一次，第二个参数为可选。</p><p><strong>方式二</strong>：timer(cron: &lt;cron expression&gt;)</p><p>此种方式使用标准的unix cron表达式的使用方式来定义规则执行的时间。</p><p>第一步：创建规则文件/resources/rules/timer.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testtimer</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"><span class="keyword">import</span> java.util.Date</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试timer属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_timer_1&quot;</span></span><br><span class="line">    timer (5s 2s) <span class="comment">//含义：5秒后触发，然后每隔2秒触发一次</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_timer_1触发，触发时间为：&quot;</span> + </span><br><span class="line">                         <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_timer_2&quot;</span></span><br><span class="line">    timer (cron:<span class="number">0</span>/<span class="number">1</span> * * * * ?) <span class="comment">//含义：每隔1秒触发一次</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_timer_2触发，触发时间为：&quot;</span> + </span><br><span class="line">                         <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line"><span class="keyword">final</span> KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动规则引擎进行规则匹配，直到调用halt方法才结束规则引擎</span></span><br><span class="line">        kieSession.fireUntilHalt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"><span class="comment">//结束规则引擎</span></span><br><span class="line">kieSession.halt();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p><strong>注意：单元测试的代码和以前的有所不同，因为我们规则文件中使用到了timer进行定时执行，需要程序能够持续一段时间才能够看到定时器触发的效果。</strong></p><h2 id="49-date-effective属性"><a class="markdownIt-Anchor" href="#49-date-effective属性"></a> 4.9 date-effective属性</h2><p>date-effective属性用于指定规则的生效时间，即只有当前系统时间大于等于设置的时间或者日期规则才有可能触发。默认日期格式为：dd-MMM-yyyy。用户也可以自定义日期格式。</p><p>第一步：编写规则文件/resources/rules/dateeffective.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testdateeffective</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试date-effective属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">rule <span class="string">&quot;rule_dateeffective_1&quot;</span></span><br><span class="line">    date-effective <span class="string">&quot;2020-10-01 10:00&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_dateeffective_1触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置日期格式</span></span><br><span class="line">System.setProperty(<span class="string">&quot;drools.dateformat&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);</span><br><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p><strong>注意：上面的代码需要设置日期格式，否则我们在规则文件中写的日期格式和默认的日期格式不匹配程序会报错。</strong></p><h2 id="410-date-expires属性"><a class="markdownIt-Anchor" href="#410-date-expires属性"></a> 4.10 date-expires属性</h2><p>date-expires属性用于指定规则的失效时间，即只有当前系统时间小于设置的时间或者日期规则才有可能触发。默认日期格式为：dd-MMM-yyyy。用户也可以自定义日期格式。</p><p>第一步：编写规则文件/resource/rules/dateexpires.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testdateexpires</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试date-expires属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_dateexpires_1&quot;</span></span><br><span class="line">    date-expires <span class="string">&quot;2019-10-01 10:00&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;规则rule_dateexpires_1触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置日期格式</span></span><br><span class="line">System.setProperty(<span class="string">&quot;drools.dateformat&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);</span><br><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><p><strong>注意：上面的代码需要设置日期格式，否则我们在规则文件中写的日期格式和默认的日期格式不匹配程序会报错</strong></p><h1 id="五-drools高级语法"><a class="markdownIt-Anchor" href="#五-drools高级语法"></a> 五、Drools高级语法</h1><p>前面章节我们已经知道了一套完整的规则文件内容构成如下：</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>package</td><td>包名，只限于逻辑上的管理，同一个包名下的查询或者函数可以直接调用</td></tr><tr><td>import</td><td>用于导入类或者静态方法</td></tr><tr><td>global</td><td>全局变量</td></tr><tr><td>function</td><td>自定义函数</td></tr><tr><td>query</td><td>查询</td></tr><tr><td>rule end</td><td>规则体</td></tr></tbody></table><h2 id="51-global全局变量"><a class="markdownIt-Anchor" href="#51-global全局变量"></a> 5.1 global全局变量</h2><p>global关键字用于在规则文件中定义全局变量，它可以让应用程序的对象在规则文件中能够被访问。可以用来为规则文件提供数据或服务。</p><p>语法结构为：<strong>global 对象类型 对象名称</strong></p><p>在使用global定义的全局变量时有两点需要注意：</p><p>1、如果对象类型为包装类型时，在一个规则中改变了global的值，那么只针对当前规则有效，对其他规则中的global不会有影响。可以理解为它是当前规则代码中的global副本，规则内部修改不会影响全局的使用。</p><p>2、如果对象类型为集合类型或JavaBean时，在一个规则中改变了global的值，对java代码和所有规则都有效。</p><p>下面我们通过代码进行验证：</p><p>第一步：创建UserService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;UserService.save()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：编写规则文件/resources/rules/global.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testglobal</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试global全局变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">global java.lang.Integer count <span class="comment">//定义一个包装类型的全局变量</span></span><br><span class="line">global com.service.UserService userService <span class="comment">//定义一个JavaBean类型的全局变量</span></span><br><span class="line">global java.util.List gList <span class="comment">//定义一个集合类型的全局变量</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_global_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        count += <span class="number">10</span>; <span class="comment">//全局变量计算，只对当前规则有效，其他规则不受影响</span></span><br><span class="line">        userService.save();<span class="comment">//调用全局变量的方法</span></span><br><span class="line">        gList.add(<span class="string">&quot;itcast&quot;</span>);<span class="comment">//向集合类型的全局变量中添加元素，Java代码和所有规则都受影响</span></span><br><span class="line">        gList.add(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;gList.size=&quot;</span> + gList.size());</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_global_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        userService.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;gList.size=&quot;</span> + gList.size());</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第三步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全局变量，名称和类型必须和规则文件中定义的全局变量名称对应</span></span><br><span class="line">kieSession.setGlobal(<span class="string">&quot;userService&quot;</span>,<span class="keyword">new</span> UserService());</span><br><span class="line">kieSession.setGlobal(<span class="string">&quot;count&quot;</span>,<span class="number">5</span>);</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();<span class="comment">//size为0</span></span><br><span class="line">kieSession.setGlobal(<span class="string">&quot;gList&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为在规则中为全局变量添加了两个元素，所以现在的size为2</span></span><br><span class="line">System.out.println(list.size());</span><br></pre></td></tr></table></figure><h2 id="52-query查询"><a class="markdownIt-Anchor" href="#52-query查询"></a> 5.2 query查询</h2><p>query查询提供了一种<strong>查询working memory中符合约束条件的Fact对象</strong>的简单方法。它仅包含规则文件中的LHS部分，不用指定“when”和“then”部分并且以end结束。具体语法结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query 查询的名称(可选参数)</span><br><span class="line">LHS</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>具体操作步骤：</p><p>第一步：编写规则文件/resources/rules/query.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testquery</span><br><span class="line"><span class="keyword">import</span> com.entity.Student</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试query查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不带参数的查询</span></span><br><span class="line"><span class="comment">//当前query用于查询Working Memory中age&gt;10的Student对象</span></span><br><span class="line">query <span class="string">&quot;query_1&quot;</span></span><br><span class="line">    $student:Student(age &gt; <span class="number">10</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//带有参数的查询</span></span><br><span class="line"><span class="comment">//当前query用于查询Working Memory中age&gt;10同时name需要和传递的参数name相同的Student对象</span></span><br><span class="line">query <span class="string">&quot;query_2&quot;</span>(String sname)</span><br><span class="line">    $student:Student(age &gt; <span class="number">20</span> &amp;&amp; name == sname)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">student1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">student1.setAge(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">Student student2 = <span class="keyword">new</span> Student();</span><br><span class="line">student2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">student2.setAge(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Student student3 = <span class="keyword">new</span> Student();</span><br><span class="line">student3.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">student3.setAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将对象插入Working Memory中</span></span><br><span class="line">kieSession.insert(student1);</span><br><span class="line">kieSession.insert(student2);</span><br><span class="line">kieSession.insert(student3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用规则文件中的查询</span></span><br><span class="line">QueryResults results1 = kieSession.getQueryResults(<span class="string">&quot;query_1&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> size = results1.size();</span><br><span class="line">System.out.println(<span class="string">&quot;size=&quot;</span> + size);</span><br><span class="line"><span class="keyword">for</span> (QueryResultsRow row : results1) &#123;</span><br><span class="line">    Student student = (Student) row.get(<span class="string">&quot;$student&quot;</span>);</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用规则文件中的查询</span></span><br><span class="line">QueryResults results2 = kieSession.getQueryResults(<span class="string">&quot;query_2&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">size = results2.size();</span><br><span class="line">System.out.println(<span class="string">&quot;size=&quot;</span> + size);</span><br><span class="line"><span class="keyword">for</span> (QueryResultsRow row : results2) &#123;</span><br><span class="line">    Student student = (Student) row.get(<span class="string">&quot;$student&quot;</span>);</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kieSession.fireAllRules();</span></span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><h2 id="53-function函数"><a class="markdownIt-Anchor" href="#53-function函数"></a> 5.3 function函数</h2><p>function关键字用于在规则文件中定义函数，就相当于java类中的方法一样。可以在规则体中调用定义的函数。使用函数的好处是可以将业务逻辑集中放置在一个地方，根据需要可以对函数进行修改。</p><p>函数定义的语法结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 返回值类型 函数名(可选参数)&#123;</span><br><span class="line"><span class="comment">//逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体操作步骤：</p><p>第一步：编写规则文件/resources/rules/function.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testfunction</span><br><span class="line"><span class="keyword">import</span> com.entity.Student</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    此规则文件用于测试function函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="function">function String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_function_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $student:Student(name != <span class="keyword">null</span>)</span><br><span class="line">    then</span><br><span class="line">        <span class="comment">//调用上面定义的函数</span></span><br><span class="line">        String ret = sayHello($student.getName());</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第二步：编写单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">KieContainer kieClasspathContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">KieSession kieSession = kieClasspathContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">kieSession.insert(student);</span><br><span class="line"></span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure><h2 id="54-lhs加强"><a class="markdownIt-Anchor" href="#54-lhs加强"></a> 5.4 LHS加强</h2><p>前面我们已经知道了在规则体中的LHS部分是介于when和then之间的部分，主要用于模式匹配，只有匹配结果为true时，才会触发RHS部分的执行。本章节我们会针对LHS部分学习几个新的用法。</p><h3 id="541-复合值限制innot-in"><a class="markdownIt-Anchor" href="#541-复合值限制innot-in"></a> 5.4.1 复合值限制in/not in</h3><p>复合值限制是指超过一种匹配值的限制条件，类似于SQL语句中的in关键字。Drools规则体中的LHS部分可以使用in或者not in进行复合值的匹配。具体语法结构如下：</p><p><strong>Object(field in (比较值1,比较值2…))</strong></p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$s:Student(<span class="function">name <span class="title">in</span> <span class="params">(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>)</span>)</span></span><br><span class="line"><span class="function">$s:<span class="title">Student</span><span class="params">(name not in (<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="542-条件元素eval"><a class="markdownIt-Anchor" href="#542-条件元素eval"></a> 5.4.2 条件元素eval</h3><p>eval用于规则体的LHS部分，并返回一个Boolean类型的值。语法结构如下：</p><p><strong>eval(表达式)</strong></p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="keyword">true</span>)</span><br><span class="line">eval(<span class="keyword">false</span>)</span><br><span class="line">eval(<span class="number">1</span> == <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="543-条件元素not"><a class="markdownIt-Anchor" href="#543-条件元素not"></a> 5.4.3 条件元素not</h3><p>not用于判断Working Memory中是否存在某个Fact对象，如果不存在则返回true，如果存在则返回false。语法结构如下：</p><p><strong>not Object(可选属性约束)</strong></p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">not <span class="title">Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function">not <span class="title">Student</span><span class="params">(age &lt; <span class="number">10</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="544-条件元素exists"><a class="markdownIt-Anchor" href="#544-条件元素exists"></a> 5.4.4 条件元素exists</h3><p>exists的作用与not相反，用于判断Working Memory中是否存在某个Fact对象，如果存在则返回true，不存在则返回false。语法结构如下：</p><p><strong>exists Object(可选属性约束)</strong></p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">exists <span class="title">Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function">exists <span class="title">Student</span><span class="params">(age &lt; <span class="number">10</span> &amp;&amp; name != <span class="keyword">null</span>)</span></span></span><br></pre></td></tr></table></figure><p>可能有人会有疑问，我们前面在LHS部分进行条件编写时并没有使用exists也可以达到判断Working Memory中是否存在某个符合条件的Fact元素的目的，那么我们使用exists还有什么意义？</p><p>两者的区别：当向Working Memory中加入多个满足条件的Fact对象时，使用了exists的规则执行一次，不使用exists的规则会执行多次。</p><p>例如：</p><p>规则文件(只有规则体)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">&quot;使用exists的规则&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">    exists <span class="title">Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">    System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则：使用exists的规则触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;没有使用exists的规则&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">    <span class="title">Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">    System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则：没有使用exists的规则触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kieSession.insert(<span class="keyword">new</span> Student());</span><br><span class="line">kieSession.insert(<span class="keyword">new</span> Student());</span><br><span class="line">kieSession.fireAllRules();</span><br></pre></td></tr></table></figure><p>上面第一个规则只会执行一次，因为Working Memory中存在两个满足条件的Fact对象，第二个规则会执行两次。</p><h3 id="545-规则继承"><a class="markdownIt-Anchor" href="#545-规则继承"></a> 5.4.5 规则继承</h3><p>规则之间可以使用extends关键字进行规则条件部分的继承，类似于java类之间的继承。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">&quot;rule_1&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">    <span class="title">Student</span><span class="params">(age &gt; <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">    System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则：rule_1触发&quot;</span>)</span></span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;rule_2&quot;</span> extends <span class="string">&quot;rule_1&quot;</span> <span class="comment">//继承上面的规则</span></span><br><span class="line">    when</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此处的条件虽然只写了一个，但是从上面的规则继承了一个条件，</span></span><br><span class="line"><span class="comment">    所以当前规则存在两个条件，即Student(age &lt; 20)和Student(age &gt; 10)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Student(age &lt; <span class="number">20</span>) </span><br><span class="line">    then</span><br><span class="line">    System.out.println(<span class="string">&quot;规则：rule_2触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="55-rhs加强"><a class="markdownIt-Anchor" href="#55-rhs加强"></a> 5.5 RHS加强</h2><p>RHS部分是规则体的重要组成部分，当LHS部分的条件匹配成功后，对应的RHS部分就会触发执行。一般在RHS部分中需要进行业务处理。</p><p>在RHS部分Drools为我们提供了一个内置对象，名称就是drools。本小节我们来介绍几个drools对象提供的方法。</p><h3 id="551-halt"><a class="markdownIt-Anchor" href="#551-halt"></a> 5.5.1 halt</h3><p>halt方法的作用是立即终止后面所有规则的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testhalt</span><br><span class="line">rule <span class="string">&quot;rule_halt_1&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">    System.out.println(<span class="string">&quot;规则：rule_halt_1触发&quot;</span>);</span><br><span class="line">drools.halt();<span class="comment">//立即终止后面所有规则执行</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前规则并不会触发，因为上面的规则调用了halt方法导致后面所有规则都不会执行</span></span><br><span class="line">rule <span class="string">&quot;rule_halt_2&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">    System.out.println(<span class="string">&quot;规则：rule_halt_2触发&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="552-getworkingmemory"><a class="markdownIt-Anchor" href="#552-getworkingmemory"></a> 5.5.2 getWorkingMemory</h3><p>getWorkingMemory方法的作用是返回工作内存对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testgetWorkingMemory</span><br><span class="line">rule <span class="string">&quot;rule_getWorkingMemory&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">    System.out.println(drools.getWorkingMemory());</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="553-getrule"><a class="markdownIt-Anchor" href="#553-getrule"></a> 5.5.3 getRule</h3><p>getRule方法的作用是返回规则对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testgetRule</span><br><span class="line">rule <span class="string">&quot;rule_getRule&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">    System.out.println(drools.getRule());</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="56-规则文件编码规范"><a class="markdownIt-Anchor" href="#56-规则文件编码规范"></a> 5.6 规则文件编码规范</h2><p>我们在进行drl类型的规则文件编写时尽量遵循如下规范：</p><ul><li>所有的规则文件(.drl)应统一放在一个规定的文件夹中，如：/rules文件夹</li><li>书写的每个规则应尽量加上注释。注释要清晰明了，言简意赅</li><li>同一类型的对象尽量放在一个规则文件中，如所有Student类型的对象尽量放在一个规则文件中</li><li>规则结果部分(RHS)尽量不要有条件语句，如if(…)，尽量不要有复杂的逻辑和深层次的嵌套语句</li><li>每个规则最好都加上salience属性，明确执行顺序</li><li>Drools默认dialect为&quot;Java&quot;，尽量避免使用dialect “mvel”</li></ul><h1 id="六-spring-boot整合drools"><a class="markdownIt-Anchor" href="#六-spring-boot整合drools"></a> 六 、Spring Boot整合Drools</h1><p>目前在企业开发中Spring Boot已经成为主流，本小节我们来进行Spring Boot整合Drools。具体操作步骤：</p><p>第一步：创建maven工程drools_springboot并配置pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools_springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--drools规则引擎--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-templates<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建/resources/application.yml文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8080</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">drools_springboot</span></span><br></pre></td></tr></table></figure><p>第三步：创建规则文件/resources/rules/helloworld.drl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> helloworld</span><br><span class="line">rule <span class="string">&quot;rule_helloworld&quot;</span></span><br><span class="line">    <span class="function">when</span></span><br><span class="line"><span class="function">        <span class="title">eval</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    then</span></span><br><span class="line"><span class="function">        System.out.<span class="title">println</span><span class="params">(<span class="string">&quot;规则：rule_helloworld触发...&quot;</span>)</span></span>;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第四步：编写配置类DroolsConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieBase;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieServices;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieBuilder;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieFileSystem;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieRepository;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieContainer;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.kie.internal.io.ResourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.kie.spring.KModuleBeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规则引擎配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定规则文件存放的目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RULES_PATH = <span class="string">&quot;rules/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieFileSystem <span class="title">kieFileSystem</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieFileSystem kieFileSystem = kieServices.newKieFileSystem();</span><br><span class="line">        ResourcePatternResolver resourcePatternResolver = </span><br><span class="line">            <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        Resource[] files = </span><br><span class="line">            resourcePatternResolver.getResources(<span class="string">&quot;classpath*:&quot;</span> + RULES_PATH + <span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        String path = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Resource file : files) &#123;</span><br><span class="line">            path = RULES_PATH + file.getFilename();</span><br><span class="line">            kieFileSystem.write(ResourceFactory.newClassPathResource(path, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kieFileSystem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieContainer <span class="title">kieContainer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieRepository kieRepository = kieServices.getRepository();</span><br><span class="line">        kieRepository.addKieModule(kieRepository::getDefaultReleaseId);</span><br><span class="line">        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem());</span><br><span class="line">        kieBuilder.buildAll();</span><br><span class="line">        <span class="keyword">return</span> kieServices.newKieContainer(kieRepository.getDefaultReleaseId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieBase <span class="title">kieBase</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kieContainer().getKieBase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KModuleBeanFactoryPostProcessor <span class="title">kiePostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KModuleBeanFactoryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五步：创建RuleService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieBase;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KieBase kieBase;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        KieSession kieSession = kieBase.newKieSession();</span><br><span class="line">        kieSession.fireAllRules();</span><br><span class="line">        kieSession.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第六步：创建HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.drools.service.RuleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuleService ruleService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rule&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ruleService.rule();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第七步：创建启动类DroolsApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DroolsApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第八步：启动服务，访问http://localhost:8080/hello/rule</p><h1 id="七-workbench"><a class="markdownIt-Anchor" href="#七-workbench"></a> 七、WorkBench</h1><h2 id="71-workbench简介"><a class="markdownIt-Anchor" href="#71-workbench简介"></a> 7.1 WorkBench简介</h2><p>WorkBench是KIE组件中的元素，也称为KIE-WB，是Drools-WB与JBPM-WB的结合体。它是一个可视化的规则编辑器。WorkBench其实就是一个war包，安装到tomcat中就可以运行。使用WorkBench可以在浏览器中创建数据对象、创建规则文件、创建测试场景并将规则部署到maven仓库供其他应用使用。</p><p>下载地址：<a href="https://download.jboss.org/drools/release/7.6.0.Final/kie-drools-wb-7.6.0.Final-tomcat8.war">https://download.jboss.org/drools/release/7.6.0.Final/kie-drools-wb-7.6.0.Final-tomcat8.war</a></p><p>注意：下载的war包需要安装到tomcat8中。</p><h2 id="72-安装方式"><a class="markdownIt-Anchor" href="#72-安装方式"></a> 7.2 安装方式</h2><p>软件安装时经常会涉及到软件版本兼容性的问题，所以需要明确各个软件的使用版本。</p><p>本课程使用的软件环境如下：</p><ul><li>操作系统：Windows 10 64位</li><li>JDK版本：1.8</li><li>maven版本：3.5.4</li><li>Tomcat版本：8.5</li></ul><p>具体安装步骤：</p><p>第一步：配置Tomcat的环境变量CATALINA_HOME，对应的值为Tomcat安装目录</p><p>第二步：在Tomcat的bin目录下创建setenv.bat文件，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CATALINA_OPTS</span>=<span class="string">&quot;-Xmx512M \</span></span><br><span class="line"><span class="string">    -Djava.security.auth.login.config=$CATALINA_HOME/webapps/kie-drools-wb/WEB-INF/classes/login.config \</span></span><br><span class="line"><span class="string">    -Dorg.jboss.logging.provider=jdk&quot;</span></span><br></pre></td></tr></table></figure><p>第三步：将下载的WorkBench的war包改名为kie-drools-wb.war并复制到Tomcat的webapps目录下</p><p>第四步：修改Tomcat下conf/tomcat-users.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义admin角色--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--定义一个用户，用户名为kie，密码为kie，对应的角色为admin角色--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;kie&quot;</span> <span class="attr">password</span>=<span class="string">&quot;kie&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第五步：下载以下三个jar包并复制到Tomcat的lib目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kie-tomcat-integration-7.10.0.Final.jar</span></span><br><span class="line"><span class="attr">javax.security.jacc-api-1.5.jar</span></span><br><span class="line"><span class="attr">slf4j-api-1.7.25.jar</span></span><br></pre></td></tr></table></figure><p>第六步：修改Tomcat的conf/server.xml文件，添加Valve标签，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.kie.integration.tomcat.JACCValve&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第七步：启动Tomcat并访问http://localhost:8080/kie-drools-wb，可以看到WorkBench的登录页面。使用前面在tomcat-users.xml文件中定义的用户进行登录即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205832.png" alt="12"></p><p>登录成功后进入系统首页：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205827.png" alt="13"></p><h2 id="73-使用方式"><a class="markdownIt-Anchor" href="#73-使用方式"></a> 7.3 使用方式</h2><p>7.3.1 创建空间、项目</p><p>WorkBench中存在空间和项目的概念。我们在使用WorkBench时首先需要创建空间（Space），在空间中创建项目，在项目中创建数据对象、规则文件等。</p><ul><li><p>创建空间</p><p>第一步：登录WorkBench后进行系统首页，点击首页中的Design区域进入项目列表页面：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205822.png" alt="14"></p><p>如果是第一次登录还没有创建项目则无法看到项目</p><p>第二步：点击左上角Spaces导航链接进入空间列表页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205817.png" alt="15"></p><p>第三步：点击右上角Add Space按钮弹出创建添加空间窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205812.png" alt="16"></p><p>录入空间名称，点击Save按钮则完成空间的创建，如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205804.png" alt="17"></p></li><li><p>创建项目</p><p>前面已经提到，我们在WorkBench中需要先创建空间，在空间中才能创建项目。上面我们已经创建了一个空间itheima，现在需要住此空间中创建项目。</p><p>第一步：点击itheima空间，进入此空间</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205800.png" alt="18"></p><p>可以看到当前空间中还没有项目</p><p>第二步：点击Add Project按钮弹出添加项目窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205755.png" alt="19"></p><p>第三步：在添加项目窗口中录入项目名称（例如项目名称为pro1），点击Add按钮完成操作</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205749.png" alt="20"></p><p>可以看到在完成项目创建后，系统直接跳转到了项目页面。要查看当前itheima空间中的所有项目，可以点击左上角itheima链接：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205744.png" alt="21"></p></li></ul><h3 id="732-创建数据对象"><a class="markdownIt-Anchor" href="#732-创建数据对象"></a> 7.3.2 创建数据对象</h3><p>数据对象其实就是JavaBean，一般都是在drl规则文件中使用进行规则匹配。</p><p>第一步：在itheima空间中点击pro1项目，进入此项目页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205736.png" alt="22"></p><p>第二步：点击Create New Asset按钮选择“数据对象”</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205733.png" alt="23"></p><p>第三步：在弹出的创建数据对象窗口中输入数据对象的名称，点击确定按钮完成操作</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205729.png" alt="24"></p><p>操作完成后可以看到如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205725.png" alt="25"></p><p>第四步：点击“添加字段”按钮弹出新建字段窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205715.png" alt="26"></p><p>第五步：在新建字段窗口中录入字段Id（其实就是属性名），选择类型，点击创建按钮完成操作</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205710.png" alt="27"></p><p>完成操作后可以看到刚才创建的字段：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205706.png" alt="28"></p><p>可以点击添加字段按钮继续创建其他字段：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205701.png" alt="29"></p><p>注意添加完字段后需要点击右上角保存按钮完成保存操作：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205658.png" alt="32"></p><p>点击源代码按钮可以查看刚才创建的Person对象源码：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205632.png" alt="30"></p><p>点击左上角pro1项目链接，可以看到当前pro1项目中已经创建的各种类型的对象：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205650.png" alt="31"></p><h3 id="733-创建drl规则文件"><a class="markdownIt-Anchor" href="#733-创建drl规则文件"></a> 7.3.3 创建DRL规则文件</h3><p>第一步：在pro1项目页面点击右上角Create New Asset按钮，选择“DRL文件”，弹出创建DRL文件窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205612.png" alt="33"></p><p>第二步：在添加DRL文件窗口录入DRL文件名称，点击确定按钮完成操作</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205607.png" alt="34"></p><p>第三步：上面点击确定按钮完成创建DRL文件后，页面会跳转到编辑DRL文件页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205605.png" alt="35"></p><p>可以看到DRL规则文件页面分为两个部分：左侧为项目浏览视图、右侧为编辑区域，需要注意的是左侧默认展示的不是项目浏览视图，需要点击上面设置按钮，选择“资料库视图”和“显示为文件夹”，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205601.png" alt="36"></p><p>第四步：在编辑DRL文件页面右侧区域进行DRL文件的编写，点击右上角保存按钮完成保存操作，点击检验按钮进行规则文件语法检查</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205557.png" alt="37"></p><p>点击左上角pro1项目回到项目页面，可以看到此项目下已经存在两个对象，即person.drl规则文件和Person类：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205553.png" alt="38"></p><h3 id="734-创建测试场景"><a class="markdownIt-Anchor" href="#734-创建测试场景"></a> 7.3.4 创建测试场景</h3><p>前面我们已经创建了Person数据对象和person规则文件，现在我们需要测试一下规则文件中的规则，可以通过创建测试场景来进行测试。</p><p>第一步：在项目页面点击Create New Asset按钮选择“测试场景”，弹出创建测试场景窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205549.png" alt="39"></p><p>第二步：在弹出的创建测试场景窗口中录入测试场景的名称，点击确定完成操作</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205545.png" alt="40"></p><p>完成测试场景的创建后，页面会跳转到测试场景编辑页面，如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205542.png" alt="41"></p><p>第三步：因为我们编写的规则文件中需要从工作内存中获取Person对象进行规则匹配，所以在测试场景中需要准备Person对象给工作内存，点击“GIVEN”按钮弹出新建数据录入窗口，选择Person类，输入框中输入事实名称（名称任意），如下图</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205538.png" alt="42"></p><p>第四步：录入事实名称后点击后面的添加按钮，可以看到Person对象已经添加成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205534.png" alt="43"></p><p>第五步：我们给工作内存提供的Person对象还需要设置age属性的值，点击“添加字段”按钮弹出窗口，选择age属性</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205529.png" alt="44"></p><p>点击确定按钮后可以看到字段已经添加成功：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205517.png" alt="45"></p><p>第六步：点击age属性后面的编辑按钮，弹出字段值窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205512.png" alt="image-20200113154817582"></p><p>第七步：在弹出的窗口中点击字面值按钮，重新回到测试场景页面，可以看到age后面出现输入框，可以为age属性设置值</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205508.png" alt="image-20200113155136957"></p><p>设置好age属性的值后点击保存按钮保存测试场景</p><p>第八步：点击右上角“运行测试场景”按钮进行测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205436.png" alt="image-20200113155332666"></p><p>测试成功后可以查看WorkBench部署的Tomcat控制台：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205429.png" alt="image-20200113155819517"></p><h3 id="735-设置kiebase和kiesession"><a class="markdownIt-Anchor" href="#735-设置kiebase和kiesession"></a> 7.3.5 设置KieBase和KieSession</h3><p>第一步：在pro1项目页面点击右上角Settings按钮进入设置页面</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205423.png" alt="image-20200113162923877"></p><p>第二步：在设置页面选择“知识库和会话”选项</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205410.png" alt="image-20200113163005061"></p><p>第三步：在弹出的知识库和会话页面点击“添加”按钮进行设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205404.png" alt="image-20200113163313305"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205341.png" alt="image-20200113163344174"></p><p>第四步：设置完成后点击右上角保存按钮完成设置操作，可以通过左侧浏览视图点击kmodule.xml，查看文件内容</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205335.png" alt="image-20200113163539676"></p><h3 id="736-编译-构建-部署"><a class="markdownIt-Anchor" href="#736-编译-构建-部署"></a> 7.3.6 编译、构建、部署</h3><p>前面我们已经在WorkBench中创建了一个空间itheima，并且在此空间中创建了一个项目pro1，在此项目中创建了数据文件、规则文件和测试场景，如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205329.png" alt="image-20200113160102668"></p><p>点击右上角“Compile”按钮可以对项目进行编译，点击“Bulid&amp;Deploy”按钮进行构建和部署。</p><p>部署成功后可以在本地maven仓库中看到当前项目已经被打成jar包：</p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205321.png" alt="image-20200113160728259" style="float: left;"><p>将上面的jar包进行解压，可以看到我们创建的数据对象Person和规则文件person以及kmodule.xml都已经打到jar包中了。</p><h3 id="737-在项目中使用部署的规则"><a class="markdownIt-Anchor" href="#737-在项目中使用部署的规则"></a> 7.3.7 在项目中使用部署的规则</h3><p>前面我们已经在WorkBench中创建了pro1项目，并且在pro1项目中创建了数据文件、规则文件等。最后我们将此项目打成jar包部署到了maven仓库中。本小节就需要在外部项目中使用我们定义的规则。</p><p>第一步：在IDEA中创建一个maven项目并在pom.xml文件中导入相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.10.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：在项目中创建一个数据对象Person，需要和WorkBench中创建的Person包名、类名完全相同，属性也需要对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> java.lang.String id;</span><br><span class="line">    <span class="keyword">private</span> java.lang.String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(java.lang.String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(java.lang.String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(java.lang.String id, java.lang.String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：编写单元测试，远程加载maven仓库中的jar包最终完成规则调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//通过此URL可以访问到maven仓库中的jar包</span></span><br><span class="line">    <span class="comment">//URL地址构成：http://ip地址:Tomcat端口号/WorkBench工程名/maven2/坐标/版本号/xxx.jar</span></span><br><span class="line">    String url = </span><br><span class="line">    <span class="string">&quot;http://localhost:8080/kie-drools-wb/maven2/com/pro1/1.0.0/pro1-1.0.0.jar&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过Resource资源对象加载jar包</span></span><br><span class="line">    UrlResource resource = (UrlResource) kieServices.getResources().newUrlResource(url);</span><br><span class="line">    <span class="comment">//通过Workbench提供的服务来访问maven仓库中的jar包资源，需要先进行Workbench的认证</span></span><br><span class="line">    resource.setUsername(<span class="string">&quot;kie&quot;</span>);</span><br><span class="line">    resource.setPassword(<span class="string">&quot;kie&quot;</span>);</span><br><span class="line">    resource.setBasicAuthentication(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将资源转换为输入流，通过此输入流可以读取jar包数据</span></span><br><span class="line">    InputStream inputStream = resource.getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建仓库对象，仓库对象中保存Drools的规则信息</span></span><br><span class="line">    KieRepository repository = kieServices.getRepository();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过输入流读取maven仓库中的jar包数据，包装成KieModule模块添加到仓库中</span></span><br><span class="line">    KieModule kieModule = </span><br><span class="line">  repository.</span><br><span class="line">        addKieModule(kieServices.getResources().newInputStreamResource(inputStream));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基于KieModule模块创建容器对象，从容器中可以获取session会话</span></span><br><span class="line">    KieContainer kieContainer = kieServices.newKieContainer(kieModule.getReleaseId());</span><br><span class="line">    KieSession session = kieContainer.newKieSession();</span><br><span class="line"></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.setAge(<span class="number">10</span>);</span><br><span class="line">    session.insert(person);</span><br><span class="line"></span><br><span class="line">    session.fireAllRules();</span><br><span class="line">    session.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行单元测试可以发现控制台已经输出了相关内容。通过WorkBench修改规则输出内容并发布，再次执行单元测试可以发现控制台输出的内容也发生了变化。</p><p><strong>通过上面的案例可以发现，我们在IEDA中开发的项目中并没有编写规则文件，规则文件是我们通过WorkBench开发并安装部署到maven仓库中，我们自己开发的项目只需要远程加载maven仓库中的jar包就可以完成规则的调用。这种开发方式的好处是我们的应用可以和业务规则完全分离，同时通过WorkBench修改规则后我们的应用不需要任何修改就可以加载到最新的规则从而实现规则的动态变更。</strong></p><h1 id="八-drools实战"><a class="markdownIt-Anchor" href="#八-drools实战"></a> 八、Drools实战</h1><h2 id="81-个人所得税计算器"><a class="markdownIt-Anchor" href="#81-个人所得税计算器"></a> 8.1 个人所得税计算器</h2><p>本小节我们需要通过Drools规则引擎来根据规则计算个人所得税，最终页面效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205242.png" alt="image-20200214132448956"></p><h3 id="811-名词解释"><a class="markdownIt-Anchor" href="#811-名词解释"></a> 8.1.1 名词解释</h3><p>税前月收入：即税前工资，指交纳个人所得税之前的总工资</p><p>应纳税所得额：指按照税法规定确定纳税人在一定期间所获得的所有应税收入减除在该纳税期间依法允许减除的各种支出后的余额</p><p>税率：是对征税对象的征收比例或征收额度</p><p>速算扣除数：指为解决超额累进税率分级计算税额的复杂技术问题，而预先计算出的一个数据，可以简化计算过程</p><p>扣税额：是指实际缴纳的税额</p><p>税后工资：是指扣完税后实际到手的工资收入</p><h3 id="812-计算规则"><a class="markdownIt-Anchor" href="#812-计算规则"></a> 8.1.2 计算规则</h3><p>要实现个人所得税计算器，需要了解如下计算规则：</p><table><thead><tr><th>规则编号</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>计算应纳税所得额</td><td>应纳税所得额为税前工资减去3500</td></tr><tr><td>2</td><td>设置税率，应纳税所得额&lt;=1500</td><td>税率为0.03，速算扣除数为0</td></tr><tr><td>3</td><td>设置税率，应纳税所得额在1500至4500之间</td><td>税率为0.1，速算扣除数为105</td></tr><tr><td>4</td><td>设置税率，应纳税所得额在4500志9000之间</td><td>税率为0.2，速算扣除数为555</td></tr><tr><td>5</td><td>设置税率，应纳税所得额在9000志35000之间</td><td>税率为0.25，速算扣除数为1005</td></tr><tr><td>6</td><td>设置税率，应纳税所得额在35000至55000之间</td><td>税率为0.3，速算扣除数为2755</td></tr><tr><td>7</td><td>设置税率，应纳税所得额在55000至80000之间</td><td>税率为0.35，速算扣除数为5505</td></tr><tr><td>8</td><td>设置税率，应纳税所得额在80000以上</td><td>税率为0.45，速算扣除数为13505</td></tr><tr><td>9</td><td>计算税后工资</td><td>扣税额=应纳税所得额*税率-速算扣除数                                        税后工资=税前工资-扣税额</td></tr></tbody></table><h3 id="813-实现步骤"><a class="markdownIt-Anchor" href="#813-实现步骤"></a> 8.1.3 实现步骤</h3><p>本实战案例我们基于Spring Boot整合Drools的方式来实现。</p><p>第一步：创建maven工程calculation并配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>calculation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--drools规则引擎--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-templates<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建/resources/application.yml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: calculation</span><br></pre></td></tr></table></figure><p>第三步：编写配置类DroolsConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.kie.api.KieBase;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieServices;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieBuilder;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieFileSystem;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieRepository;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieContainer;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.kie.internal.io.ResourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.kie.spring.KModuleBeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规则引擎配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定规则文件存放的目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RULES_PATH = <span class="string">&quot;rules/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieFileSystem <span class="title">kieFileSystem</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;drools.dateformat&quot;</span>,<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        KieFileSystem kieFileSystem = kieServices.newKieFileSystem();</span><br><span class="line">        ResourcePatternResolver resourcePatternResolver = </span><br><span class="line">            <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        Resource[] files = </span><br><span class="line">            resourcePatternResolver.getResources(<span class="string">&quot;classpath*:&quot;</span> + RULES_PATH + <span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        String path = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Resource file : files) &#123;</span><br><span class="line">            path = RULES_PATH + file.getFilename();</span><br><span class="line">            kieFileSystem.write(ResourceFactory.newClassPathResource(path, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kieFileSystem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieContainer <span class="title">kieContainer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieRepository kieRepository = kieServices.getRepository();</span><br><span class="line">        kieRepository.addKieModule(kieRepository::getDefaultReleaseId);</span><br><span class="line">        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem());</span><br><span class="line">        kieBuilder.buildAll();</span><br><span class="line">        <span class="keyword">return</span> kieServices.newKieContainer(kieRepository.getDefaultReleaseId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieBase <span class="title">kieBase</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kieContainer().getKieBase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KModuleBeanFactoryPostProcessor <span class="title">kiePostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KModuleBeanFactoryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：编写实体类Calculation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> wage;<span class="comment">//税前工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> wagemore;<span class="comment">//应纳税所得额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> cess;<span class="comment">//税率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> preminus;<span class="comment">//速算扣除数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> wageminus;<span class="comment">//扣税额</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> actualwage;<span class="comment">//税后工资</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWage</span><span class="params">(<span class="keyword">double</span> wage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wage = wage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getActualwage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actualwage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActualwage</span><span class="params">(<span class="keyword">double</span> actualwage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actualwage = actualwage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWagemore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wagemore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWagemore</span><span class="params">(<span class="keyword">double</span> wagemore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wagemore = wagemore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCess</span><span class="params">(<span class="keyword">double</span> cess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cess = cess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPreminus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preminus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPreminus</span><span class="params">(<span class="keyword">double</span> preminus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.preminus = preminus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWageminus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wageminus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWageminus</span><span class="params">(<span class="keyword">double</span> wageminus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wageminus = wageminus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Calculation&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;wage=&quot;</span> + wage +</span><br><span class="line">                <span class="string">&quot;, actualwage=&quot;</span> + actualwage +</span><br><span class="line">                <span class="string">&quot;, wagemore=&quot;</span> + wagemore +</span><br><span class="line">                <span class="string">&quot;, cess=&quot;</span> + cess +</span><br><span class="line">                <span class="string">&quot;, preminus=&quot;</span> + preminus +</span><br><span class="line">                <span class="string">&quot;, wageminus=&quot;</span> + wageminus +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五步：在resources/rules下创建规则文件calculation.drl文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> calculation</span><br><span class="line"><span class="keyword">import</span> com.itheima.drools.entity.Calculation</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：计算应纳税所得额&quot;</span></span><br><span class="line">    enabled <span class="keyword">true</span></span><br><span class="line">    salience <span class="number">3</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    date-effective <span class="string">&quot;2011-09-01&quot;</span> <span class="comment">//生效日期</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wage&gt;<span class="number">0</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setWagemore($cal.getWage()-<span class="number">3500</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额&lt;=1500&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wagemore &lt;= <span class="number">1500</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.03</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">0</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额在1500至4500之间&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wagemore &gt; <span class="number">1500</span> &amp;&amp; wagemore &lt;= <span class="number">4500</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.1</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">105</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额在4500志9000之间&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wagemore &gt; <span class="number">4500</span> &amp;&amp; wagemore &lt;= <span class="number">9000</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.2</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">555</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额在9000志35000之间&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wagemore &gt; <span class="number">9000</span> &amp;&amp; wagemore &lt;= <span class="number">35000</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.25</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">1005</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额在35000至55000之间&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wagemore &gt; <span class="number">35000</span> &amp;&amp; wagemore &lt;= <span class="number">55000</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.3</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">2755</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额在55000至80000之间&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation()</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.35</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">5505</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：设置税率--&gt;&gt;应纳税所得额在80000以上&quot;</span></span><br><span class="line">    salience <span class="number">2</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;SETCess_Group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wagemore &gt; <span class="number">80000</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setCess(<span class="number">0.45</span>);</span><br><span class="line">        $cal.setPreminus(<span class="number">13505</span>);</span><br><span class="line">        update($cal);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;个人所得税：计算税后工资&quot;</span></span><br><span class="line">    salience <span class="number">1</span></span><br><span class="line">    when</span><br><span class="line">        $cal : Calculation(wage &gt; <span class="number">0</span> &amp;&amp; wagemore &gt; <span class="number">0</span> &amp;&amp; wagemore &gt; <span class="number">0</span> &amp;&amp; cess &gt; <span class="number">0</span>)</span><br><span class="line">    then</span><br><span class="line">        $cal.setWageminus($cal.getWagemore()*$cal.getCess()-$cal.getPreminus());</span><br><span class="line">        $cal.setActualwage($cal.getWage()-$cal.getWageminus());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----税前工资：&quot;</span>+$cal.getWage());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----应纳税所得额：&quot;</span>+$cal.getWagemore());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----税率：&quot;</span> + $cal.getCess());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----速算扣除数：&quot;</span> + $cal.getPreminus());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----扣税额：&quot;</span> + $cal.getWageminus());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----税后工资：&quot;</span> + $cal.getActualwage());</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第六步：创建RuleService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieBase;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用规则引擎，执行规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KieBase kieBase;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//个人所得税计算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Calculation <span class="title">calculate</span><span class="params">(Calculation calculation)</span></span>&#123;</span><br><span class="line">        KieSession kieSession = kieBase.newKieSession();</span><br><span class="line">        kieSession.insert(calculation);</span><br><span class="line">        kieSession.fireAllRules();</span><br><span class="line">        kieSession.dispose();</span><br><span class="line">        <span class="keyword">return</span> calculation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第七步：创建RuleController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuleService ruleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/calculate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Calculation <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> wage)</span></span>&#123;</span><br><span class="line">        Calculation calculation = <span class="keyword">new</span> Calculation();</span><br><span class="line">        calculation.setWage(wage);</span><br><span class="line">        calculation = ruleService.calculate(calculation);</span><br><span class="line">        System.out.println(calculation);</span><br><span class="line">        <span class="keyword">return</span> calculation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第八步：创建启动类DroolsApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DroolsApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第九步：导入静态资源文件到resources/static目录下</p><h2 id="82-信用卡申请"><a class="markdownIt-Anchor" href="#82-信用卡申请"></a> 8.2 信用卡申请</h2><p>本小节我们需要通过Drools规则引擎来根据规则进行申请人的合法性检查，检查通过后再根据规则确定信用卡额度，最终页面效果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205232.png" alt="image-20200214202525859"></p><h3 id="821-计算规则"><a class="markdownIt-Anchor" href="#821-计算规则"></a> 8.2.1 计算规则</h3><p>合法性检查规则如下：</p><table><thead><tr><th>规则编号</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>检查学历与薪水1</td><td>如果申请人既没房也没车，同时学历为大专以下，并且月薪少于5000，那么不通过</td></tr><tr><td>2</td><td>检查学历与薪水2</td><td>如果申请人既没房也没车，同时学历为大专或本科，并且月薪少于3000，那么不通过</td></tr><tr><td>3</td><td>检查学历与薪水3</td><td>如果申请人既没房也没车，同时学历为本科以上，并且月薪少于2000，同时之前没有信用卡的，那么不通过</td></tr><tr><td>4</td><td>检查申请人已有的信用卡数量</td><td>如果申请人现有的信用卡数量大于10，那么不通过</td></tr></tbody></table><p>信用卡额度确定规则：</p><table><thead><tr><th>规则编号</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>规则1</td><td>如果申请人有房有车，或者月收入在20000以上，那么发放的信用卡额度为15000</td></tr><tr><td>2</td><td>规则2</td><td>如果申请人没房没车，但月收入在10000~20000之间，那么发放的信用卡额度为6000</td></tr><tr><td>3</td><td>规则3</td><td>如果申请人没房没车，月收入在10000以下，那么发放的信用卡额度为3000</td></tr><tr><td>4</td><td>规则4</td><td>如果申请人有房没车或者没房但有车，月收入在10000以下，那么发放的信用卡额度为5000</td></tr><tr><td>5</td><td>规则5</td><td>如果申请人有房没车或者是没房但有车，月收入在10000~20000之间，那么发放的信用卡额度为8000</td></tr></tbody></table><h3 id="822-实现步骤"><a class="markdownIt-Anchor" href="#822-实现步骤"></a> 8.2.2 实现步骤</h3><p>第一步：创建maven工程creditCardApply并配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--drools规则引擎--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-templates<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建/resources/application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">creditCardApply</span></span><br></pre></td></tr></table></figure><p>第三步：编写配置类DroolsConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieBase;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieServices;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieBuilder;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieFileSystem;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.KieRepository;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieContainer;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.kie.internal.io.ResourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.kie.spring.KModuleBeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规则引擎配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定规则文件存放的目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RULES_PATH = <span class="string">&quot;rules/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieFileSystem <span class="title">kieFileSystem</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieFileSystem kieFileSystem = kieServices.newKieFileSystem();</span><br><span class="line">        ResourcePatternResolver resourcePatternResolver =</span><br><span class="line">                <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        Resource[] files =</span><br><span class="line">                resourcePatternResolver.getResources(<span class="string">&quot;classpath*:&quot;</span> + RULES_PATH + <span class="string">&quot;*.*&quot;</span>);</span><br><span class="line">        String path = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Resource file : files) &#123;</span><br><span class="line">            path = RULES_PATH + file.getFilename();</span><br><span class="line">            kieFileSystem.write(ResourceFactory.newClassPathResource(path, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kieFileSystem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieContainer <span class="title">kieContainer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieRepository kieRepository = kieServices.getRepository();</span><br><span class="line">        kieRepository.addKieModule(kieRepository::getDefaultReleaseId);</span><br><span class="line">        KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem());</span><br><span class="line">        kieBuilder.buildAll();</span><br><span class="line">        <span class="keyword">return</span> kieServices.newKieContainer(kieRepository.getDefaultReleaseId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KieBase <span class="title">kieBase</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kieContainer().getKieBase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KModuleBeanFactoryPostProcessor <span class="title">kiePostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KModuleBeanFactoryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：编写实体类CreditCardApplyInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 信用卡申请信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreditCardApplyInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EDUCATION_1 = <span class="string">&quot;专科以下&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EDUCATION_2 = <span class="string">&quot;专科&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EDUCATION_3 = <span class="string">&quot;本科&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EDUCATION_4 = <span class="string">&quot;本科以上&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String education;</span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> monthlyIncome = <span class="number">0</span>;<span class="comment">//月收入</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasHouse = <span class="keyword">false</span>;<span class="comment">//是否有房</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasCar = <span class="keyword">false</span>;<span class="comment">//是否有车</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hasCreditCardCount = <span class="number">0</span>;<span class="comment">//现持有信用卡数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkResult = <span class="keyword">true</span>;<span class="comment">//审核是否通过</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> quota = <span class="number">0</span>;<span class="comment">//额度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEducation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> education;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEducation</span><span class="params">(String education)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.education = education;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTelephone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> telephone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTelephone</span><span class="params">(String telephone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.telephone = telephone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMonthlyIncome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monthlyIncome;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonthlyIncome</span><span class="params">(<span class="keyword">double</span> monthlyIncome)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.monthlyIncome = monthlyIncome;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHasHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasHouse</span><span class="params">(<span class="keyword">boolean</span> hasHouse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasHouse = hasHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHasCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasCar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasCar</span><span class="params">(<span class="keyword">boolean</span> hasCar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasCar = hasCar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHasCreditCardCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasCreditCardCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasCreditCardCount</span><span class="params">(<span class="keyword">int</span> hasCreditCardCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hasCreditCardCount = hasCreditCardCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCheckResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCheckResult</span><span class="params">(<span class="keyword">boolean</span> checkResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.checkResult = checkResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getQuota</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> quota;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuota</span><span class="params">(<span class="keyword">double</span> quota)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quota = quota;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkResult)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;审核通过，信用卡额度为：&quot;</span> + quota;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;审核不通过&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第五步：在resources/rules下创建规则文件creditCardApply.drl文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//合法性检查</span></span><br><span class="line">rule <span class="string">&quot;如果申请人既没房也没车，同时学历为大专以下，并且月薪少于5000，那么不通过&quot;</span></span><br><span class="line">    salience <span class="number">10</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(hasCar == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                hasHouse == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                education == CreditCardApplyInfo.EDUCATION_1 &amp;&amp;</span><br><span class="line">                                monthlyIncome &lt; <span class="number">5000</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setCheckResult(<span class="keyword">false</span>);</span><br><span class="line">        drools.halt();</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人既没房也没车，同时学历为大专或本科，并且月薪少于3000，那么不通过&quot;</span></span><br><span class="line">    salience <span class="number">10</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(hasCar == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                hasHouse == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                (education == CreditCardApplyInfo.EDUCATION_2  ||</span><br><span class="line">                                education == CreditCardApplyInfo.EDUCATION_3) &amp;&amp;</span><br><span class="line">                                monthlyIncome &lt; <span class="number">3000</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setCheckResult(<span class="keyword">false</span>);</span><br><span class="line">        drools.halt();</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人既没房也没车，同时学历为本科以上，并且月薪少于2000，同时之前没有信用卡的，那么不通过&quot;</span></span><br><span class="line">    salience <span class="number">10</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(hasCar == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                hasHouse == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                education == CreditCardApplyInfo.EDUCATION_4 &amp;&amp;</span><br><span class="line">                                monthlyIncome &lt; <span class="number">2000</span> &amp;&amp;</span><br><span class="line">                                hasCreditCardCount == <span class="number">0</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setCheckResult(<span class="keyword">false</span>);</span><br><span class="line">        drools.halt();</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人现有的信用卡数量大于10，那么不通过&quot;</span></span><br><span class="line">    salience <span class="number">10</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(hasCreditCardCount &gt; <span class="number">10</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setCheckResult(<span class="keyword">false</span>);</span><br><span class="line">        drools.halt();</span><br><span class="line">end</span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//确定额度</span></span><br><span class="line">rule <span class="string">&quot;如果申请人有房有车，或者月收入在20000以上，那么发放的信用卡额度为15000&quot;</span></span><br><span class="line">    salience <span class="number">1</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;quota_group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(checkResult == <span class="keyword">true</span> &amp;&amp;</span><br><span class="line">                                ((hasHouse == <span class="keyword">true</span> &amp;&amp; hasCar == <span class="keyword">true</span>) ||</span><br><span class="line">                                (monthlyIncome &gt; <span class="number">20000</span>)))</span><br><span class="line">    then</span><br><span class="line">        $c.setQuota(<span class="number">15000</span>);</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人没房没车，但月收入在10000~20000之间，那么发放的信用卡额度为6000&quot;</span></span><br><span class="line">    salience <span class="number">1</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;quota_group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(checkResult == <span class="keyword">true</span> &amp;&amp;</span><br><span class="line">                                hasHouse == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                hasCar == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                monthlyIncome &gt;= <span class="number">10000</span> &amp;&amp;</span><br><span class="line">                                monthlyIncome &lt;= <span class="number">20000</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setQuota(<span class="number">6000</span>);</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人没房没车，月收入在10000以下，那么发放的信用卡额度为3000&quot;</span></span><br><span class="line">    salience <span class="number">1</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;quota_group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(checkResult == <span class="keyword">true</span> &amp;&amp;</span><br><span class="line">                                        hasHouse == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                        hasCar == <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                                        monthlyIncome &lt; <span class="number">10000</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setQuota(<span class="number">3000</span>);</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人有房没车或者没房但有车，月收入在10000以下，那么发放的信用卡额度为5000&quot;</span></span><br><span class="line">    salience <span class="number">1</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;quota_group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(checkResult == <span class="keyword">true</span> &amp;&amp;</span><br><span class="line">                                ((hasHouse == <span class="keyword">true</span> &amp;&amp; hasCar == <span class="keyword">false</span>) ||</span><br><span class="line">                                (hasHouse == <span class="keyword">false</span> &amp;&amp; hasCar == <span class="keyword">true</span>)) &amp;&amp;</span><br><span class="line">                                monthlyIncome &lt; <span class="number">10000</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setQuota(<span class="number">5000</span>);</span><br><span class="line">end</span><br><span class="line">rule <span class="string">&quot;如果申请人有房没车或者是没房但有车，月收入在10000~20000之间，那么发放的信用卡额度为8000&quot;</span></span><br><span class="line">    salience <span class="number">1</span></span><br><span class="line">    no-loop <span class="keyword">true</span></span><br><span class="line">    activation-group <span class="string">&quot;quota_group&quot;</span></span><br><span class="line">    when</span><br><span class="line">        $c:CreditCardApplyInfo(checkResult == <span class="keyword">true</span> &amp;&amp;</span><br><span class="line">                                ((hasHouse == <span class="keyword">true</span> &amp;&amp; hasCar == <span class="keyword">false</span>) ||</span><br><span class="line">                                (hasHouse == <span class="keyword">false</span> &amp;&amp; hasCar == <span class="keyword">true</span>)) &amp;&amp;</span><br><span class="line">                                monthlyIncome &gt;= <span class="number">10000</span> &amp;&amp;</span><br><span class="line">                                monthlyIncome &lt;= <span class="number">20000</span>)</span><br><span class="line">    then</span><br><span class="line">        $c.setQuota(<span class="number">8000</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>第六步：创建RuleService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieBase;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KieBase kieBase;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用Drools规则引擎实现信用卡申请</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CreditCardApplyInfo <span class="title">creditCardApply</span><span class="params">(CreditCardApplyInfo creditCardApplyInfo)</span></span>&#123;</span><br><span class="line">        KieSession session = kieBase.newKieSession();</span><br><span class="line">        session.insert(creditCardApplyInfo);</span><br><span class="line">        session.fireAllRules();</span><br><span class="line">        session.dispose();</span><br><span class="line">        <span class="keyword">return</span> creditCardApplyInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第七步：创建RuleController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuleService ruleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/creditCardApply&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CreditCardApplyInfo <span class="title">creditCardApply</span><span class="params">(<span class="meta">@RequestBody</span> </span></span></span><br><span class="line"><span class="params"><span class="function">        CreditCardApplyInfo creditCardApplyInfo)</span></span>&#123;</span><br><span class="line">        creditCardApplyInfo = ruleService.creditCardApply(creditCardApplyInfo);</span><br><span class="line">        <span class="keyword">return</span> creditCardApplyInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第八步：创建启动类DroolsApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DroolsApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第九步：导入静态资源文件到resources/static目录下</p><h2 id="83-保险产品准入规则"><a class="markdownIt-Anchor" href="#83-保险产品准入规则"></a> 8.3 保险产品准入规则</h2><h3 id="831-决策表"><a class="markdownIt-Anchor" href="#831-决策表"></a> 8.3.1 决策表</h3><p>前面的课程中我们编写的规则文件都是drl形式的文件，Drools除了支持drl形式的文件外还支持xls格式的文件（即Excel文件）。这种xls格式的文件通常称为决策表（decision table）。</p><p>决策表（decision table）是一个“精确而紧凑的”表示条件逻辑的方式，非常适合商业级别的规则。决策表与现有的drl文件可以无缝替换。Drools提供了相应的API可以将xls文件编译为drl格式的字符串。</p><p>一个决策表的例子如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205222.png" alt="image-20200217160930138"></p><p>决策表语法：</p><table><thead><tr><th>关键字</th><th>说明</th><th>是否必须</th></tr></thead><tbody><tr><td>RuleSet</td><td>相当于drl文件中的package</td><td>必须，只能有一个。如果没有设置RuleSet对应的值则使用默认值rule_table</td></tr><tr><td>Sequential</td><td>取值为Boolean类型。true表示规则按照表格自上到下的顺序执行，false表示乱序</td><td>可选</td></tr><tr><td>Import</td><td>相当于drl文件中的import，如果引入多个类则类之间用逗号分隔</td><td>可选</td></tr><tr><td>Variables</td><td>相当于drl文件中的global，用于定义全局变量，如果有多个全局变量则中间用逗号分隔</td><td>可选</td></tr><tr><td>RuleTable</td><td>它指示了后面将会有一批rule，RuleTable的名称将会作为以后生成rule的前缀</td><td>必须</td></tr><tr><td>CONDITION</td><td>规则条件关键字，相当于drl文件中的when。下面两行则表示 LHS 部分，第三行则为注释行，不计为规则部分，从第四行开始，每一行表示一条规则</td><td>每个规则表至少有一个</td></tr><tr><td>ACTION</td><td>规则结果关键字，相当于drl文件中的then</td><td>每个规则表至少有一个</td></tr><tr><td>NO-LOOP</td><td>相当于drl文件中的no-loop</td><td>可选</td></tr><tr><td>AGENDA-GROUP</td><td>相当于drl文件中的agenda-group</td><td>可选</td></tr></tbody></table><p>在决策表中还经常使用到占位符，语法为$后面加数字，用于替换每条规则中设置的具体值。</p><p>上面的决策表例子转换为drl格式的规则文件内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rules;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">global java.util.List listRules;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;personCheck_10&quot;</span></span><br><span class="line">salience <span class="number">65535</span></span><br><span class="line">agenda-group <span class="string">&quot;sign&quot;</span></span><br><span class="line">when</span><br><span class="line">$person : PersonInfoEntity(sex != <span class="string">&quot;男&quot;</span>)</span><br><span class="line">then</span><br><span class="line">listRules.add(<span class="string">&quot;性别不对&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;personCheck_11&quot;</span></span><br><span class="line">salience <span class="number">65534</span></span><br><span class="line">agenda-group <span class="string">&quot;sign&quot;</span></span><br><span class="line">when</span><br><span class="line">$person : PersonInfoEntity(age &lt; <span class="number">22</span> || age &gt; <span class="number">25</span>)</span><br><span class="line">then</span><br><span class="line">listRules.add(<span class="string">&quot;年龄不合适&quot;</span>);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;personCheck_12&quot;</span></span><br><span class="line">salience <span class="number">65533</span></span><br><span class="line">agenda-group <span class="string">&quot;sign&quot;</span></span><br><span class="line">when</span><br><span class="line">$person : PersonInfoEntity(salary &lt; <span class="number">10000</span>)</span><br><span class="line">then</span><br><span class="line">listRules.add(<span class="string">&quot;工资太低了&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>要进行决策表相关操作，需要导入如下maven坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-decisiontables<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.10.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过下图可以发现，由于maven的依赖传递特性在导入drools-decisiontables坐标后，drools-core和drools-compiler等坐标也被传递了过来</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205216.png" alt="image-20200218105819932"></p><p>Drools提供的将xls文件编译为drl格式字符串的API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String realPath = <span class="string">&quot;C:\\testRule.xls&quot;</span>;<span class="comment">//指定决策表xls文件的磁盘路径</span></span><br><span class="line">File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">SpreadsheetCompiler compiler = <span class="keyword">new</span> SpreadsheetCompiler();</span><br><span class="line">String drl = compiler.compile(is, InputType.XLS);</span><br></pre></td></tr></table></figure><p>Drools还提供了基于drl格式字符串创建KieSession的API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KieHelper kieHelper = <span class="keyword">new</span> KieHelper();</span><br><span class="line">kieHelper.addContent(drl, ResourceType.DRL);</span><br><span class="line">KieSession session = kieHelper.build().newKieSession();</span><br></pre></td></tr></table></figure><p>基于决策表的入门案例：</p><p>第一步：创建maven工程drools_decisiontable_demo并配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-decisiontables<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.10.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建实体类PersonInfoEntity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonInfoEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：创建xls规则文件（可以直接使用资料中提供的testRule.xls文件）</p><p>第四步：创建单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String realPath = <span class="string">&quot;d:\\testRule.xls&quot;</span>;<span class="comment">//指定决策表xls文件的磁盘路径</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    SpreadsheetCompiler compiler = <span class="keyword">new</span> SpreadsheetCompiler();</span><br><span class="line">    String drl = compiler.compile(is, InputType.XLS);</span><br><span class="line"></span><br><span class="line">    System.out.println(drl);</span><br><span class="line">    KieHelper kieHelper = <span class="keyword">new</span> KieHelper();</span><br><span class="line">    kieHelper.addContent(drl, ResourceType.DRL);</span><br><span class="line">    KieSession session = kieHelper.build().newKieSession();</span><br><span class="line"></span><br><span class="line">    PersonInfoEntity personInfoEntity = <span class="keyword">new</span> PersonInfoEntity();</span><br><span class="line">    personInfoEntity.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    personInfoEntity.setAge(<span class="number">35</span>);</span><br><span class="line">    personInfoEntity.setSalary(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    session.setGlobal(<span class="string">&quot;listRules&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">    session.insert(personInfoEntity);</span><br><span class="line">    </span><br><span class="line">    session.getAgenda().getAgendaGroup(<span class="string">&quot;sign&quot;</span>).setFocus();</span><br><span class="line">    </span><br><span class="line">    session.fireAllRules();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    session.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="832-规则介绍"><a class="markdownIt-Anchor" href="#832-规则介绍"></a> 8.3.2 规则介绍</h3><p>各保险公司针对人身、财产推出了不同的保险产品，作为商业保险公司，筛选出符合公司利益最大化的客户是非常重要的，即各保险产品的准入人群是不同的，也就是说保险公司会针对不同的人群特征，制定不同的产品缴费和赔付规则。</p><p>我们来看一下某保险产品准入规则的简化版，当不满足以下规则时，系统模块需要返回准入失败标识和失败原因</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">规则1：  保险公司是：PICC</span><br><span class="line">规则2：  销售区域是：北京、天津</span><br><span class="line">规则3：  投保人年龄：0 ~ 17岁</span><br><span class="line">规则4：  保险期间是：20年、25年、30年</span><br><span class="line">规则5：  缴费方式是：趸交（一次性交清）或年交</span><br><span class="line">规则6：  保险期与交费期规则一：保险期间为20年期交费期间最长10年交且不能选择[趸交]</span><br><span class="line">规则7：  保险期与交费期规则二：保险期间为25年期交费期间最长15年交且不能选择[趸交]</span><br><span class="line">规则8：  保险期与交费期规则三：保险期间为30年期交费期间最长20年交且不能选择[趸交]</span><br><span class="line">规则9：  被保人要求：（投保年龄+保险期间）不得大于40周岁</span><br><span class="line">规则10： 保险金额规则：投保时约定，最低为5万元，超过部分必须为1000元的整数倍</span><br><span class="line">规则11： 出单基本保额限额规则：线上出单基本保额限额62.5万元，超62.5万元需配合契调转线下出单</span><br></pre></td></tr></table></figure><p>在本案例中规则文件是一个Excel文件，业务人员可以直接更改这个文件中指标的值，系统不需要做任何变更。</p><h3 id="833-实现步骤"><a class="markdownIt-Anchor" href="#833-实现步骤"></a> 8.3.3 实现步骤</h3><p>本案例还是基于Spring Boot整合Drools的架构来实现。</p><p>第一步：创建maven工程insuranceInfoCheck并配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--drools规则引擎--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-templates<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建/resources/application.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: insuranceInfoCheck</span><br></pre></td></tr></table></figure><p>第三步：创建实体类InsuranceInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保险信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsuranceInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String param1;<span class="comment">//保险公司</span></span><br><span class="line">    <span class="keyword">private</span> String param2;<span class="comment">//方案代码</span></span><br><span class="line">    <span class="keyword">private</span> String param3;<span class="comment">//渠道号</span></span><br><span class="line">    <span class="keyword">private</span> String param4;<span class="comment">//销售区域</span></span><br><span class="line">    <span class="keyword">private</span> String param5;<span class="comment">//投保年龄</span></span><br><span class="line">    <span class="keyword">private</span> String param6;<span class="comment">//保险期间</span></span><br><span class="line">    <span class="keyword">private</span> String param7;<span class="comment">//缴费期间</span></span><br><span class="line">    <span class="keyword">private</span> String param8;<span class="comment">//缴费方式</span></span><br><span class="line">    <span class="keyword">private</span> String param9;<span class="comment">//保障类型</span></span><br><span class="line">    <span class="keyword">private</span> String param10;<span class="comment">//等待期</span></span><br><span class="line">    <span class="keyword">private</span> String param11;<span class="comment">//犹豫期</span></span><br><span class="line">    <span class="keyword">private</span> String param12;<span class="comment">//职业类型</span></span><br><span class="line">    <span class="keyword">private</span> String param13;<span class="comment">//保额限制</span></span><br><span class="line">    <span class="keyword">private</span> String param14;<span class="comment">//免赔额</span></span><br><span class="line">    <span class="keyword">private</span> String param15;<span class="comment">//主险保额</span></span><br><span class="line">    <span class="keyword">private</span> String param16;<span class="comment">//主险保费</span></span><br><span class="line">    <span class="keyword">private</span> String param17;<span class="comment">//附加险保额</span></span><br><span class="line">    <span class="keyword">private</span> String param18;<span class="comment">//附加险保费</span></span><br><span class="line">    <span class="keyword">private</span> String param19;<span class="comment">//与投保人关系</span></span><br><span class="line">    <span class="keyword">private</span> String param20;<span class="comment">//与被保人关系</span></span><br><span class="line">    <span class="keyword">private</span> String param21;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String param22;<span class="comment">//证件</span></span><br><span class="line">    <span class="keyword">private</span> String param23;<span class="comment">//保费</span></span><br><span class="line">    <span class="keyword">private</span> String param24;<span class="comment">//保额</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter setter省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：创建决策表文件（也可以直接使用实战资料中提供的insuranceInfoCheck.xls文件）</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img20210703205155.png" alt="image-20200218120618384"></p><p>第五步：封装工具类KieSessionUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.drools.decisiontable.InputType;</span><br><span class="line"><span class="keyword">import</span> org.drools.decisiontable.SpreadsheetCompiler;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.Message;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.builder.Results;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.io.ResourceType;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.kie.internal.utils.KieHelper;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KieSessionUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">KieSessionUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把xls文件解析为String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDRL</span> <span class="params">(String realPath)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(realPath); <span class="comment">// 例如：C:\\abc.xls</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        SpreadsheetCompiler compiler = <span class="keyword">new</span> SpreadsheetCompiler();</span><br><span class="line">        String drl = compiler.compile(is, InputType.XLS);</span><br><span class="line">        System.out.println(drl);</span><br><span class="line">        <span class="keyword">return</span> drl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// drl为含有内容的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KieSession <span class="title">createKieSessionFromDRL</span><span class="params">(String drl)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        KieHelper kieHelper = <span class="keyword">new</span> KieHelper();</span><br><span class="line">        kieHelper.addContent(drl, ResourceType.DRL);</span><br><span class="line">        Results results = kieHelper.verify();</span><br><span class="line">        <span class="keyword">if</span> (results.hasMessages(Message.Level.WARNING, Message.Level.ERROR)) &#123;</span><br><span class="line">            List&lt;Message&gt; messages = results.getMessages(Message.Level.WARNING, Message.Level.ERROR);</span><br><span class="line">            <span class="keyword">for</span> (Message message : messages) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Error: &quot;</span>+message.getText());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// throw new IllegalStateException(&quot;Compilation errors were found. Check the logs.&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kieHelper.build().newKieSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// realPath为Excel文件绝对路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KieSession <span class="title">getKieSessionFromXLS</span><span class="params">(String realPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createKieSessionFromDRL(getDRL(realPath));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第六步：创建RuleService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">insuranceInfoCheck</span><span class="params">(InsuranceInfo insuranceInfo)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        KieSession session = KieSessionUtils.getKieSessionFromXLS(<span class="string">&quot;D:\\rules.xls&quot;</span>);</span><br><span class="line">        session.getAgenda().getAgendaGroup(<span class="string">&quot;sign&quot;</span>).setFocus();</span><br><span class="line"></span><br><span class="line">        session.insert(insuranceInfo);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listRules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        session.setGlobal(<span class="string">&quot;listRules&quot;</span>, listRules);</span><br><span class="line"></span><br><span class="line">        session.fireAllRules();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> listRules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第七步：创建RuleController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuleService ruleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/insuranceInfoCheck&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">insuranceInfoCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模拟数据，实际应为页面传递过来</span></span><br><span class="line">        InsuranceInfo insuranceInfo = <span class="keyword">new</span> InsuranceInfo();</span><br><span class="line">        insuranceInfo.setParam1(<span class="string">&quot;picc&quot;</span>);</span><br><span class="line">        insuranceInfo.setParam4(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        insuranceInfo.setParam5(<span class="string">&quot;101&quot;</span>);</span><br><span class="line">        insuranceInfo.setParam6(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        insuranceInfo.setParam7(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        insuranceInfo.setParam8(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        insuranceInfo.setParam13(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; list = ruleService.insuranceInfoCheck(insuranceInfo);</span><br><span class="line">            <span class="keyword">if</span>(list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                map.put(<span class="string">&quot;checkResult&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">                map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;准入失败&quot;</span>);</span><br><span class="line">                map.put(<span class="string">&quot;detail&quot;</span>,list);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(<span class="string">&quot;checkResult&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">                map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;准入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;checkResult&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第八步：创建启动类DroolsApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DroolsApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> drools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux IP命令</title>
      <link href="/2021/07/02/Linux-IP%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/07/02/Linux-IP%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一-引言"><a class="markdownIt-Anchor" href="#一-引言"></a> 一、引言</h1><blockquote><p>linux的<strong>ip</strong>命令和<strong>ifconfig</strong>类似，但前者功能更强大，并旨在取代后者。使用ip命令，只需一个命令，你就能很轻松地执行一些网络管理任务。ifconfig是net-tools中已被废弃使用的一个命令，许多年前就已经没有维护了。iproute2套件里提供了许多增强功能的命令，ip命令即是其中之一</p></blockquote><h1 id="二-简介"><a class="markdownIt-Anchor" href="#二-简介"></a> 二、简介</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@localhost</span> ~]<span class="comment"># ip</span></span><br><span class="line"><span class="symbol">Usage:</span> ip [ OPTIONS ] OBJECT &#123; COMMAND <span class="params">| help &#125;</span></span><br><span class="line"><span class="params">       ip [ -force ] -batch filename</span></span><br><span class="line"><span class="params">where  OBJECT := &#123; link |</span> addr <span class="params">| addrlabel |</span> route <span class="params">| rule |</span> neigh <span class="params">| ntable |</span></span><br><span class="line">                   tunnel <span class="params">| tuntap |</span> maddr <span class="params">| mroute |</span> mrule <span class="params">| monitor |</span> xfrm <span class="params">|</span></span><br><span class="line"><span class="params">                   netns |</span> l2tp <span class="params">| tcp_metrics |</span> token &#125;</span><br><span class="line">       OPTIONS <span class="symbol">:</span>= &#123; -V[ersion] <span class="params">| -s[tatistics] |</span> -d[etails] <span class="params">| -r[esolve] |</span></span><br><span class="line">                    -f[amily] &#123; inet <span class="params">| inet6 |</span> ipx <span class="params">| dnet |</span> bridge <span class="params">| link &#125; |</span></span><br><span class="line">                    -<span class="number">4</span> <span class="params">| -6 |</span> -I <span class="params">| -D |</span> -B <span class="params">| -0 |</span></span><br><span class="line">                    -l[oops] &#123; maximum-addr-flush-attempts &#125; <span class="params">|</span></span><br><span class="line"><span class="params">                    -o[neline] |</span> -t[imestamp] <span class="params">| -b[atch] [filename] |</span></span><br><span class="line">                    -rc[vbuf] [size]&#125;</span><br></pre></td></tr></table></figure><h2 id="1-options"><a class="markdownIt-Anchor" href="#1-options"></a> 1 OPTIONS</h2><p>OPTIONS：选项。</p><ul><li>-s：显示出该设备的统计数据(statistics)，例如总接受封包数等；</li></ul><p>OBJECT：动作对象，就是是可以针对哪些网络设备对象进行动作。</p><ul><li>link：关于设备 (device) 的相关设定，包括 MTU，MAC 地址等。</li><li>addr/address：关于额外的 IP 设定，例如多 IP 的实现等。</li><li>route ：与路由有关的相关设定。</li></ul><h1 id="三-常用命令"><a class="markdownIt-Anchor" href="#三-常用命令"></a> 三、常用命令</h1><h2 id="查看网络接口信息"><a class="markdownIt-Anchor" href="#查看网络接口信息"></a> 查看网络接口信息</h2><blockquote><p>可以查看是否为静态IP地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看接口</span></span><br><span class="line">ip addr show </span><br><span class="line">ip addr</span><br><span class="line">ip a</span><br><span class="line"><span class="comment"># 解释</span></span><br><span class="line">[add|del]：</span><br><span class="line">add|del：进行相关参数的增加(add)或删除(del)设定。</span><br><span class="line">show：显示详细信息。</span><br><span class="line">IP 参数 ：主要就是网域的设定，例如 192.168.100.100/24 之类的设定。</span><br><span class="line">[dev 设备名]：IP 参数所要设定的设备，例如eth0, eth1等。</span><br><span class="line">[相关参数]：</span><br><span class="line">broadcast：设定广播位址，如果设定值是 + 表示让系统自动计算；</span><br><span class="line">label：该设备的别名，例如eth0:0；</span><br><span class="line">scope：这个设备的领域，默认global，通常是以下几个大类：</span><br><span class="line">global：允许来自所有来源的连线；</span><br><span class="line">site：仅支持IPv6 ，仅允许本主机的连接；</span><br><span class="line">link：仅允许本设备自我连接；</span><br><span class="line">host：仅允许本主机内部的连接；</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>valid_lft 7153sec preferred_lft 3553sec 代表动态IP地址</p><p>valid_lft forever preferred_lft forever 有效期永久代表静态IP地址</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702104308.png" alt="命令行"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702105002.png" alt="image-20210702105002235"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip -s link show em1</span><br></pre></td></tr></table></figure><blockquote><p>输出发送接收的信息</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702105210.png" alt="image-20210702105210778"></p><h2 id="添加-删除ip地址"><a class="markdownIt-Anchor" href="#添加-删除ip地址"></a> 添加、删除IP地址</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip address add 192.168.1.232 dev ens160</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a del 192.168.1.232 dev ens160</span><br></pre></td></tr></table></figure><h2 id="启用-禁用网络接口"><a class="markdownIt-Anchor" href="#启用-禁用网络接口"></a> 启用、禁用网络接口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set ens160 down</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set ens160 up</span><br></pre></td></tr></table></figure><h2 id="查看路由信息"><a class="markdownIt-Anchor" href="#查看路由信息"></a> 查看路由信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">ip route [add|del] [IP或网域] [via gateway] [dev 设备]</span><br><span class="line">[IP或网域]：可使用192.168.50.0/24之类的网域或者是单纯的 IP 。</span><br><span class="line">[via gateway]：从哪个gateway出去，不一定需要。</span><br><span class="line">[dev 设备名]：所要设定的设备，例如eth0, eth1等。</span><br><span class="line"><span class="comment"># 显示详细信息</span></span><br><span class="line">ip route show</span><br></pre></td></tr></table></figure><h1 id="四-表格"><a class="markdownIt-Anchor" href="#四-表格"></a> 四、表格</h1><table><thead><tr><th style="text-align:left">需求</th><th>iproute</th><th>net-tools</th></tr></thead><tbody><tr><td style="text-align:left">显示所有已连接的网络接口</td><td>ip link show</td><td>ifconfig -a</td></tr><tr><td style="text-align:left">激活或停用网络接口</td><td>ip link set down eth1 <br>ip link set up eth1</td><td>ifconfig   eth1 up<br>ifconfig   eth1 down</td></tr><tr><td style="text-align:left">为网络接口分配IPv4地址</td><td>ip addr add 10.0.0.1/24 dev th1</td><td>ifconfig eth1 10.0.0.1/24</td></tr><tr><td style="text-align:left">给同一个接口分配多个IP地址</td><td>ip addr add 10.0.0.1/24 broadcast 10.0.0.255 dev eth1</td><td>ifconfig eth1 add 10.0.0.1</td></tr><tr><td style="text-align:left">移除网络接口的IPv4地址</td><td>ip addr del 10.0.0.1/24 dev eth1</td><td>ifconfig eth1 add 0</td></tr><tr><td style="text-align:left">显示网络接口的IPv4地址</td><td>ip addr show dev eth1</td><td>ipconfig eth1</td></tr><tr><td style="text-align:left">查看IP路由表</td><td>ip route show</td><td>route -n<br>netstat -rn</td></tr><tr><td style="text-align:left">添加修改默认路由</td><td>ip route add default via 192.168.1.2 dev eth0<br>ip route replace default via 192.168.1.2 dev eth0</td><td>route add default  gw 192.16.1.2 dev eth0<br>route del default  gw 192.16.1.2 dev eth0<br></td></tr><tr><td style="text-align:left">添加移除静态路由</td><td>ip route add 10.1.2.0/24 via 192.168.1.1 dev eth0<br>ip route del 10.1.2.0/24</td><td>route add  -net 10.1.2.0/24 gw 192.168.1.1 dev eth0<br>route del -net 10.1.2.0/24</td></tr><tr><td style="text-align:left">查看套接字统计信息</td><td>ss<br>ss -l</td><td>netstat<br>netstat -l</td></tr><tr><td style="text-align:left">查看ARP表</td><td>ip neigh</td><td>arp -an</td></tr><tr><td style="text-align:left">添加或删除静态arp</td><td>ip neigh add 192.168.1.100 lladdr 00:01:22:c3:5b:ef dev eth0<br>ip neigh del 192.168.1.100 dev etho</td><td>arp -s  192.168.1.100 00:01:22:c3:5b:ef<br>arp -d 192.168.1.100</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的寻址问题</title>
      <link href="/2021/07/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%BB%E5%9D%80%E9%97%AE%E9%A2%98/"/>
      <url>/2021/07/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%BB%E5%9D%80%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络的寻址问题"><a class="markdownIt-Anchor" href="#计算机网络的寻址问题"></a> 计算机网络的寻址问题</h1><h2 id="ip地址与mac地址"><a class="markdownIt-Anchor" href="#ip地址与mac地址"></a> IP地址与MAC地址</h2><h3 id="1-什么是mac地址"><a class="markdownIt-Anchor" href="#1-什么是mac地址"></a> 1. 什么是MAC地址</h3><p><strong>MAC地址的作用:</strong></p><blockquote><p>一段链路(或者同一网络内)对网络接口的标识,MAC为物理地址,从属于数据链路层</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702095752.png" alt="image-20210701212738368"></p><h3 id="2-什么是ip地址"><a class="markdownIt-Anchor" href="#2-什么是ip地址"></a> 2. 什么是IP地址</h3><p><strong>IP地址的作用:</strong></p><blockquote><p>是采用TCP/IP体系的互联网所采用的地址</p></blockquote><p><strong>IP地址的构成:</strong></p><blockquote><p>网络号用于标识互联网中的各个网络,主机号用于标识同一网络的个各个主机</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702095759.png" alt="image-20210701213144961"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702095809.png" alt="image-20210701213307849"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702095821.png" alt="image-20210701213530781"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702095829.png" alt="image-20210701213845108"></p><h3 id="3-ip地址与mac地址的关系"><a class="markdownIt-Anchor" href="#3-ip地址与mac地址的关系"></a> 3. IP地址与MAC地址的关系</h3><ul><li><p>如果仅使用数据链路层和物理层来通信,则可以只使用MAC地址进行寻址</p></li><li><p>如果接入互联网通信,则网络层使用IP寻址,数据链路层使用MAC地址寻址</p><ul><li>路由器根据数据包的目的IP地址中的网络号已经自身路由表对数据进行转发</li><li>当数据包到达目标网络时,根据数据包的目的MAC地址将其交付给目的主机</li></ul></li></ul><h4 id="4-地址解析协议arp"><a class="markdownIt-Anchor" href="#4-地址解析协议arp"></a> 4. 地址解析协议ARP</h4><ul><li>在ARP高速缓存表中查找目的IP地址对应的MAC地址</li><li>广播发送ARP请求</li><li>单播发送ARP响应</li><li>ARP告诉缓存表的更新:动态条目与静态条目</li><li>ARP的作用范围:一段链路或同一网络内</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 配置双网关 双Ip</title>
      <link href="/2021/06/29/Windows-%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%85%B3-%E5%8F%8CIp/"/>
      <url>/2021/06/29/Windows-%E9%85%8D%E7%BD%AE%E5%8F%8C%E7%BD%91%E5%85%B3-%E5%8F%8CIp/</url>
      
        <content type="html"><![CDATA[<h1 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h1><ol><li>打开控制面板-&gt; 网络和 Internet-&gt; 网络连接</li><li>手动设置外网IP、网关、DNS服务等</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210629105148.png" alt="外网自定义设置"></p><ol start="3"><li>点击高级手动添加内网IP、子网、网关</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210629105411.png" alt="内网设置"></p><ol start="4"><li><p>管理员权限打开CMD控制台</p></li><li><p>添加路由转发</p></li></ol><blockquote><p>配置 172.0.0.0 的网域通过172.16.7.1转发</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add -p 172.0.0.0 mask 255.0.0.0 172.16.7.1</span><br></pre></td></tr></table></figure><h1 id="windows-路由命令"><a class="markdownIt-Anchor" href="#windows-路由命令"></a> windows 路由命令</h1><h3 id="1-route命令的基本用法"><a class="markdownIt-Anchor" href="#1-route命令的基本用法"></a> 1. route命令的基本用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROUTE [-f] [-p] [-4|-6] command [destination] [MASK mask] [gateway] [METRIC metric] [IF interface]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>[-f]</td><td>清除所有网关项的路由表。这个参数慎用。</td></tr><tr><td>[-p]</td><td>增加永久路由。在默认情况下，重启系统之后，<br>我们用add命令增加的路由是不会被保存的，-p参数和add命令结合使用的时候，<br>可以增加永久保存路由。<br>永久路由保存在注册表的这个位置：HKEY_LOCAL_MACH/SYSTEM/CurrentControlSet/Services/Tcpip/Parameters/PersistentRoutescommand。</td></tr><tr><td>[-4]</td><td>IPv4网络</td></tr><tr><td>[-6]</td><td>IPv6网络</td></tr><tr><td>[command]</td><td>共有4个命令：print, add, delete, change</td></tr><tr><td>[destination]</td><td>目标地址，结合MASK，可以定义主机或者网段。</td></tr><tr><td>[mask]</td><td>定义子网掩码，如果没有定义mask，默认为255.255.255.255，说明destination是一台主机，而不是一个网段</td></tr><tr><td>[gateway]</td><td>定义网关的地址，就是数据的下一跳地址。如果不指定，系统会查找最佳的网关</td></tr><tr><td>[metric]</td><td>定义跳数，这个一般用不到。当到同一目的地有多条路径的时候，系统会选择metric值最小的路由。</td></tr><tr><td>[if]</td><td>定义网卡。</td></tr><tr><td>[interface]</td><td>网卡的接口号码，在使用route print命令的时候，可以看到该号码。</td></tr></tbody></table><h2 id="2-常用命令总结"><a class="markdownIt-Anchor" href="#2-常用命令总结"></a> 2. 常用命令总结</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例子1: 要显示IP路由表的完整内容，执行以下命令：</span></span><br><span class="line">route print</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子2: 要显示IP路由表中以10.开始的路由，执行以下命令：</span></span><br><span class="line">route print 10.*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子3: 要添加默认网关地址为192.168.12.1的默认路由，执行以下命令：</span></span><br><span class="line">route add 0.0.0.0 mask 0.0.0.0 192.168.12.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子4: 要添加目标为10.41.0.0，子网掩码为255.255.0.0，下一个跃点地址为10.27.0.1的路由，执行以下命令：</span></span><br><span class="line">route add 10.41.0.0 mask 255.255.0.0 10.27.0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子5: 要添加目标为10.41.0.0，子网掩码为255.255.0.0，下一个跃点地址为10.27.0.1的永久路由，执行以下命令：</span></span><br><span class="line">route -p add 10.41.0.0 mask 255.255.0.0 10.27.0.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子6: 要添加目标为10.41.0.0，子网掩码为255.255.0.0，下一个跃点地址为10.27.0.1，跃点数为7的路由，执行以下命令：</span></span><br><span class="line">route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 metric 7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子7: 要添加目标为10.41.0.0，子网掩码为255.255.0.0，下一个跃点地址为10.27.0.1，接口索引为0x3的路由，执行以下命令：</span></span><br><span class="line">route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 if 0x3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子8: 要删除目标为10.41.0.0，子网掩码为255.255.0.0的路由，执行以下命令：</span></span><br><span class="line">route delete 10.41.0.0 mask 255.255.0.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子9: 要删除IP路由表中以10.开始的所有路由，执行以下命令：</span></span><br><span class="line">route delete 10.*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子10: 要将目标为10.41.0.0，子网掩码为255.255.0.0的路由的下一个跃点地址由10.27.0.1更改为10.27.0.25，执行以下命令：</span></span><br><span class="line">route change 10.41.0.0 mask 255.255.0.0 10.27.0.25</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 - windwos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程基础</title>
      <link href="/2021/06/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="大纲"><a class="markdownIt-Anchor" href="#大纲"></a> 大纲</h1><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210621164513.png" alt="代码编写"></p><h1 id="面向对象思想"><a class="markdownIt-Anchor" href="#面向对象思想"></a> 面向对象思想</h1><blockquote><p>面向对象编程是以类为思考对象。在进行面向对象编程的时候，我们并不是一上来就去思考，如何将复杂的流程拆解为一个一个方法，而是采用曲线救国的策略，先去思考如何给业务建模，如何将需求翻译为类，如何给类之间建立交互关系，而完成这些工作完全不需要考虑错综复杂的处理流程。当我们有了类的设计之后，然后再像搭积木一样，按照处理流程，将类组装起来形成整个程序。这种开发模式、思考问题的方式，能让我们在应对复杂程序开发的时候，思路更加清晰。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github图床</title>
      <link href="/2021/06/21/Github%E5%9B%BE%E5%BA%8A/"/>
      <url>/2021/06/21/Github%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="picgo-github-搭建个人图床工具"><a class="markdownIt-Anchor" href="#picgo-github-搭建个人图床工具"></a> PicGo + GitHub 搭建个人图床工具</h1><h2 id="1-github生成token"><a class="markdownIt-Anchor" href="#1-github生成token"></a> 1 Github生成token</h2><p>Settings-&gt;Developer settings</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210621150045.png" alt="生成token"></p><h2 id="2-github创建仓库"><a class="markdownIt-Anchor" href="#2-github创建仓库"></a> 2 Github创建仓库</h2><h2 id="3-下载picgo"><a class="markdownIt-Anchor" href="#3-下载picgo"></a> 3 <a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.6/PicGo-Setup-2.3.0-beta.6.exe">下载PicGo</a></h2><h2 id="4-配置picgo"><a class="markdownIt-Anchor" href="#4-配置picgo"></a> 4 配置PicGo</h2><p><strong>1 勾选时间戳命名</strong></p><p><strong>2 域名设置:</strong></p><blockquote><p><a href="https://raw.githubusercontent.com/%5Busername%5D/%5B%E4%BB%93%E5%BA%93%E5%90%8D%5D/master">https://raw.githubusercontent.com/[username]/[仓库名]/master</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210621150952.png" alt="配置Picgo"></p><h2 id="5-配置typora"><a class="markdownIt-Anchor" href="#5-配置typora"></a> 5 配置Typora</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210621151443.png" alt="配置Typora"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8读取文件</title>
      <link href="/2021/05/19/Java8%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
      <url>/2021/05/19/Java8%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一-jdk-8-流"><a class="markdownIt-Anchor" href="#一-jdk-8-流"></a> 一、Jdk 8 流</h1><h2 id="1-stream-fileslines"><a class="markdownIt-Anchor" href="#1-stream-fileslines"></a> 1 Stream + Files.lines</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String fileName = <span class="string">&quot;C:\\Users\\king\\Desktop\\nginx.conf&quot;</span>;</span><br><span class="line">Stream&lt;String&gt; lines = Files.lines(Paths.get(fileName));</span><br><span class="line">System.out.println();</span><br><span class="line">lines.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="2-stream-bufferedreader"><a class="markdownIt-Anchor" href="#2-stream-bufferedreader"></a> 2 Stream + BufferedReader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String fileName = <span class="string">&quot;C:\\Users\\king\\Desktop\\nginx.conf&quot;</span>;</span><br><span class="line">BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(fileName));</span><br><span class="line">Stream&lt;String&gt; lines = bufferedReader.lines();</span><br><span class="line">lines.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="二-jdk11-bufferedreader"><a class="markdownIt-Anchor" href="#二-jdk11-bufferedreader"></a> 二、JDK1.1 BufferedReader</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String fileName = <span class="string">&quot;C:\\Users\\king\\Desktop\\nginx.conf&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line"></span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-jdk15-scanner"><a class="markdownIt-Anchor" href="#三-jdk15-scanner"></a> 三、 JDK1.5 Scanner</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String fileName = <span class="string">&quot;C:\\Users\\king\\Desktop\\nginx.conf&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(fileName))) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java - Stream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java - 文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CFW配置</title>
      <link href="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/04/24/CFW%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="cfw一些概念"><a class="markdownIt-Anchor" href="#cfw一些概念"></a> CFW一些概念</h1><h2 id="系统代理"><a class="markdownIt-Anchor" href="#系统代理"></a> 系统代理</h2><p>​<code>系统代理设置</code>顾名思义就是在<code>系统设置</code>里面设置一个<code>代理服务器</code>，让软件可以直接调用<code>系统代理设置</code>直接连接<code>代理服务器</code>，而不需要单独的配置。这样所有的软件都可以知道现在有一个<code>代理服务器</code>可以连接，而且只要跟随<code>系统代理设置</code>即可连接，无需额外配置。</p><p>​一般而言，只有浏览器（包括内嵌在各种软件中的浏览器，比如 WeGame、优酷、迅雷9等软件中的内嵌浏览器）会自动调用<code>系统代理</code>进行连接。而其它大部分应用一般是不会自动启用<code>系统代理</code>进行连接的，要在支持使用代理的软件里面手动设置， <strong>所以这个选项的设置不会影响到这些软件</strong> 。</p><p>这是因为绝大部分需要进行代理的需求都在浏览器上，其它软件很少有这个需要（如果有的话一般会提供配置和开关给用户）。</p><p>查看系统代理设置：</p><ul><li>Win 10：设置 &gt; 网络和 Internet &gt; 代理</li><li>Win 7：<a href="https://jingyan.baidu.com/article/0aa22375866c8988cc0d648c.html">windows 7 系统如何设置代理服务器_百度经验</a></li></ul><p>所以，<code>系统代理设置</code>控制的就是这个，它有三个选项：</p><h3 id="直连模式"><a class="markdownIt-Anchor" href="#直连模式"></a> 直连模式</h3><p><code>直接模式</code>会在<code>系统代理设置</code>里关闭代理，使启用<code>系统代理设置</code>的软件（一般为浏览器）直接连接网络。</p><p>但是，它并没有关闭在本地构建的<code>代理服务器</code>，其它手动配置代理的软件仍然可以进行连接。</p><h3 id="pac模式"><a class="markdownIt-Anchor" href="#pac模式"></a> PAC模式</h3><p><code>PAC模式</code>会在<code>系统代理设置</code>设置一个<code>PAC脚本</code>文件，让系统通过这个文件自动选择每一个连接是否启用<code>代理服务器</code>，以及选择哪一个<code>代理服务器</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424135543038.png" alt="脚本"></p><h3 id="全局模式"><a class="markdownIt-Anchor" href="#全局模式"></a> 全局模式</h3><p>全局模式代表作为软件本身接管的所有流量转发到代理服务器，有些软件跑在系统层，甚至不遵循代理规则 ，不把通讯流量交给代理软件接管，这种情况全局代理失效，比如应用商店本身，UWP应用，quest2vr，UDP游戏等</p><p><code>全局模式</code>会在<code>系统代理设置</code>手动设置一个<code>代理服务器</code>，所有跟随<code>系统代理设置</code>的软件（一般是浏览器）都会使用这个<code>代理服务器</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424135603937.png" alt="全局模式"></p><h3 id="代理流程图"><a class="markdownIt-Anchor" href="#代理流程图"></a> 代理流程图</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424135718829.png" alt="代理流程图"></p><h1 id="tun模式"><a class="markdownIt-Anchor" href="#tun模式"></a> TUN模式</h1><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>​对于不遵循系统代理的软件，TUN 模式可以接管其流量并交由 CFW 处理，在 Windows 中，TUN 模式性能比 TAP 模式好。</p><p>​Tun 模式可以通过新建一个  Tun 虚拟网卡接受操作系统的三层流量，从而拓展 Clash 入口（inbound) 转发能力。Tun 模式有以下潜在的优点：</p><ul><li>提升 Clash 处理 UDP 的能力</li><li>从Inbound发回三层流量时，IP 源地址可由 Clash 控制<ul><li>因此在使用 socks5或shadowsoks协议时，可以表达 socks5/ss 协议发回的 UDP 流量中不同的源IP地址</li><li>因此，有可能通过 OutBound 代理实现 STUN</li><li>因此，对在代理条件下很多游戏的体验会有提升</li></ul></li><li>可以劫持任何三层流量，Clash 可以在任何IP地址和任何端口提供某些服务，非常灵活<ul><li>因而可以实现 DNS 劫持</li></ul></li><li>可以与操作系统的网络栈结合，利用 iptables 等组件的能力</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h3><p>启动 TUN 模式需要进行如下操作：</p><ol><li>进入网站<a href="https://www.wintun.net/">Wintun (opens new window)</a>，点击界面中<code>Download Wintun xxx</code>下载压缩包，根据系统版本将对应目录中<code>wintun.dll</code>复制至<code>Home Directory</code>目录中。基于<code>x64</code>的处理器的<code>64</code>位操作系统请使用<code>amd64</code>版本，<code>32</code>位操作系统请使用<code>x86</code>版本</li><li>点击<code>General</code>中<code>Service Mode</code>右边<code>Manage</code>，在打开窗口中安装服务模式，安装完成应用会自动重启，Service Mode 右边地球图标变为<code>绿色</code>即安装成功</li><li>在使用的配置文件中加入如下内容：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">redir-host</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="comment"># 真实请求DNS，可多设置几个</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line"><span class="comment"># interface-name: WLAN # 出口网卡名称，或者使用下方的自动检测</span></span><br><span class="line"><span class="attr">tun:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">stack:</span> <span class="string">gvisor</span></span><br><span class="line">  <span class="attr">dns-hijack:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">198.18</span><span class="number">.0</span><span class="number">.2</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">macOS-auto-route:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">macOS-auto-detect-interface:</span> <span class="literal">true</span> <span class="comment"># 自动检测出口网卡</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><p>当<code>enhanced-mode</code>设置为<code>fake-ip</code>时，会出现系统检测到网卡无法联网，微软系 APP 无法登陆使用等问题，可以通过添加<code>fake-ip-filter</code>解决：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line">  <span class="attr">fake-ip-filter:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;dns.msftncsi.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;www.msftncsi.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;www.msftconnecttest.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong>TIP</strong></p><blockquote><p>TUN 模式更推荐使用 redir-host 模式</p></blockquote><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><blockquote><p>打开Minin即可</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424135213647.png" alt="使用"></p><h1 id="tap模式"><a class="markdownIt-Anchor" href="#tap模式"></a> TAP模式</h1><p>对于不遵循系统代理的软件，TAP 模式可以接管其流量并交由 CFW 处理</p><p>对于 0.13.8 及以后版本，更推荐使用<a href="https://docs.cfw.lbyczf.com/contents/tun.html">TUN 模式</a></p><h2 id="安装-tap-网卡"><a class="markdownIt-Anchor" href="#安装-tap-网卡"></a> 安装 TAP 网卡</h2><p>点击<code>General</code>页面中<code>TAP Device</code>选项的<code>Manage</code>按钮，在弹出对话框中选择<code>Install</code>将会安装 TAP 网卡，此网卡用于接管系统流量，安装完成可在系统网络连接中看到名为<code>cfw-tap</code>的网卡</p><h2 id="启动-tap-模式"><a class="markdownIt-Anchor" href="#启动-tap-模式"></a> 启动 TAP 模式</h2><p>使用的 Profile 中包含 listen 设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">redir-host</span> <span class="comment"># 或 fake-ip</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br></pre></td></tr></table></figure><h2 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h2><p>此版本可以通过设置 Interface Name (自动识别) 属性避免回环，并且支持了 UDP 及 IP 类请求，请在<code>Settings</code>页面<code>Interface Name</code>选项中选择出站网卡（通常为本机物理网卡）</p><h2 id="注意事项-2"><a class="markdownIt-Anchor" href="#注意事项-2"></a> 注意事项</h2><p>当<code>enhanced-mode</code>设置为<code>fake-ip</code>时，会出现系统检测到网卡无法联网，微软系 APP 无法登陆使用等问题，可以通过添加<code>fake-ip-filter</code>解决：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">  <span class="attr">fake-ip-filter:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;dns.msftncsi.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;www.msftncsi.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;www.msftconnecttest.com&quot;</span></span><br></pre></td></tr></table></figure><p>TIP</p><blockquote><p>TAP 模式更推荐使用 redir-host 模式</p></blockquote><h1 id="tun与tap模式局域网共享网络"><a class="markdownIt-Anchor" href="#tun与tap模式局域网共享网络"></a> TUN与TAP模式局域网共享网络</h1><ul><li><p>首先打开网络适配器<code>控制面板-&gt;网络和Internet-&gt;网络连接</code></p></li><li><p>笔记本打开移动热点</p></li><li><p>TUN选择Clash</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424141013157.png" alt="TUN虚拟网卡"></p><ul><li>右键属性点击共享，勾选允许其他用户，家庭网络连接选择本地连接（即wifi）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424141059391.png" alt="属性"></p><ul><li>TAP选择TAP-Windows Adapter V9</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424141303539.png" alt="TAP虚拟网卡"></p><ul><li>同TUN配置</li></ul><h1 id="docker安装openwrt"><a class="markdownIt-Anchor" href="#docker安装openwrt"></a> Docker安装openwrt</h1><ul><li>给Docker创建网络，运行以下命令，其中<code>192.168.1.0</code>和<code>192.168.1.1</code>都要修改到自己的对应网段<code>192.168.x.0</code>和<code>192.168.x.1</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge --subnet=192.168.173.0/24 --gateway=192.168.173.1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure><ul><li>拉取openwrt镜像，这里我使用的是buddyfly的openwrt-aarch64，在docker hub找到的docker镜像，地址：<a href="https://hub.docker.com/r/buddyfly/openwrt-aarch64">buddyfly/openwrt-aarch64</a> ,以下配置基于这个docker镜像。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sulinggg/openwrt:latest</span><br></pre></td></tr></table></figure><ul><li>开启openwrt容器，并把这个容器命名为openwrt</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged sulinggg/openwrt:latest /sbin/init</span><br></pre></td></tr></table></figure><ul><li>修改docker内的openwrt网络设置，首先输</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it openwrt bash</span><br></pre></td></tr></table></figure><ul><li><p>输入之后会进入docker容器内，修改网络设置<code>vi /etc/config/network</code></p><p>输入i开始编辑，编辑完成之后按ESC退出编辑，然后输入:wq（不要忘记冒号）回车保存，这里需要给容器内的openwrt指定静态地址，网关和dns，这些配置要和你家中的网络处于一个网段。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/24/CFW%E9%85%8D%E7%BD%AE/image-20210424171346205.png" alt="网络配置"></p><ul><li>重启docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart openwrt</span><br></pre></td></tr></table></figure><blockquote><p>在wsl2环境下无法方法，之后树莓派修好了试一下</p></blockquote><p><strong>参考文章</strong></p><p><a href="https://mlapp.cn/376.html">树莓派安装openwrt</a></p>]]></content>
      
      
      <categories>
          
          <category> cfw </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cfw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 2021.1使用运行target</title>
      <link href="/2021/04/19/IDEA-2021-1%E4%BD%BF%E7%94%A8%E8%BF%90%E8%A1%8Ctarget/"/>
      <url>/2021/04/19/IDEA-2021-1%E4%BD%BF%E7%94%A8%E8%BF%90%E8%A1%8Ctarget/</url>
      
        <content type="html"><![CDATA[<h1 id="idea在wsl2中运行java程序"><a class="markdownIt-Anchor" href="#idea在wsl2中运行java程序"></a> IDEA在WSL2中运行Java程序</h1><p><strong>前置条件</strong></p><ul><li>wsl2安装java环境，再点击wsl会自动识别，如果未安装则需要自己去设置一下环境，或者去查询一下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方法一：此方法是无法定位到java的安装路径的，只能定位到执行路径。</span></span><br><span class="line">which java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：</span></span><br><span class="line">echo $JAVA_HOME</span><br><span class="line">使用 echo $JAVA_HOME 命令可以定位到java安装路径，但前提是匹配了环境变量 $JAVA_HOME ，否则还是定位不到。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法三：ls -lrt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a ：显示所有文件即目录（ls内定将文件名或目录名称开头为“.”的视为隐藏档，不会列出）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -l： 除文件名称外，亦将文件形态、权限、拥有者、文件大小等资讯详细列出。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r： 将文件以相反次序显示（原定依英文字母次序）。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t： 将文件依次建立时间之先后次序列出。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -A： 同-a，但不列出“.” (当前目录)及“…”(副文件)。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -F: 在列出的文件名称后加一符号;例如可执行档则加“*”，目录则加“/”</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -R： 若目录下有文件，则以下之文件亦皆依序里列出。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p><a href="https://lijinzedev.github.io/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/">搭建wsl环境</a></p></li><li><p>更新Idea到2021.1</p></li><li><p>选择运行目标</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/19/IDEA-2021-1%E4%BD%BF%E7%94%A8%E8%BF%90%E8%A1%8Ctarget/change.gif" alt="change"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/19/IDEA-2021-1%E4%BD%BF%E7%94%A8%E8%BF%90%E8%A1%8Ctarget/image-20210419172711967.png" alt="查找环境"></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2021/04/19/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/04/19/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-常用命令"><a class="markdownIt-Anchor" href="#docker-常用命令"></a> Docker 常用命令</h1><h2 id="搜索镜像"><a class="markdownIt-Anchor" href="#搜索镜像"></a> 搜索镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search ngxin</span><br></pre></td></tr></table></figure><h2 id="下载镜像"><a class="markdownIt-Anchor" href="#下载镜像"></a> 下载镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java:8</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a class="markdownIt-Anchor" href="#删除镜像"></a> 删除镜像</h2><ul><li>指定名称删除镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi java:8</span><br></pre></td></tr></table></figure><ul><li>指定名称删除镜像（强制）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f java:8</span><br></pre></td></tr></table></figure><ul><li>删除所有没有引用的镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker images | grep none | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><ul><li>强制删除所有镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images)</span><br></pre></td></tr></table></figure><h2 id="新建并启动容器"><a class="markdownIt-Anchor" href="#新建并启动容器"></a> 新建并启动容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx -d nginx:1.17.0</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a class="markdownIt-Anchor" href="#停止容器"></a> 停止容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $ContainerName及$ContainerId可以用docker ps命令查询出来</span></span><br><span class="line">docker stop <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><h2 id="强制停止容器"><a class="markdownIt-Anchor" href="#强制停止容器"></a> 强制停止容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><h2 id="启动已停止的容器"><a class="markdownIt-Anchor" href="#启动已停止的容器"></a> 启动已停止的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a class="markdownIt-Anchor" href="#进入容器"></a> 进入容器</h2><ul><li>先查询出容器的pid：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format <span class="string">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><ul><li>根据容器的pid进入容器：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter --target <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a class="markdownIt-Anchor" href="#删除容器"></a> 删除容器</h2><ul><li>删除指定容器：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><ul><li>按名称删除容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a | grep <span class="built_in">test</span>-* | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">docker rm `docker ps -a | grep java-* | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure><ul><li>强制删除所有容器；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h2 id="查看容器的日志"><a class="markdownIt-Anchor" href="#查看容器的日志"></a> 查看容器的日志</h2><ul><li>查看当前全部日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><ul><li>动态查看日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>) -f</span><br></pre></td></tr></table></figure><h2 id="查看容器的ip地址"><a class="markdownIt-Anchor" href="#查看容器的ip地址"></a> 查看容器的IP地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format <span class="string">&#x27;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#x27;</span> <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><h2 id="修改容器的启动方式"><a class="markdownIt-Anchor" href="#修改容器的启动方式"></a> 修改容器的启动方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container update --restart=always <span class="variable">$ContainerName</span></span><br><span class="line"><span class="comment"># --restart=always 当 Docker 重启时，容器能自动启动。</span></span><br></pre></td></tr></table></figure><h2 id="同步宿主机时间到容器"><a class="markdownIt-Anchor" href="#同步宿主机时间到容器"></a> 同步宿主机时间到容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /etc/localtime <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>):/etc/</span><br></pre></td></tr></table></figure><h2 id="指定容器时区"><a class="markdownIt-Anchor" href="#指定容器时区"></a> 指定容器时区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-e TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">-d nginx:1.17.0</span><br></pre></td></tr></table></figure><h2 id="在宿主机查看docker使用cpu-内存-网络-io情况"><a class="markdownIt-Anchor" href="#在宿主机查看docker使用cpu-内存-网络-io情况"></a> 在宿主机查看docker使用cpu、内存、网络、io情况</h2><ul><li>查看指定容器情况：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats <span class="variable">$ContainerName</span>(或者<span class="variable">$ContainerId</span>)</span><br></pre></td></tr></table></figure><ul><li>查看所有容器情况：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats -a</span><br></pre></td></tr></table></figure><h2 id="查看docker磁盘使用情况"><a class="markdownIt-Anchor" href="#查看docker磁盘使用情况"></a> 查看Docker磁盘使用情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h2 id="进入docker容器内部的bash"><a class="markdownIt-Anchor" href="#进入docker容器内部的bash"></a> 进入Docker容器内部的bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it <span class="variable">$ContainerName</span> /bin/bash</span><br></pre></td></tr></table></figure><h2 id="使用root帐号进入docker容器内部"><a class="markdownIt-Anchor" href="#使用root帐号进入docker容器内部"></a> 使用root帐号进入Docker容器内部</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it --user root <span class="variable">$ContainerName</span> /bin/bash</span><br></pre></td></tr></table></figure><h2 id="docker创建外部网络"><a class="markdownIt-Anchor" href="#docker创建外部网络"></a> Docker创建外部网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge my-bridge-network</span><br></pre></td></tr></table></figure><h2 id="修改docker镜像的存放位置"><a class="markdownIt-Anchor" href="#修改docker镜像的存放位置"></a> 修改Docker镜像的存放位置</h2><ul><li>查看Docker镜像的存放位置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep <span class="string">&quot;Docker Root Dir&quot;</span></span><br></pre></td></tr></table></figure><ul><li>关闭Docker服务：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><ul><li>移动目录到目标路径：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /var/lib/docker /home/docker</span><br></pre></td></tr></table></figure><ul><li>建立软连接：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/win10/docker-images/docker /var/lib/docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2安装基本环境</title>
      <link href="/2021/04/14/WSL2%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/04/14/WSL2%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="换源"><a class="markdownIt-Anchor" href="#换源"></a> 换源</h1><p>默认的安装源相对国内很慢，我们更换源到阿里云，登录到ubuntu到操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse&quot;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure><h1 id="安装java环境"><a class="markdownIt-Anchor" href="#安装java环境"></a> 安装JAVA环境</h1><h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-11-jdk</span><br><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure><h2 id="2-切换版本"><a class="markdownIt-Anchor" href="#2-切换版本"></a> 2 切换版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h1 id="安装maven环境"><a class="markdownIt-Anchor" href="#安装maven环境"></a> 安装Maven环境</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install maven</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL搭建开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 高级</title>
      <link href="/2021/04/13/Docker-%E9%AB%98%E7%BA%A7/"/>
      <url>/2021/04/13/Docker-%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一-docker-compose"><a class="markdownIt-Anchor" href="#一-docker-compose"></a> 一、Docker Compose</h1><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker compose up</code> and the <a href="https://docs.docker.com/compose/cli-command/">Docker compose command</a> starts and runs your entire app. You can alternatively run <code>docker-compose up</code> using the docker-compose binary.</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span>  <span class="comment"># optional since v1.27.0</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Compose:</p><blockquote><p>对外服务的最小单元</p></blockquote><ul><li><p>服务Services: 容器、应用,(web、redis、mysql)</p></li><li><p>项目project：一组关联的容器</p></li></ul><h1 id="二-环境搭建"><a class="markdownIt-Anchor" href="#二-环境搭建"></a> 二、环境搭建</h1><h2 id="21-安装"><a class="markdownIt-Anchor" href="#21-安装"></a> 2.1 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="22-授权"><a class="markdownIt-Anchor" href="#22-授权"></a> 2.2 授权</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="23-官方案例"><a class="markdownIt-Anchor" href="#23-官方案例"></a> 2.3 <a href="https://docs.docker.com/compose/gettingstarted/">官方案例</a></h2><h1 id="三-compose的编写规则"><a class="markdownIt-Anchor" href="#三-compose的编写规则"></a> 三、Compose的编写规则</h1><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">官方文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="comment"># 服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="string">服务1:</span></span><br><span class="line"><span class="string">服务1配置:</span></span><br><span class="line"><span class="string">服务2:</span></span><br><span class="line"><span class="string">服务2配置:</span></span><br><span class="line"><span class="comment"># 其他配置</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 安装 wsl2</title>
      <link href="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/"/>
      <url>/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/</url>
      
        <content type="html"><![CDATA[<h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2><p>Windows 10 的 WSL 2 需要依赖于， Microsoft Store中的应用。适用于 Linux 的 Windows 子系统只能在系统驱动器（通常是 C: 驱动器）中运行，所以注意C盘的空间。</p><h1 id="一-在-windows-10-上安装-hyper-v"><a class="markdownIt-Anchor" href="#一-在-windows-10-上安装-hyper-v"></a> 一、在 Windows 10 上安装 Hyper-V</h1><p>Docker Desktop 想要在Windows上运行，需要依赖于Windows的Hyper-V模块。所以首先就要启用Hyper-V。</p><p>启用 Hyper-V 以在 Windows 10 上创建虚拟机。可以通过多种方式启用 Hyper-V，包括使用 Windows 10 控制面板、PowerShell 或使用部署映像服务和管理工具 (DISM)。</p><h2 id="1-检查要求"><a class="markdownIt-Anchor" href="#1-检查要求"></a> (1) 检查要求</h2><ul><li>Windows 10 企业版、专业版或教育版</li><li>具有二级地址转换 (SLAT) 的 64 位处理器。</li><li>CPU 支持 VM 监视器模式扩展（Intel CPU 上的 VT-c）。</li><li>最少 4 GB 内存。</li></ul><blockquote><p>请勿在 Windows 10 家庭版上安装 Hyper-V。</p></blockquote><h2 id="2-方式一-使用-powershell-启用-hyper-v"><a class="markdownIt-Anchor" href="#2-方式一-使用-powershell-启用-hyper-v"></a> (2) 方式一、使用 PowerShell 启用 Hyper-V</h2><ol><li>以<strong>管理员身份</strong>打开 PowerShell 控制台。</li><li>运行以下命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</span><br></pre></td></tr></table></figure><blockquote><p>如果无法找到此命令，请确保你以管理员身份运行 PowerShell。</p><p>安装完成后，请重启操作系统。</p></blockquote><h2 id="3-方式二-使用-cmd-和-dism-启用-hyper-v"><a class="markdownIt-Anchor" href="#3-方式二-使用-cmd-和-dism-启用-hyper-v"></a> (3) 方式二、使用 CMD 和 DISM 启用 Hyper-V</h2><p>部署映像服务和管理工具 (DISM) 可帮助配置 Windows 和 Windows 映像。在众多应用程序中，DISM 可以在操作系统运行时启用 Windows 功能。</p><p>使用 DISM 启用 Hyper-V 角色：</p><ol><li>以<strong>管理员身份</strong>打开 PowerShell 或 CMD 会话。</li><li>键入下列命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISM /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/image-20210424112327542.png" alt="命令"></p><h2 id="4-方式三-通过设置启用-hyper-v"><a class="markdownIt-Anchor" href="#4-方式三-通过设置启用-hyper-v"></a> (4) 方式三、通过“设置”启用 Hyper-V</h2><ul><li>右键单击 Windows 按钮并选择“应用和功能”。（左下角Windows图标）</li><li>选择相关设置下右侧的“程序和功能”。</li><li>选择“打开或关闭 Windows 功能”。</li><li>选择“Hyper-V”，然后单击“确定”。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/image-20210424112200782.png" alt="设置启用Hyper-V"></p><blockquote><p>安装完成后，系统会提示你重启计算机。</p></blockquote><h1 id="二-适用于-linux-的-windows-子系统安装"><a class="markdownIt-Anchor" href="#二-适用于-linux-的-windows-子系统安装"></a> 二、适用于 Linux 的 Windows 子系统安装</h1><h2 id="1-安装适用于-linux-的-windows-子系统"><a class="markdownIt-Anchor" href="#1-安装适用于-linux-的-windows-子系统"></a> (1) 安装适用于 Linux 的 Windows 子系统</h2><p>必须先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发版。</p><p>以<strong>管理员身份</strong>打开 PowerShell 并运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><blockquote><p>若要仅安装 WSL 1，现在应重启计算机并继续安装所选的 Linux 分发版，否则请等待重启并继续更新到 WSL 2</p></blockquote><h2 id="2-更新到-wsl-2"><a class="markdownIt-Anchor" href="#2-更新到-wsl-2"></a> (2) 更新到 WSL 2</h2><h3 id="21-若要更新到-wsl-2必须满足以下条件"><a class="markdownIt-Anchor" href="#21-若要更新到-wsl-2必须满足以下条件"></a> 2.1 若要更新到 WSL 2，必须满足以下条件：</h3><ul><li>运行 Windows 10（已更新到版本 2004 的内部版本 19041 或更高版本）。</li><li>通过按 Windows 徽标键 + R， 检查你的 Windows 版本，然后键入 winver，选择“确定” 。 （或者在 Windows 命令提示符下输入 ver 命令）。 如果内部版本低于 19041，请更新到最新的 Windows 版本。</li></ul><h3 id="22-启用虚拟机平台可选组件"><a class="markdownIt-Anchor" href="#22-启用虚拟机平台可选组件"></a> 2.2 启用“虚拟机平台”可选组件</h3><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。</p><p>以<strong>管理员身份</strong>打开 PowerShell 并运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><blockquote><p>重新启动计算机，以完成 WSL 安装并更新到 WSL 2。</p></blockquote><h3 id="23-将-wsl-2-设置为默认版本"><a class="markdownIt-Anchor" href="#23-将-wsl-2-设置为默认版本"></a> 2.3 将 WSL 2 设置为默认版本</h3><p>安装新的 Linux 分发版时，请在 Powershell 中运行以下命令，以将 WSL 2 设置为默认版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h2 id="3-安装所选的-linux-分发版"><a class="markdownIt-Anchor" href="#3-安装所选的-linux-分发版"></a> (3) 安装所选的 Linux 分发版</h2><ol><li>打开 <a href="https://aka.ms/wslstore">Microsoft Store</a>，并选择你偏好的 Linux 分发版 (如果上述连接打开有错，请直接打开Microsoft Store搜索)。</li></ol><p>单击以下链接会打开每个分发版的 Microsoft Store 页面，(如果下述连接打开有错，请直接打开Microsoft Store搜索)。：</p><ul><li><a href="https://www.microsoft.com/store/apps/9pjn388hp8c9">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9NJFZK00FGKV">openSUSE Leap 15.1</a></li><li><a href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1">SUSE Linux Enterprise Server 12 SP5</a></li><li><a href="https://www.microsoft.com/store/apps/9PN498VPMF3Z">SUSE Linux Enterprise Server 15 SP1</a></li><li><a href="https://www.microsoft.com/store/apps/9PKR34TNCV07">Kali Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9MSVKQC78PK6">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc">Fedora Remix for WSL</a></li><li><a href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P">Pengwin</a></li><li><a href="https://www.microsoft.com/store/apps/9N8LP0X93VCP">Pengwin Enterprise</a></li><li><a href="https://www.microsoft.com/store/apps/9p804crf0395">Alpine WSL</a></li></ul><ol><li>在分发版的页面中，选择“获取”。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/image-20210424112428253.png" alt="image-20210424112428253"></p><h2 id="4-设置新分发版"><a class="markdownIt-Anchor" href="#4-设置新分发版"></a> (4) 设置新分发版</h2><p>首次启动新安装的 Linux分发版时，将打开一个控制台窗口。（就是之前安装的应用）<br><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/image-20210424112449354.png" alt="image-20210424112449354"></p><p>系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。未来的所有启动时间应不到一秒。</p><p>然后，需要为新的 Linux 分发版创建用户帐户和密码。<br><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/image-20210424112515287.png" alt="image-20210424112515287"></p><h2 id="5-将分发版版本设置为-wsl-1-或-wsl-2"><a class="markdownIt-Anchor" href="#5-将分发版版本设置为-wsl-1-或-wsl-2"></a> (5) 将分发版版本设置为 WSL 1 或 WSL 2</h2><p>可以打开 PowerShell 命令行并输入以下命令（仅在 Windows 内部版本 19041 或更高版本中可用），来检查分配给每个已安装的 Linux 分发版的 WSL 版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --verbose</span><br></pre></td></tr></table></figure><blockquote><p>通过以上命令，就可以查看刚刚已经安装的Linux发行版本，以及当前的WSL版本</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/12/win10-%E5%AE%89%E8%A3%85-wsl2/image-20210424112535737.png" alt="查看刚刚已经安装的Linux发行版本"></p><p>若要将分发版设置为受某一 WSL 版本支持，请运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-version &lt;distribution name&gt; &lt;versionNumber&gt;</span><br></pre></td></tr></table></figure><p>请确保将 <distribution name> 替换为你的分发版的实际名称，并将 <versionNumber> 替换为数字“1”或“2”。 可以随时更改回 WSL 1，方法是运行与上面相同的命令，但将“2”替换为“1”。</versionNumber></distribution></p><p>此外，如果要使 WSL 2 成为你的默认体系结构，可以通过此命令执行该操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>这会将安装的任何新分发版的版本设置为 WSL 2。</p><blockquote><p>Docker Desktop 需要的就是 WSL 2</p></blockquote><h1 id="三-win10启动ubuntu1804报错-参考的对象类型不支持尝试的操作"><a class="markdownIt-Anchor" href="#三-win10启动ubuntu1804报错-参考的对象类型不支持尝试的操作"></a> 三、win10启动ubuntu1804报错 参考的对象类型不支持尝试的操作</h1><p><strong>问题描述:</strong></p><blockquote><p>从terminal启动ubuntu1804报错: 参考的对象类型不支持尝试的操作. 直接启动ubuntu1804也不行</p></blockquote><p><strong>解决方法:</strong></p><blockquote><p>以管理员身份打开Windows PowerShell, 然后执行<code>netsh winsock reset</code>, 重启电脑即可, 如下图所示</p></blockquote><h1 id="四-安装windows-terminal"><a class="markdownIt-Anchor" href="#四-安装windows-terminal"></a> 四、安装Windows Terminal</h1><ul><li>打开 Microsoft Store，搜索 Terminal，安装 Windows Terminal，用于后面和 WSL 子系统交互。</li></ul><h1 id="五-安装配置-linux-发行版"><a class="markdownIt-Anchor" href="#五-安装配置-linux-发行版"></a> 五、安装配置 Linux 发行版</h1><blockquote><p>由于默认情况下我们不知道 root 用户的密码，所以如果我们想要使用 root 用户的话可以使用 passwd 命令为 root 用户设置一个新的密码，同时为了避免sudo切换root是需要输入密码，把自己配置的用户名加到sudo免密中，命令如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 替换leap为自己单独配置的用户名</span> </span><br><span class="line">sudo echo &quot;leap ALL=(ALL:ALL) NOPASSWD: ALL&quot; &gt;&gt;/etc/sudoers </span><br></pre></td></tr></table></figure><p>默认的安装源相对国内很慢，我们更换源到阿里云，登录到ubuntu到操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ focal main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse&quot;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>执行更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure><h1 id="六-安装docker"><a class="markdownIt-Anchor" href="#六-安装docker"></a> 六、安装docker</h1><blockquote><p>因为wsl2已经完整使用了linux内核了，此种方式和先前在linux虚拟机安装docker类似，步骤如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><blockquote><p>执行脚本安装过程中，脚本提示“<strong>建议使用Docker Desktop for windows</strong>”，20s内按Ctrl+C会退出安装，所以需要等待20s，另外此种方式需要访问外网。</p></blockquote><p>检查docker安装正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查dockerd进程启动</span></span><br><span class="line">service docker status</span><br><span class="line">ps aux|grep docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查拉取镜像等正常</span></span><br><span class="line">docker pull busybox</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不同于完全linux虚拟机方式，WLS2下通过<code>apt install docker-ce</code>命令安装的docker无法启动，因为WSL2方式的ubuntu里面没有systemd。上述官方get-docker.sh安装的docker，dockerd进程是用ubuntu传统的init方式而非systemd启动的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 修改文件</span></span></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 上面这一行,主要是增加了`-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock`</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. vim /etc/default/docker</span><br><span class="line"></span><br><span class="line">2. 修改启动配置文件，如下：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启远程访问 -H tcp://0.0.0.0:2375</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启本地套接字访问 -H unix:///var/run/docker.sock</span></span><br><span class="line">DOCKER_OPTS=&quot;-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&quot;</span><br><span class="line">重启Docker</span><br><span class="line">sudo service docker restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置docker远程tcp"><a class="markdownIt-Anchor" href="#配置docker远程tcp"></a> 配置docker远程tcp</h2><h1 id="七-修改wsl默认登录用户"><a class="markdownIt-Anchor" href="#七-修改wsl默认登录用户"></a> 七、修改WSL默认登录用户</h1><blockquote><p>默认的root没有密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu config --default-user root</span><br></pre></td></tr></table></figure><h1 id="八-wsl用户管理"><a class="markdownIt-Anchor" href="#八-wsl用户管理"></a> 八、WSL用户管理</h1><h2 id="1-root用户下的用户管理"><a class="markdownIt-Anchor" href="#1-root用户下的用户管理"></a> 1 root用户下的用户管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd username#创建用户username</span><br><span class="line">passwd username    #给已创建的用户username设置密码</span><br><span class="line">usermod --help    #修改用户这个命令的相关参数</span><br><span class="line">userdel username#删除用户username</span><br><span class="line">rm -rf username    #删除用户username所在目录</span><br></pre></td></tr></table></figure><h2 id="2-用户切换"><a class="markdownIt-Anchor" href="#2-用户切换"></a> 2 用户切换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -s            #切换到root</span><br><span class="line">su username        #切换到用户username</span><br><span class="line">exit            #退出当前用户，返回root用户</span><br></pre></td></tr></table></figure><h2 id="3-用户组"><a class="markdownIt-Anchor" href="#3-用户组"></a> 3 用户组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd usergroup#组的添加</span><br><span class="line">groupdel usergroup#组的删除</span><br></pre></td></tr></table></figure><h1 id="九-wsl设置root密码"><a class="markdownIt-Anchor" href="#九-wsl设置root密码"></a> 九、wsl设置root密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  passwd root</span><br></pre></td></tr></table></figure><h1 id="十-win10进入wsl文件系统"><a class="markdownIt-Anchor" href="#十-win10进入wsl文件系统"></a> 十、WIn10进入WSL文件系统</h1><h2 id="1-在资源管理器中访问"><a class="markdownIt-Anchor" href="#1-在资源管理器中访问"></a> 1 在资源管理器中访问</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\wsl$\ubuntu</span><br></pre></td></tr></table></figure><h2 id="2-wsl-设置访问快捷方式"><a class="markdownIt-Anchor" href="#2-wsl-设置访问快捷方式"></a> 2 wsl 设置访问快捷方式</h2><blockquote><p>创建软链接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /mnt/d/docker ~/win10</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h1><ul><li><p><a href="https://segmentfault.com/a/1190000038911660">参考win10安装wsl2 - 1</a></p></li><li><p><a href="https://blog.csdn.net/yushuzhen2008/article/details/104944579">参考win10安装wsl2- 2</a></p></li><li><p><a href="https://www.cnblogs.com/360linux/p/13662355.html">参考wsl2安装docker</a></p></li><li><p><a href="gist.github.com/xiaopeng163/f3e72bb1990860859076985d5a723cba">安装脚本</a></p></li><li><p><a href="https://blog.csdn.net/swordsm/article/details/107948497">wsl网络问题</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win10 安装WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity入门</title>
      <link href="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/"/>
      <url>/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一-学习目标"><a class="markdownIt-Anchor" href="#一-学习目标"></a> 一、学习目标</h1><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210406215324351.png" alt="image-20210406215324351"></p><h1 id="二-oauth2"><a class="markdownIt-Anchor" href="#二-oauth2"></a> 二、OAUTH2</h1><p><strong>微信认证流程</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407212550865.png" alt="微信认证流程"></p><hr><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407213041405.png" alt="oauth认证流程"></p><h2 id="常用术语"><a class="markdownIt-Anchor" href="#常用术语"></a> 常用术语</h2><ul><li><code>客户凭证(client Credentials)</code>:客户端clientid和密码用与认证客户</li><li><code>令牌(tokens)</code>授权服务器在接收到客户请求后，颁发访问的令牌</li><li><code>作用域(scopes):</code>客户请求访问令牌时，由资源拥有者额外指定细分权限（permission）</li></ul><h2 id="令牌类型"><a class="markdownIt-Anchor" href="#令牌类型"></a> 令牌类型</h2><ul><li><code>授权码</code>:仅作用于授权码授权类型，用于交换获取令牌和刷新令牌</li><li><code>访问令牌</code>: 用于代表一个用户，服务直接去访问受保护的资源</li><li><code>刷新令牌</code> :用于去授权服务器获取一个刷新访问令牌</li><li><code>BearerToken</code>:不管谁拿到Token都可以去访问资源，类似于现金</li><li><code>Proof of Possession(PoP )Token</code>: 可以校验client是否对token有明确额拥有权</li></ul><h2 id="授权模式"><a class="markdownIt-Anchor" href="#授权模式"></a> 授权模式</h2><h3 id="授权码模式"><a class="markdownIt-Anchor" href="#授权码模式"></a> 授权码模式</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407214427688.png" alt="授权码模式"></p><h3 id="密码模式"><a class="markdownIt-Anchor" href="#密码模式"></a> 密码模式</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407214700541.png" alt="密码模式"></p><p>客户端模式</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407214825939.png" alt="客户端模式"></p><h2 id="刷新令牌"><a class="markdownIt-Anchor" href="#刷新令牌"></a> 刷新令牌</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407214910839.png" alt="刷新令牌"></p><h2 id="授权服务器"><a class="markdownIt-Anchor" href="#授权服务器"></a> 授权服务器</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407215331042.png" alt="授权服务器"></p><ul><li><p><code>Authorize Endpoint</code> 授权端点，进行授权</p></li><li><p><code>Token Endpoint</code> 令牌端点，经过授权拿到对应的Token</p></li><li><p><code>Introspection Endpoint</code> 校验端点，校验Token合法性</p></li><li><p><code>Revication Endpoint</code> 撤销端点，撤销授权</p></li></ul><h2 id="架构"><a class="markdownIt-Anchor" href="#架构"></a> 架构</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407215819420.png" alt="image-20210407215819420"></p><h3 id="授权码模式测试"><a class="markdownIt-Anchor" href="#授权码模式测试"></a> 授权码模式测试</h3><ol><li>获取授权码</li></ol><blockquote><p><a href="http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=www.baidu.com">http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=admin&amp;redirect_uri=www.baidu.com</a></p></blockquote><ol start="2"><li>根据授权码获取token</li></ol><p><strong>携带客户端凭证</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407225252378.png" alt="image-20210407225252378"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407225222047.png" alt="image-20210407225222047"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant_type:authorization_code</span><br><span class="line">client_id:admin</span><br><span class="line">scope:all</span><br><span class="line">code:NheFN6</span><br><span class="line">redirect_uri:www.baidu.com</span><br></pre></td></tr></table></figure><ol start="3"><li>根据令牌访问资源</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407225317904.png" alt="image-20210407225317904"></p><h3 id="密码模式测试"><a class="markdownIt-Anchor" href="#密码模式测试"></a> 密码模式测试</h3><blockquote><p>密码模式也需要携带client_id</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/04/06/SpringSecurity%E5%85%A5%E9%97%A8/image-20210407230218565.png" alt="image-20210407230218565"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grant_type:password</span><br><span class="line">username:admin</span><br><span class="line">scope:all</span><br><span class="line">password:123456</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置HTTPS</title>
      <link href="/2021/04/02/Nginx%E9%85%8D%E7%BD%AEHTTPS/"/>
      <url>/2021/04/02/Nginx%E9%85%8D%E7%BD%AEHTTPS/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx配置https"><a class="markdownIt-Anchor" href="#nginx配置https"></a> nginx配置https</h1><h2 id="一-介绍"><a class="markdownIt-Anchor" href="#一-介绍"></a> 一、介绍</h2><p>起初是在部署系统时，用扫描漏洞工具扫描系统，发现网站访问不安全，要求使用https安全认证访问web，而 <code>nginx</code> 支持 <code>https</code> 技术，所以就在 <code>nginx</code> 配置了个 <code>https</code> ；</p><p>本教程是在 <code>Centos7</code> 上配置，其他版本的 <code>linux</code> 改一下对应的命令即可。供参考。</p><p>配置之前，是 <code>http</code> 的连接方式。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/ycwgit/mypic/raw/master/img/20210331111105.png" alt></p><p>配置完成，访问浏览器后，网站前面会出现红色的叉，这是因为在网络服务器上找不到对应的证书厂商，不妨碍使用。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/ycwgit/mypic/raw/master/img/20210331111503.png" alt></p><p>不用在意这里的ip地址不一样，只做效果展示。</p><h2 id="二-准备"><a class="markdownIt-Anchor" href="#二-准备"></a> 二、准备</h2><blockquote><p>准备两个安装包<strong>nginx</strong>、<strong>openssl</strong></p></blockquote><h3 id="方法1-手动上传离线上传"><a class="markdownIt-Anchor" href="#方法1-手动上传离线上传"></a> 方法1、手动上传（离线上传）</h3><p><code>nginx</code> 官方下载地址：<a href="http://nginx.org/en/download.html">下载地址</a></p><p><code>openssl</code> 官方下载地址：<a href="https://www.openssl.org/source/old/">下载地址</a></p><p>下载完，自行通过 <code>ftp工具</code>传上去。我这里放在<code>/usr/local</code>下面</p><h3 id="方法2-在线下载"><a class="markdownIt-Anchor" href="#方法2-在线下载"></a> 方法2、在线下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载最新nginx-1.18.0</span></span><br><span class="line">curl -O http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">或者</span><br><span class="line">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载最新openssl-1.1.1j</span></span><br><span class="line">https://www.openssl.org/source/old/1.1.1/openssl-1.1.1j.tar.gz</span><br></pre></td></tr></table></figure><h2 id="三-安装nginx配置ssl"><a class="markdownIt-Anchor" href="#三-安装nginx配置ssl"></a> 三、安装nginx，配置ssl</h2><h3 id="31-首次安装nginx-ssl"><a class="markdownIt-Anchor" href="#31-首次安装nginx-ssl"></a> 3.1、首次安装nginx + ssl</h3><p>进入<code>/usr/local</code>目录</p><h4 id="311-解压"><a class="markdownIt-Anchor" href="#311-解压"></a> 3.1.1 解压</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.18.0.tar.gz</span><br><span class="line">tar zxvf openssl-1.1.1j.tar.gz</span><br></pre></td></tr></table></figure><h4 id="312-配置nginx参数"><a class="markdownIt-Anchor" href="#312-配置nginx参数"></a> 3.1.2 配置nginx参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入nginx源码目录下，配置nginx</span></span><br><span class="line">[root@hbtc local]# cd /usr/local/nginx-1.18.0</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.18.0 --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.1j</span><br></pre></td></tr></table></figure><h4 id="313-开始编译"><a class="markdownIt-Anchor" href="#313-开始编译"></a> 3.1.3 开始编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# make</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时当前目录会出现 objs 文件夹</span></span><br></pre></td></tr></table></figure><h4 id="314-安装nginx"><a class="markdownIt-Anchor" href="#314-安装nginx"></a> 3.1.4 安装nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# make install </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果之前已经安装nginx的，这里就不再make install，否则会覆盖掉之前的安装和配置</span></span><br></pre></td></tr></table></figure><h4 id="315-备份原先的启动文件"><a class="markdownIt-Anchor" href="#315-备份原先的启动文件"></a> 3.1.5 备份原先的启动文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# cp ./sbin/nginx ./sbin/nginx.back</span><br></pre></td></tr></table></figure><h4 id="316-查看模块"><a class="markdownIt-Anchor" href="#316-查看模块"></a> 3.1.6 查看模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# ./sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.18.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.1.1j  16 Feb 2021</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.18.0 --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.1j</span><br></pre></td></tr></table></figure><p>有 <code>configure arguments: --with-http_ssl_module</code> 说明ssl模块已安装</p><h3 id="32-已安装nginx但没有安装ssl模块"><a class="markdownIt-Anchor" href="#32-已安装nginx但没有安装ssl模块"></a> 3.2、已安装nginx，但没有安装ssl模块</h3><h4 id="321-查看已配置的参数"><a class="markdownIt-Anchor" href="#321-查看已配置的参数"></a> 3.2.1 查看已配置的参数</h4><p>进入之前已安装 <code>/usr/local/nginx/</code> 目录，使用命令：<code>./sbin/nginx -V</code> 查看已配置的参数</p><ul><li>查看 nginx 是否安装 <code>http_ssl_module</code> 模块。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx]# ./sbin/nginx -V</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx  --add-module=/root/soft/ngx_devel_kit-0.3.0 --add-module=/root/soft/lua-nginx-module-0.10.9rc7</span><br><span class="line">或者是</span><br><span class="line">configure arguments: --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-fips-2.0.16</span><br></pre></td></tr></table></figure><ul><li><p>如果出现 <code>configure arguments: --with-http_ssl_module</code> , 则已安装（下面的步骤可以跳过，进入 <code>nginx.conf</code> 配置）。</p></li><li><p>如果没有，记下这里的配置参数，在下面的配置中需要用到。</p></li></ul><h4 id="322-备份原先的启动文件"><a class="markdownIt-Anchor" href="#322-备份原先的启动文件"></a> 3.2.2 备份原先的启动文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx]# cp ./sbin/nginx ./sbin/nginx.back</span><br></pre></td></tr></table></figure><h4 id="323-配置nginx需要把之前的配置参数加上若不加会影响原有的功能"><a class="markdownIt-Anchor" href="#323-配置nginx需要把之前的配置参数加上若不加会影响原有的功能"></a> 3.2.3 配置nginx，需要把之前的配置参数加上（若不加会影响原有的功能）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure  --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module  --with-openssl=/usr/local/openssl-1.1.1j  --add-module=/root/soft/ngx_devel_kit-0.3.0 --add-module=/root/soft/lua-nginx-module-0.10.9rc7 </span><br></pre></td></tr></table></figure><h4 id="324-开始编译"><a class="markdownIt-Anchor" href="#324-开始编译"></a> 3.2.4 开始编译</h4><p><strong>注意因为之前已经安装nginx的，这里就不再make install，否则会覆盖掉之前的安装和配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx]# make</span><br></pre></td></tr></table></figure><p><strong>此时当前目录会出现 objs 文件夹，进入到objs下，拷贝nginx到安装目录下</strong></p><h4 id="325-拷贝新的-nginx-启动文件"><a class="markdownIt-Anchor" href="#325-拷贝新的-nginx-启动文件"></a> 3.2.5 拷贝新的 nginx 启动文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用新的 nginx 文件覆盖当前的 nginx 文件</span></span><br><span class="line"></span><br><span class="line">[root@hbtc nginx]# cp ./objs/nginx ./sbin</span><br></pre></td></tr></table></figure><h4 id="326-再次查看安装的模块"><a class="markdownIt-Anchor" href="#326-再次查看安装的模块"></a> 3.2.6 再次查看安装的模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -V</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有 configure arguments: --with-http_ssl_module 说明ssl模块已安装</span></span><br></pre></td></tr></table></figure><p><strong>至此，nginx支持ssl模块安装完毕！</strong></p><p><strong>加载ssl模块后，会在nginx.conf加上配置文件HTTPS SERVER 后面的ssl信息</strong></p><h2 id="四-安装证书"><a class="markdownIt-Anchor" href="#四-安装证书"></a> 四、安装证书</h2><p>nginx支持https协议需要服务器证书，此证书使用openssl命令生成（确保openssl命令可用）</p><p>证书生成步骤如下：</p><h3 id="41-新建证书存放目录"><a class="markdownIt-Anchor" href="#41-新建证书存放目录"></a> 4.1 新建证书存放目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入到/usr/<span class="built_in">local</span>/nginx-1.18.0/conf/下，新建cert目录，并进入</span></span><br><span class="line">[root@hbtc conf]# mkdir cert</span><br><span class="line">[root@hbtc conf]# cd cert</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="42-生成证书"><a class="markdownIt-Anchor" href="#42-生成证书"></a> 4.2 生成证书</h3><ul><li><strong>生成证书和密钥 -des3: CBC模式的DES加密，以下示例生成一个1024位的RSA私钥</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc cert]# openssl genrsa -des3 -out server.key 1024</span><br></pre></td></tr></table></figure><p>出现以下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Generating RSA private key, 1024 bit long modulus</span><br><span class="line">...............++++++</span><br><span class="line">.................................++++++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">Enter pass phrase for server.key:（此处随意输入证书密码，比如123456）</span><br><span class="line">Verifying - Enter pass phrase for server.key:（重复输入一次）</span><br></pre></td></tr></table></figure><ul><li><strong>创建服务器证书的申请文件 server.csr</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure><p>(注：此步骤生成证书，需要输入国家/地区/公司/个人相关信息，不需要真实，内容差不多就行，可参考下面的加粗部分)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# openssl req -new -key server.key -out server.csr</span><br><span class="line">Enter pass phrase for server.key:（输入上面的密码）</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN# 国家缩写</span><br><span class="line">State or Province Name (full name) []:BeiJing# 省份</span><br><span class="line">Locality Name (eg, city) [Default City]:BeiJing# 市</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:hbtc# 公司名</span><br><span class="line">Organizational Unit Name (eg, section) []:# 组织名，可以不填</span><br><span class="line">Common Name (eg, your name or your server&#x27;s hostname) []:# 公共名，可以不填</span><br><span class="line">Email Address []:# 邮箱地址，可以不填</span><br><span class="line"></span><br><span class="line">Please enter the following &#x27;extra&#x27; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:# 加强的密码，可以不填</span><br><span class="line">An optional company name []:# 可以不填</span><br></pre></td></tr></table></figure><ul><li><strong>备份文件，跳过证书验证密码</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc cert]# cp server.key server.key.org</span><br><span class="line">[root@hbtc cert]# openssl rsa -in server.key.org -out server.key</span><br></pre></td></tr></table></figure><ul><li><strong>生成证书， 证书有效天数(如果输入9999表示永久) 签名，开启双向认证</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc cert]# openssl x509 -req -days 9999 -in server.csr -signkey server.key -out server.crt</span><br><span class="line">Signature ok</span><br><span class="line">subject=/C=CN/ST=BeiJing/L=BeiJing/O=hbtc</span><br><span class="line">Getting Private key</span><br></pre></td></tr></table></figure><p><strong>到此，证书创建完毕。</strong></p><h2 id="五-配置nginxconf"><a class="markdownIt-Anchor" href="#五-配置nginxconf"></a> 五、配置nginx.conf</h2><p>注意ssl证书文件一定得先准备好。</p><p><code>nginx.conf</code> 配置文件的相关配置介绍，可以参考nginx的<a href="http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server">官方配置资料</a></p><p>进入到 <code>/usr/local/nginx-1.18.0/conf</code> ，修改 <code>nginx.conf</code> ，简单配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个server可以80和433共存，但80的还是http</span></span><br><span class="line"><span class="comment">#  HTTPS server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="comment">#ssl on;#nginx1.15版本之前需要加，之后的不用加</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> /usr/local/nginx-<span class="number">1</span>.<span class="number">18</span>.<span class="number">0</span>/conf/cert/server.crt;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /usr/local/nginx-<span class="number">1</span>.<span class="number">18</span>.<span class="number">0</span>/conf/cert/server.key;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; </span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#其它的一些配置</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本人项目完整配置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="attribute">hbtc</span> nginx-<span class="number">1</span>.<span class="number">18</span>.<span class="number">0</span>]<span class="comment"># cat ./conf/nginx.conf </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;<span class="comment"># 替换成你的域名</span></span><br><span class="line">        <span class="attribute">charset</span> UTF8;</span><br><span class="line"><span class="attribute">return</span>  <span class="number">301</span> https://$server_name$request_uri;//新版本重定向语句</span><br><span class="line">        <span class="comment"># rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;//旧版本重定向语句</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#location / &#123;</span></span><br><span class="line">        <span class="comment">#    root   html;</span></span><br><span class="line">        <span class="comment">#    index  index.html index.htm;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;<span class="comment"># 替换成你的域名</span></span><br><span class="line"><span class="comment"># ssl on; nginx1.15版本之前需要加，之后的不用加</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      cert/server.crt;<span class="comment">#放置服务器证书的目录，替换成你的pem文件名称</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  cert/server.key;<span class="comment">#放置服务器私钥的目录，替换成你的key文件名称</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;<span class="comment"># 使用此加密套件</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /home/testServer/dist/;   <span class="comment"># 页面地址</span></span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">16</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&quot;GET, POST, OPTIONS&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://172.16.7.14:8090/;<span class="comment"># 代理地址</span></span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">16</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&quot;GET, POST, OPTIONS&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-nginx相关命令"><a class="markdownIt-Anchor" href="#六-nginx相关命令"></a> 六、nginx相关命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">./sbin/nginx -c ./conf/nginx.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭nginx进程</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载配置文件</span></span><br><span class="line">nginx –s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查配置文件是否有误</span></span><br><span class="line">nginx –t</span><br></pre></td></tr></table></figure><h2 id="七-常见问题"><a class="markdownIt-Anchor" href="#七-常见问题"></a> 七、常见问题</h2><ul><li><strong>启动时nginx:[emerg]unknown directive ssl错误</strong></li></ul><p><strong>原因是nginx缺少SSL模块</strong>，需要重新将SSL模块添加进去，然后再启动nginx：</p><ol><li><p><strong>查看是否有模块<code>./sbin/nginx -V</code></strong></p></li><li><p><strong>在解压目录，执行命令；重新编译nginx</strong></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# cd /usr/local/src/nginx-1.10.0</span><br><span class="line"></span><br><span class="line">[root@hbtc nginx-1.18.0]# ./configure --prefix=/usr/local/nginx-1.18.0 --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.1j</span><br><span class="line"></span><br><span class="line">[root@hbtc nginx-1.18.0]# make</span><br></pre></td></tr></table></figure><p>这一步千万不能 <code>make install</code> ；不然会把之前已经安装的nginx 覆盖掉</p><ol start="3"><li><strong>之后会看在当前目录生成objs文件，执行<code>./objs/nginx -V</code></strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.18.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.1.1j  16 Feb 2021</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.18.0 --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.1j</span><br></pre></td></tr></table></figure><p>发现 <code>TLS SNI support enabled</code> 这我们可以放心用了，这可以实现一个ip多个站点。</p><p>但是 <code>nginx -v</code> 这时候还是老版本的nginx，我们需要先备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/local/nginx-1.18.0/sbin/nginx /usr/local/nginx-1.18.0/sbin/nginx.old</span><br></pre></td></tr></table></figure><p>然后，将 <code>objs</code> 目录下的 <code>nginx</code> 文件复制到 <code>/usr/local/nginx-1.18.0/sbin/</code> 下覆盖，然后重新启动即可。</p><p>测试下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure><p>ok，执行更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make upgrade</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>再次查看nginx的模块，看下是否把需要的模块编译进去了</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hbtc nginx-1.18.0]# ./sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.18.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.1.1j  16 Feb 2021</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.18.0 --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.1j</span><br></pre></td></tr></table></figure><p>到此就成功了升级了 nginx 并且添加了 TLS SNI support 。</p><ol start="5"><li><strong>重新启动nginx；</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx  -s reload</span><br></pre></td></tr></table></figure><ul><li><p><strong>nginx: [alert] could not open error log file: open() “/usr/local/nginx-1.18.0/logs/error.log” failed (2: No such file or directory)</strong></p><p><strong>原因是缺少这个logs目录</strong>，新建这个目录即可 <code>mkdir logs</code></p></li><li><p>暂未实现http自动跳转到https，推测是因为 <code>server_name</code> 没有配置成域名的原因</p></li><li><p>双向验证的配置，参考链接</p></li></ul><p><a href="https://blog.csdn.net/witmind/article/details/78456660?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/witmind/article/details/78456660?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><p><a href="https://blog.csdn.net/YYBDESHIJIE/article/details/109238535?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/YYBDESHIJIE/article/details/109238535?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242</a></p>]]></content>
      
      
      <categories>
          
          <category> nginx配置https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx配置https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal入门</title>
      <link href="/2021/04/02/canal-%E5%85%A5%E9%97%A8/"/>
      <url>/2021/04/02/canal-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="canal入门"><a class="markdownIt-Anchor" href="#canal入门"></a> Canal入门</h1><h2 id="一-环境搭建"><a class="markdownIt-Anchor" href="#一-环境搭建"></a> 一、环境搭建</h2><h3 id="1-docker"><a class="markdownIt-Anchor" href="#1-docker"></a> 1 Docker</h3><h4 id="1-mysql"><a class="markdownIt-Anchor" href="#1-mysql"></a> 1 Mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建数据，配置目录</span></span><br><span class="line">mkdir -p /docker/mysql/&#123;data,conf.d&#125;</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件</span></span><br><span class="line">vim /docker/mysql/conf.d/my.cnf</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line">log_timestamps=SYSTEM</span><br><span class="line">default-time-zone=&#x27;+8:00&#x27;</span><br><span class="line">log-bin=mysql-bin  # 开启binlog</span><br><span class="line">server-id=3306  # 配置MySQL replaction需要定义，不要和Canal的slaveId重复</span><br><span class="line">binlog_format=row  # 选择ROW模式</span><br><span class="line"> </span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动脚本</span></span><br><span class="line">vim /docker/mysql/start.sh</span><br><span class="line"> </span><br><span class="line">docker run --name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /docker/mysql/conf.d:/etc/mysql/conf.d \</span><br><span class="line">-v /docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><ol><li>创建用于同步的账号</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant SELECT, REPLICATION SLAVE, REPLICATION CLIENT on *.* to &#x27;canal&#x27;@&#x27;%&#x27; identified by &quot;canal&quot;;</span><br><span class="line"> </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="2"><li>测试是否生效</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;log_bin&#x27;;</span><br><span class="line">show variables like &#x27;binlog_format&#x27;;</span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure><h4 id="2-canal"><a class="markdownIt-Anchor" href="#2-canal"></a> 2 Canal</h4><ol><li><p>新建启动脚本</p><blockquote><p>vim /docker/canal/start.sh</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name canal \</span><br><span class="line">-e canal.instance.master.address=42.193.118.181:3306 \</span><br><span class="line">-e canal.instance.dbUsername=canal \</span><br><span class="line">-e canal.instance.dbPassword=canal \</span><br><span class="line">-p 11111:11111 \</span><br><span class="line">-d canal/canal-server</span><br></pre></td></tr></table></figure><ol start="2"><li>查看日志</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --tail=&quot;100&quot; canal </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud - Canal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 日志配置</title>
      <link href="/2021/03/31/SpringBoot-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/03/31/SpringBoot-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-日志配置"><a class="markdownIt-Anchor" href="#springboot-日志配置"></a> SpringBoot 日志配置</h1><blockquote><p>新建文件logbak.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://www.padual.com/java/logback.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 second&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取配置中心的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ROOT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/logs/hxkf/resource/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILESIZE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10MB&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MAXHISTORY&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DATETIME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台打印 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ERROR 输入到文件，按日期和文件大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/error.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- WARN 输入到文件，按日期和文件大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/warn.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- INFO 输入到文件，按日期和文件大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/info.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DEBUG 输入到文件，按日期和文件大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/debug.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- TRACE 输入到文件，按日期和文件大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;TRACE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/trace.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- SQL相关日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.spring&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Logger 根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;TRACE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规范与重构</title>
      <link href="/2021/03/05/%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84/"/>
      <url>/2021/03/05/%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="什么情况下要重构"><a class="markdownIt-Anchor" href="#什么情况下要重构"></a> 什么情况下要重构</h1><blockquote><p>首先，重构是时刻保证代码质量的一个极其有效的手段，不至于让代码腐化到无可救药的地步。项目在演进，代码不停地在堆砌。如果没有人为代码的质量负责任，代码总是会往越来越混乱的方向演进。当混乱到一定程度之后，量变引起质变，项目的维护成本已经高过重新开发一套新代码的成本，想要再去重构，已经没有人能做到了。</p><p>其次，优秀的代码或架构不是一开始就能完全设计好的，就像优秀的公司和产品也都是迭代出来的。我们无法 100% 遇见未来的需求，也没有足够的精力、时间、资源为遥远的未来买单，所以，随着系统的演进，重构代码也是不可避免的。</p><p>最后，重构是避免过度设计的有效手段。在我们维护代码的过程中，真正遇到问题的时候，再对代码进行重构，能有效避免前期投入太多时间做过度的设计，做到有的放矢。</p></blockquote><h1 id="到底重构什么"><a class="markdownIt-Anchor" href="#到底重构什么"></a> 到底重构什么</h1><h2 id="重构的对象"><a class="markdownIt-Anchor" href="#重构的对象"></a> 重构的对象</h2><h3 id="大重构"><a class="markdownIt-Anchor" href="#大重构"></a> 大重构</h3><blockquote><p>大型重构指的是对顶层代码设计的重构，包括：系统、模块、代码结构、类与类之间的关系等的重构，重构的手段有：分层、模块化、解耦、抽象可复用组件等等</p></blockquote><h3 id="小重构"><a class="markdownIt-Anchor" href="#小重构"></a> 小重构</h3><blockquote><p>小型重构指的是对代码细节的重构，主要是针对类、函数、变量等代码级别的重构，比如规范命名、规范注释、消除超大类或函数、提取重复代码等等。小型重构更多的是利用我们能后面要讲到的编码规范。这类重构要修改的地方比较集中，比较简单，可操作性较强，耗时会比较短，引入 bug 的风险相对来说也会比较小。你只需要熟练掌握各种编码规范，就可以做到得心应手。</p></blockquote><h1 id="如何进行重构"><a class="markdownIt-Anchor" href="#如何进行重构"></a> 如何进行重构</h1><blockquote><p>大规模高层次的重构难度比较大，需要组织、有计划地进行，分阶段地小步快跑，时刻让代码处于一个可运行的状态。而小规模低层次的重构，因为影响范围小，改动耗时短，所以，只要你愿意并且有时间，随时随地都可以去做。</p></blockquote><h1 id><a class="markdownIt-Anchor" href="#"></a> </h1>]]></content>
      
      
      <categories>
          
          <category> 重构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何进行面向对象设计</title>
      <link href="/2021/03/04/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/03/04/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="如何进行面向对象设计"><a class="markdownIt-Anchor" href="#如何进行面向对象设计"></a> 如何进行面向对象设计</h1><blockquote><p>面向对象分析的产出就是详细的需求描述，面向对象设计的产出就是类，在面向对象设计环节，将需求描述转化成具体的类的设计。</p></blockquote><ul><li>划分职责进而识别有哪些类</li><li>定义类及其属性和方法</li><li>定义类与类之间的交互关系</li><li>将类组装起来并提供执行入口</li></ul><h2 id="划分职责进而识别有哪些类"><a class="markdownIt-Anchor" href="#划分职责进而识别有哪些类"></a> 划分职责进而识别有哪些类</h2><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一：</h3><blockquote><p>把需求描述中的名词罗列出来，作为可能的候选类，在进行筛选</p></blockquote><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二：</h3><blockquote><p>根据需求描述，把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责相近，操作同样的属性，是否应该归为同一个类</p></blockquote><h2 id="定义类及其属性和方法"><a class="markdownIt-Anchor" href="#定义类及其属性和方法"></a> 定义类及其属性和方法</h2><blockquote><p>识别需求描述中的动词，作为候选方法，再进一步过滤筛选，类比一下方法的识别，把功能点设计的名词，作为候选属性，并且不一定所有出现的名词都被定义为类的属性，也可能是方法的参数，不能仅仅依赖当下需求，还需要理解整个业务模型，理解具有哪些属性和方法，这样可以一方面保证类定义的完整性，另一方面为未来的需求做准备</p></blockquote><h3 id="定义类与类之间的交互关系"><a class="markdownIt-Anchor" href="#定义类与类之间的交互关系"></a> 定义类与类之间的交互关系</h3><blockquote><p>泛化、实现、关联、聚合、组合、依赖</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则</title>
      <link href="/2021/02/24/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2021/02/24/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="一-solid原则"><a class="markdownIt-Anchor" href="#一-solid原则"></a> 一、SOLID原则</h1><ul><li>单一职责 S</li><li>开闭 O</li><li>里氏替换 L</li><li>接口隔离 I</li><li>依赖反转 D</li></ul><h2 id="1-单一职责"><a class="markdownIt-Anchor" href="#1-单一职责"></a> 1 单一职责</h2><blockquote><p>单一职责原则的英文是 Single Responsibility Principle，缩写为 SRP。这个原则的英文描述是这样的：A class or module should have a single responsibility。如果我们把它翻译成中文，那就是：一个类或者模块只负责完成一个职责（或者功能）。</p></blockquote><h3 id="1-持续重构"><a class="markdownIt-Anchor" href="#1-持续重构"></a> <strong>1 持续重构</strong></h3><p>我们可以先写一个粗粒度的类，满足业务需求。随着业务的发展，如果粗粒度的类越来越庞大，代码越来越多，这个时候，我们就可以将这个粗粒度的类，拆分成几个更细粒度的类。这就是所谓的持续重构</p><h3 id="2-评判原则"><a class="markdownIt-Anchor" href="#2-评判原则"></a> 2 评判原则</h3><ul><li>类中的代码行数、函数或属性过多，会影响代码的可读性和可维护性，我们就需要考虑对类进行拆分</li><li>类依赖的其他类过多，或者依赖类的其他类过多，不符合高内聚、低耦合的设计思想，我们就需要考虑对类进行拆分；</li><li>私有方法过多，我们就要考虑能否将私有方法独立到新的类中，设置为 public 方法，供更多的类使用，从而提高代码的复用性；</li><li>比较难给类起一个合适名字，很难用一个业务名词概括，或者只能用一些笼统的 Manager、Context 之类的词语来命名，这就说明类的职责定义得可能不够清晰；</li><li>类中大量的方法都是集中操作类中的某几个属性，比如，在 UserInfo 例子中，如果一半的方法都是在操作 address 信息，那就可以考虑将这几个属性和对应的方法拆分出来。</li></ul><h3 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结"></a> 3 总结</h3><h4 id="1-如何理解单一职责原则srp"><a class="markdownIt-Anchor" href="#1-如何理解单一职责原则srp"></a> 1 如何理解单一职责原则（SRP）？</h4><blockquote><p>一个类只负责完成一个职责或者功能。不要设计大而全的类，要设计粒度小、功能单一的类。单一职责原则是为了实现代码高内聚、低耦合，提高代码的复用性、可读性、可维护性。</p></blockquote><h4 id="2-如何判断类的职责是否足够单一"><a class="markdownIt-Anchor" href="#2-如何判断类的职责是否足够单一"></a> 2 如何判断类的职责是否足够单一</h4><ul><li><p>类中的代码行数、函数或者属性过多；</p></li><li><p>类依赖的其他类过多，或者依赖类的其他类过多；</p></li><li><p>私有方法过多；</p></li><li><p>比较难给类起一个合适的名字；</p></li><li><p>类中大量的方法都是集中操作类中的某几个属性。</p></li></ul><h4 id="3-类的职责是否设计得越单一越好"><a class="markdownIt-Anchor" href="#3-类的职责是否设计得越单一越好"></a> 3. 类的职责是否设计得越单一越好？</h4><blockquote><p>单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、低耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。</p></blockquote><h2 id="2-开闭原则"><a class="markdownIt-Anchor" href="#2-开闭原则"></a> 2 开闭原则</h2><blockquote><p>添加一个新的功能应该是，在已有代码基础上扩展代码（新增模块、类、方法等），而非修改已有代码（修改模块、类、方法等）。</p></blockquote><p>添加一个新功能，不可能任何模块、类、方法的代码都不“修改”，这个是做不到的。类需要创建、组装、并且做一些初始化操作，才能构建成可运行的的程序，这部分代码的修改是在所难免的。我们要做的是尽量让修改操作更集中、更少、更上层，尽量让最核心、最复杂的那部分逻辑代码满足开闭原则。</p><h3 id="如何理解对扩展开放-对修改关闭"><a class="markdownIt-Anchor" href="#如何理解对扩展开放-对修改关闭"></a> 如何理解“对扩展开放、对修改关闭”？</h3><blockquote><p>添加一个新的功能，应该是通过在已有代码基础上扩展代码（新增模块、类、方法、属性等），而非修改已有代码（修改模块、类、方法、属性等）的方式来完成。关于定义，我们有两点要注意。第一点是，开闭原则并不是说完全杜绝修改，而是以最小的修改代码的代价来完成新功能的开发。第二点是，同样的代码改动，在粗代码粒度下，可能被认定为“修改”；在细代码粒度下，可能又被认定为“扩展”。</p></blockquote><h3 id="如何做到对扩展开放-修改关闭"><a class="markdownIt-Anchor" href="#如何做到对扩展开放-修改关闭"></a> 如何做到“对扩展开放、修改关闭”？</h3><blockquote><p>我们要时刻具备扩展意识、抽象意识、封装意识。在写代码的时候，我们要多花点时间思考一下，这段代码未来可能有哪些需求变更，如何设计代码结构，事先留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，将新的代码灵活地插入到扩展点上。很多设计原则、设计思想、设计模式，都是以提高代码的扩展性为最终目的的。特别是 23 种经典设计模式，大部分都是为了解决代码的扩展性问题而总结出来的，都是以开闭原则为指导原则的。最常用来提高代码扩展性的方法有：多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式（比如，装饰、策略、模板、职责链、状态）。</p></blockquote><h2 id="3-里氏替换原则"><a class="markdownIt-Anchor" href="#3-里氏替换原则"></a> 3 里氏替换原则</h2><blockquote><p>子类完美继承父类的设计初衷，遵循父类设计协议，并进行增强</p></blockquote><h2 id="4-接口隔离原则"><a class="markdownIt-Anchor" href="#4-接口隔离原则"></a> 4 接口隔离原则</h2><h3 id="如何理解接口隔离原则"><a class="markdownIt-Anchor" href="#如何理解接口隔离原则"></a> 如何理解“接口隔离原则”？</h3><blockquote><p>理解“接口隔离原则”的重点是理解其中的“接口”二字。这里有三种不同的理解。如果把“接口”理解为一组接口集合，可以是某个微服务的接口，也可以是某个类库的接口等。如果部分接口只被部分调用者使用，我们就需要将这部分接口隔离出来，单独给这部分调用者使用，而不强迫其他调用者也依赖这部分不会被用到的接口。如果把“接口”理解为单个 API 接口或函数，部分调用者只需要函数中的部分功能，那我们就需要把函数拆分成粒度更细的多个函数，让调用者只依赖它需要的那个细粒度函数。如果把“接口”理解为 OOP 中的接口，也可以理解为面向对象编程语言中的接口语法。那接口的设计要尽量单一，不要让接口的实现类和调用者，依赖不需要的接口函数。</p></blockquote><h3 id="接口隔离原则与单一职责原则的区别"><a class="markdownIt-Anchor" href="#接口隔离原则与单一职责原则的区别"></a> 接口隔离原则与单一职责原则的区别</h3><blockquote><p>单一职责原则针对的是模块、类、接口的设计。接口隔离原则相对于单一职责原则，一方面更侧重于接口的设计，另一方面它的思考角度也是不同的。接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。</p></blockquote><h2 id="5-控制反转依赖注入依赖反转"><a class="markdownIt-Anchor" href="#5-控制反转依赖注入依赖反转"></a> 5 控制反转，依赖注入，依赖反转</h2><h3 id="控制反转"><a class="markdownIt-Anchor" href="#控制反转"></a> 控制反转</h3><blockquote><p>实际上，控制反转是一个比较笼统的设计思想，并不是一种具体的实现方法，一般用来指导框架层面的设计。这里所说的“控制”指的是对程序执行流程的控制，而“反转”指的是在没有使用框架之前，程序员自己控制整个程序的执行。在使用框架之后，整个程序的执行流程通过框架来控制。流程的控制权从程序员“反转”给了框架。</p></blockquote><h3 id="依赖注入"><a class="markdownIt-Anchor" href="#依赖注入"></a> 依赖注入</h3><blockquote><p>依赖注入和控制反转恰恰相反，它是一种具体的编码技巧。我们不通过 new 的方式在类内部创建依赖类的对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类来使用。</p></blockquote><h3 id="依赖注入框架"><a class="markdownIt-Anchor" href="#依赖注入框架"></a> 依赖注入框架</h3><blockquote><p>我们通过依赖注入框架提供的扩展点，简单配置一下所有需要的类及其类与类之间依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。</p></blockquote><h3 id="依赖反转原则"><a class="markdownIt-Anchor" href="#依赖反转原则"></a> 依赖反转原则</h3><blockquote><p>依赖反转原则也叫作依赖倒置原则。这条原则跟控制反转有点类似，主要用来指导框架层面的设计。高层模块不依赖低层模块，它们共同依赖同一个抽象。抽象不要依赖具体实现细节，具体实现细节依赖抽象。</p></blockquote><h2 id="6-dry原则"><a class="markdownIt-Anchor" href="#6-dry原则"></a> 6 DRY原则</h2><h3 id="怎么提高代码复用性"><a class="markdownIt-Anchor" href="#怎么提高代码复用性"></a> 怎么提高代码复用性？</h3><h4 id="减少代码耦合"><a class="markdownIt-Anchor" href="#减少代码耦合"></a> 减少代码耦合</h4><blockquote><p>对于高度耦合的代码，当我们希望复用其中的一个功能，想把这个功能的代码抽取出来成为一个独立的模块、类或者函数的时候，往往会发现牵一发而动全身。移动一点代码，就要牵连到很多其他相关的代码。所以，高度耦合的代码会影响到代码的复用性，我们要尽量减少代码耦合。</p></blockquote><h4 id="满足单一职责原则"><a class="markdownIt-Anchor" href="#满足单一职责原则"></a> 满足单一职责原则</h4><blockquote><p>我们前面讲过，如果职责不够单一，模块、类设计得大而全，那依赖它的代码或者它依赖的代码就会比较多，进而增加了代码的耦合。根据上一点，也就会影响到代码的复用性。相反，越细粒度的代码，代码的通用性会越好，越容易被复用。</p></blockquote><h4 id="模块化"><a class="markdownIt-Anchor" href="#模块化"></a> 模块化</h4><blockquote><p>这里的“模块”，不单单指一组类构成的模块，还可以理解为单个类、函数。我们要善于将功能独立的代码，封装成模块。独立的模块就像一块一块的积木，更加容易复用，可以直接拿来搭建更加复杂的系统。</p></blockquote><h4 id="业务与非业务逻辑分离"><a class="markdownIt-Anchor" href="#业务与非业务逻辑分离"></a> 业务与非业务逻辑分离</h4><blockquote><p>越是跟业务无关的代码越是容易复用，越是针对特定业务的代码越难复用。所以，为了复用跟业务无关的代码，我们将业务和非业务逻辑代码分离，抽取成一些通用的框架、类库、组件等。</p></blockquote><h4 id="通用代码下沉"><a class="markdownIt-Anchor" href="#通用代码下沉"></a> 通用代码下沉</h4><blockquote><p>从分层的角度来看，越底层的代码越通用、会被越多的模块调用，越应该设计得足够可复用。一般情况下，在代码分层之后，为了避免交叉调用导致调用关系混乱，我们只允许上层代码调用下层代码及同层代码之间的调用，杜绝下层代码调用上层代码。所以，通用的代码我们尽量下沉到更下层。</p></blockquote><h4 id="继承-多态-抽象-封装"><a class="markdownIt-Anchor" href="#继承-多态-抽象-封装"></a> 继承、多态、抽象、封装</h4><blockquote><p>在讲面向对象特性的时候，我们讲到，利用继承，可以将公共的代码抽取到父类，子类复用父类的属性和方法。利用多态，我们可以动态地替换一段代码的部分逻辑，让这段代码可复用。除此之外，抽象和封装，从更加广义的层面、而非狭义的面向对象特性的层面来理解的话，越抽象、越不依赖具体的实现，越容易复用。代码封装成模块，隐藏可变的细节、暴露不变的接口，就越容易复用。</p></blockquote><h4 id="应用模板等设计模式"><a class="markdownIt-Anchor" href="#应用模板等设计模式"></a> 应用模板等设计模式</h4><blockquote><p>一些设计模式，也能提高代码的复用性。比如，模板模式利用了多态来实现，可以灵活地替换其中的部分代码，整个流程模板代码可复用。关于应用设计模式提高代码复用性这一部分，我们留在后面慢慢来讲解。</p></blockquote><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><blockquote><p>除了刚刚几点，还有一些跟编程语言相关的特性，也能提高代码的复用性，比如泛型编程等。实际上，除了上面讲到的这些方法之外，复用意识也非常重要。在写代码的时候，我们要多去思考一下，这个部分代码是否可以抽取出来，作为一个独立的模块、类或者函数供多处使用。在设计每个模块、类、函数的时候，要像设计一个外部 API 那样，去思考它的复用性。</p></blockquote><h3 id="辩证思考和灵活应用"><a class="markdownIt-Anchor" href="#辩证思考和灵活应用"></a> 辩证思考和灵活应用</h3><blockquote><p>“Rule of Three”。这条原则可以用在很多行业和场景中，你可以自己去研究一下。如果把这个原则用在这里，那就是说，我们在第一次写代码的时候，如果当下没有复用的需求，而未来的复用需求也不是特别明确，并且开发可复用代码的成本比较高，那我们就不需要考虑代码的复用性。在之后我们开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。</p><p>也就是说，第一次编写代码的时候，我们不考虑复用性；第二次遇到复用场景的时候，再进行重构使其复用。需要注意的是，“Rule of Three”中的“Three”并不是真的就指确切的“三”，这里就是指“二”。</p></blockquote><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><h4 id="dry-原则"><a class="markdownIt-Anchor" href="#dry-原则"></a> DRY 原则</h4><blockquote><p>实现逻辑重复、功能语义重复、代码执行重复。实现逻辑重复，但功能语义不重复的代码，并不违反 DRY 原则。实现逻辑不重复，但功能语义重复的代码，也算是违反 DRY 原则。除此之外，代码执行重复也算是违反 DRY 原则。</p></blockquote><h4 id="代码复用性"><a class="markdownIt-Anchor" href="#代码复用性"></a> 代码复用性</h4><ul><li>减少代码耦合</li><li>满足单一职责原则</li><li>模块化</li><li>业务与非业务逻辑分离</li><li>通用代码下沉</li><li>继承、多态、抽象、封装</li><li>应用模板等设计模式</li></ul><blockquote><p>实际上，除了上面讲到的这些方法之外，复用意识也非常重要。在设计每个模块、类、函数的时候，要像设计一个外部 API 一样去思考它的复用性。</p><p>我们在第一次写代码的时候，如果当下没有复用的需求，而未来的复用需求也不是特别明确，并且开发可复用代码的成本比较高，那我们就不需要考虑代码的复用性。在之后开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。</p><p>相比于代码的可复用性，DRY 原则适用性更强一些。我们可以不写可复用的代码，但一定不能写重复的代码。</p></blockquote><h2 id="7-高内聚低耦合"><a class="markdownIt-Anchor" href="#7-高内聚低耦合"></a> 7 高内聚，低耦合</h2><h3 id="如何理解高内聚-松耦合"><a class="markdownIt-Anchor" href="#如何理解高内聚-松耦合"></a> 如何理解“高内聚、松耦合”？</h3><blockquote><p>“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。“高内聚”用来指导类本身的设计，“松耦合”用来指导类与类之间依赖关系的设计。</p><p>所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放到同一类中。相近的功能往往会被同时修改，放到同一个类中，修改会比较集中。所谓松耦合指的是，在代码中，类与类之间的依赖关系简单清晰。即使两个类有依赖关系，一个类的代码改动也不会或者很少导致依赖类的代码改动。</p></blockquote><h3 id="如何理解迪米特法则"><a class="markdownIt-Anchor" href="#如何理解迪米特法则"></a> 如何理解“迪米特法则”</h3><blockquote><p>不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。迪米特法则是希望减少类之间的耦合，让类越独立越好。每个类都应该少了解系统的其他部分。一旦发生变化，需要了解这一变化的类就会比较少。</p></blockquote><h3 id="与单一职责的区别"><a class="markdownIt-Anchor" href="#与单一职责的区别"></a> 与单一职责的区别</h3><blockquote><p>目的都是实现高内聚低耦合，但是出发的角度不一样，单一职责是从自身提供的功能出发，迪米特法则是从关系出发，针对接口而非实现编程是使用者的角度，殊途同归。</p></blockquote><h2 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8 总结</h2><h3 id="1单一职责原则"><a class="markdownIt-Anchor" href="#1单一职责原则"></a> 1.单一职责原则</h3><p>适用对象:模块，类，接口<br>侧重点:高内聚，低耦合<br>思考角度:自身</p><h3 id="2接口隔离原则"><a class="markdownIt-Anchor" href="#2接口隔离原则"></a> 2.接口隔离原则</h3><p>适用对象:接口，函数<br>侧重点:低耦合<br>思考角度:调用者</p><h3 id="3基于接口而非实现编程"><a class="markdownIt-Anchor" href="#3基于接口而非实现编程"></a> 3.基于接口而非实现编程</h3><p>适用对象:接口，抽象类<br>侧重点:低耦合<br>思考角度:调用者</p><h3 id="4迪米特法则"><a class="markdownIt-Anchor" href="#4迪米特法则"></a> 4.迪米特法则</h3><p>适用对象:模块，类<br>侧重点:低耦合<br>思考角度:类关系</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图</title>
      <link href="/2021/01/28/UML%E7%B1%BB%E5%9B%BE/"/>
      <url>/2021/01/28/UML%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一-统一建模语言"><a class="markdownIt-Anchor" href="#一-统一建模语言"></a> 一 统一建模语言</h1><blockquote><p>统一建模语言（Unified Modeling Language，缩写UML）是非专利的第三代建模和规约语言。<br>UML是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。</p></blockquote><h1 id="二-uml类图"><a class="markdownIt-Anchor" href="#二-uml类图"></a> 二 UML类图</h1><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/28/UML%E7%B1%BB%E5%9B%BE/image-20210128132236858.png" alt="image-20210128132236858"></p><blockquote><p>类的表示方法如图，一般分为三层，从上到下依次为类名、属性和方法。</p></blockquote><ul><li>+：public，-：private，#：protected，~：default</li><li>属性冒号后的内容表示属性的类型</li><li>方法冒号后的内容表示属性的返回值</li><li>类型说明并不是必须的</li></ul><h1 id="三-类关系表示"><a class="markdownIt-Anchor" href="#三-类关系表示"></a> 三 类关系表示</h1><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/28/UML%E7%B1%BB%E5%9B%BE/image-20210128133806988.png" alt="关系表示"></p><h2 id="1-继承generalization"><a class="markdownIt-Anchor" href="#1-继承generalization"></a> 1 继承(Generalization)</h2><blockquote><p>继承关系也叫泛化关系，指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系。</p><p>继承用实线空心箭头表示，由子类指向父类。</p></blockquote><h2 id="2-实现implements"><a class="markdownIt-Anchor" href="#2-实现implements"></a> 2 实现(implements)</h2><blockquote><p>指的是一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系；在Java中此类关系通过关键字implements明确标识</p></blockquote><h2 id="3-依赖关系dependency"><a class="markdownIt-Anchor" href="#3-依赖关系dependency"></a> 3 依赖关系（Dependency）</h2><blockquote><p>就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用。</p></blockquote><h2 id="4-关联关系association"><a class="markdownIt-Anchor" href="#4-关联关系association"></a> 4 关联关系（Association）</h2><blockquote><p>关联是一种结构化的关系，指一种对象和另一种对象有联系。给定有关联的两个类，可以从一个类的对象得到另一个类的对象。关联有两元关系和多元关系。两元关系是指一种一对一的关系，多元关系是一对多或多对一的关系。一般用实线连接有关联的同一个类或不同的两个类。当你想要表示结构化关系时使用关联，如果几个类元的实例之间有联系，那么这几个类元之间的语义关系即关联。关联描述了系统中对象或实例之间的离散连接。</p><p>关联将一个含有两个或多个有序表的类元，在允许复制的情况下连接起来。最普通的关联是一对类元之间的二元关联。关联的实例之一是链。每个链由一组对象（一个有序列表）构成，每个对象来自于相应的类。二元链包含一对对象。关联带有系统中各个对象之间关系的信息。当系统执行时，对象之间的连接被建立和销毁。关联关系是整个系统中使用的“胶粘剂”，如果没有它，那么只剩下不能一起工作的孤立的类。在关联中如果同一个类出现不止一次，那么一个单独的对象就可以与自己关联。如果同一个类在一个关联中出现两次，那么两个实例就不必是同一个对象，通常的情况都如此。二元关联用一条连接两个类的连线表示。</p><p>聚集表示部分与整体关系的关联，它用端点带有空菱形的线段表示，空菱形与聚集类相连接。组成是更强形式的关联，整体有管理部分的特有的职责，它用一个实菱形物附在组成端表示。每个表示部分的类与表示整体的类之间有单独的关联，但是为了方便起见，连线结合在一起，现在整组关联就像一棵树。</p><p>关联关系是通过类的成员变量 来实现的 。</p></blockquote><h2 id="5-聚合关系aggregation"><a class="markdownIt-Anchor" href="#5-聚合关系aggregation"></a> 5 聚合关系（Aggregation）</h2><blockquote><p>聚合是一种特殊的关联。它描述了“has a”关系，表示整体对象拥有部分对象。<br>关联关系和聚合关系来语法上是没办法区分的，从语义 上才能更好的区分两者的区别。聚合是较强的关联关系，强调的是整体与部分 之间的关系。</p><p>与关联关系一样，聚合关系也是通过类的成员变量 来实现的。</p></blockquote><h2 id="6-组合composition"><a class="markdownIt-Anchor" href="#6-组合composition"></a> 6 组合（Composition）</h2><blockquote><p>组合是聚合的一种形式，它具有更强的拥有关系，强调整体与部分的生命周期 是一致的。整体负责部分的生命周期的管理。如果整体被销毁，部分也必须跟着一起被销毁，如果所有者被复制，部分也必须一起被复制。</p><p>与关联关系一样，组合关系也是通过类的成员变量 来实现的。</p></blockquote><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p><a href="http://c.biancheng.net/view/1319.html">C语言中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML时序图</title>
      <link href="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/"/>
      <url>/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="uml时序图"><a class="markdownIt-Anchor" href="#uml时序图"></a> UML时序图</h1><h2 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一 概述</h2><h3 id="1-什么是时序图"><a class="markdownIt-Anchor" href="#1-什么是时序图"></a> 1 什么是时序图</h3><blockquote><p>时序图（Sequence Diagram）又名序列图、循环图、是一种UML交互图，通过扫描对象之间发送消息的时间顺序显示多个对象之间的动态协作</p></blockquote><h3 id="2-时序图的元素"><a class="markdownIt-Anchor" href="#2-时序图的元素"></a> 2 时序图的元素</h3><ul><li><code>Actor</code> （角色）</li></ul><blockquote><p>系统角色，可以是人或者其他系统，子系统，以一个小人图标表示</p></blockquote><ul><li><code>Object</code>（对象）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127135929423.png" alt="对象"></p><blockquote><p>对象位于时序图的顶部，以一个矩形表示，队形的命名方式一般有三种</p><ol><li>对象名和类名</li><li>只显示类名，不显示对象</li><li>只显示对象名，不显示类名</li></ol></blockquote><ul><li><code>LifeLine</code>（生命线）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127140147833.png" alt="生命线"></p><blockquote><p>时序图中每个对象和底部中心都有一条垂直的虚线，这就是对象生命线（对象的时间线），以一条垂直的虚线表</p></blockquote><ul><li><code>Activation</code> （控制焦点）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127143032503.png" alt="控制焦点"></p><ul><li><code>Message</code> (消息)</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127150949761.png" alt="消息"></p><blockquote><p>A 向 B 发送消息message1，其实就是叫 B 去调用 message1这个方法。消息一般分为同步消息，异步消息和返回消息，自关联消息(也就是自己调用自己的方法)</p></blockquote><ul><li><p><code>自关联消息</code></p></li><li><p><code>创建对象</code></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127151835047.png" alt="创建对象"></p><blockquote><p>【定义】：创建对象也算是消息的一种，通过发送消息的方式创建对象。<br>【描述方式】：在时序图的图形表示中，和其他对象不一样的是，其他对象通常位于整个时序图的顶部，而被创建的对象则位于图的中间部位。<br>【备注】：创建在使用中比较少看到，基本都是最开始就把所有对象创建好，然后画时序图，为了以后能看懂别的时序图，这里特地提出。</p></blockquote><ul><li><code>销毁对象</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127152220286.png" alt="销毁对象"></p><blockquote><p>【定义】：创建对象也算是消息的一种，通过发送消息的方式销毁对象。<br>【描述方式】：描述方式没有什么变化，就是发送消息给对象，只是在对象的生命线中会添加一个”X“,来进行标示。<br>【备注】：删除对象一般在时序图中也不是很常见，如果没有要特别注意的删除事件，一般都是不写的</p></blockquote><ul><li><code>结束点</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210127152346964.png" alt="结束点"></p><blockquote><p>标记整个业务结束的位置</p></blockquote><ul><li>组合片段</li></ul><blockquote><p>组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。组合片段共有13种，名称及含义如下：</p></blockquote><table><thead><tr><th>组合名称</th><th>组合含义</th></tr></thead><tbody><tr><td>ref</td><td>引用其他地方定义的组合片段</td></tr><tr><td>alt</td><td>在一组行为中根据特定的条件选择某个交互</td></tr><tr><td>opt</td><td>表示一个可选的行为</td></tr><tr><td>break</td><td>提供了和编程语言中的break类拟的机制</td></tr><tr><td>par</td><td>支持交互片段的并发执行</td></tr><tr><td>seq</td><td>强迫交互按照特定的顺序执行</td></tr><tr><td>strict</td><td>明确定义了一组交互片段的执行顺序</td></tr><tr><td>neg</td><td>用来标志不应该发生的交互</td></tr><tr><td>region</td><td>标志在组合片段中先于其他交互片断发生的交互</td></tr><tr><td>ignore</td><td>明确定义了交互片段不应该响应的消息</td></tr><tr><td>consider</td><td>明确标志了应该被处理的消息</td></tr><tr><td>assert</td><td>标志了在交互片段中作为事件唯一的合法继续者的操作数</td></tr><tr><td>loop</td><td>说明交互片段会被重复执行</td></tr></tbody></table><h1 id="二-示例"><a class="markdownIt-Anchor" href="#二-示例"></a> 二 示例</h1><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/27/UML%E6%97%B6%E5%BA%8F%E5%9B%BE/image-20210128103831994.png" alt="示例"></p><h1 id="三-参考"><a class="markdownIt-Anchor" href="#三-参考"></a> 三 参考</h1><p><a href="https://blog.csdn.net/fly_zxy/article/details/80911942">参考文档1</a></p>]]></content>
      
      
      <categories>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML - UML时序图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 遇到紧急加塞任务怎么办? git stash入门</title>
      <link href="/2021/01/26/git-%E9%81%87%E5%88%B0%E7%B4%A7%E6%80%A5%E5%8A%A0%E5%A1%9E%E4%BB%BB%E5%8A%A1%E6%80%8E%E4%B9%88%E5%8A%9E-git-stash%E5%85%A5%E9%97%A8/"/>
      <url>/2021/01/26/git-%E9%81%87%E5%88%B0%E7%B4%A7%E6%80%A5%E5%8A%A0%E5%A1%9E%E4%BB%BB%E5%8A%A1%E6%80%8E%E4%B9%88%E5%8A%9E-git-stash%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p></p><p><strong>今作此文,寻章摘句,权抛砖引玉,遗笑方家处,敬请见谅</strong></p><blockquote><p>场景: 平常我们在开发新的版本或者在探索一些奇妙的东西(手动滑稽)的时候,由于我们手上的的代码还没有生成commit,又没到生成commit的时候或者自己嫌麻烦懒得去做本地rebase了这时候 <code>git stash</code>就派生了用场</p></blockquote><h1 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h1><ul><li><p><code>git stash</code> :执行存储不添加备注</p></li><li><p><code>git stash save &quot;save message&quot;</code> : 在执行的存储上添加备注,避免当stash中的内容过多时造成混淆</p></li><li><p><code>git stash list</code>  ：查看当前stash中存在哪些存储</p></li><li><p><code>git stash show</code> ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，使用 <code>git stash show stash@&#123;$num&#125;</code></p></li><li><p><code>git stash show -p</code> : 显示第一个存储的改动，如果想显示其他存储,可以使用<code>git stash show stash@&#123;$num&#125; -p</code></p></li><li><p><code>git stash apply</code> :应用某个存储,但不会把存储从存储列表中删除，如果要使用其他存储使用 <code>git stash apply stash@&#123;$num&#125;</code> <strong><mark>注:这一条命令只会恢复工作区的内容,如果想恢复工作区和暂存区的内容使用下一条命令</mark></strong></p></li><li><p><code>git stash apply --index</code> :与前一条效果一样但是会多恢复暂存区</p></li><li><p><code>git stash pop stash@&#123;序号&#125;</code>：恢复保存列表里面指定的保存记录，并把恢复的记录从保存列表中删除</p></li><li><p><code>git stash pop --index</code>与前一条效果一样但是会多恢复暂存区</p></li><li><p><code>git stash drop stash@&#123;$num&#125;</code>：删除stash指定保存的记录 不加@{$num} 默认第一条</p></li><li><p><code>git stash clear</code>：删除stash中所有的记录</p></li><li><p><code>git stash push</code></p><ul><li><code>-p|–patch</code><br>交互式stash，每个修改逐个确认，之后不停按y/n来选择要stash的修改</li><li><code>-k|–[no-]keep-index</code><br>已经git add的文件stash之后修改还保留</li></ul><p>-k和–no-keep-index指定保存进度后，是否重置暂存区<br>–patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似</p><ul><li><code>-q|–quiet</code></li><li><code>-u|–include-untracked</code><br>新创建的文件直接git stash是不会被stash的，加上这个就可以</li><li><code>-a|–all</code><br>比上一个-u更强，连被git ignore的文件都可以stash</li><li><code>-m|–message &lt;message&gt;</code><br>指定一些说明性文字</li><li><code>[--] [&lt;pathspec&gt;…]</code><br>指定stash的文件，但是如果其他文件有被git add过，也会被同时stash。不过只有指定的文件的修改会从工作副本中clean掉。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定说明信息并stash所有java文件的修改</span></span><br><span class="line">git stash push -m <span class="string">&quot;this is a partly stash test&quot;</span> **/*.java</span><br></pre></td></tr></table></figure><ul><li><code>git stash branch</code></li></ul><blockquote><p>branch  [branchname]   [stash]</p><p>以这个stash被创建的那个commit为起点，创建一个叫branchname的分支，然后再在这个分支执行git stash pop —index stash</p></blockquote><ul><li><code>git stash create</code></li></ul><blockquote><p>创建一个stash，并返回他的commit对象，但并不在refs中存储这个对象</p></blockquote><ul><li><code>git stash store</code></li></ul><blockquote><p>存储通过create创建的stash。(可以在refs的stash和log/refs下看到这个stash)</p></blockquote></li></ul><h1 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h1><ul><li>首先对工作区与暂存区都做了修改<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200405201855209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTM0NDc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>现在来了紧急任务保存现场 <code>git stash save &quot;msg&quot;</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200405202202508.png" alt="在这里插入图片描述"></li><li>当我们解决完了问题之后恢复之前的现场 这里的<code>\</code> 是一个转义字符<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200405202322751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTM0NDc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>不难发现 草(一种植物) 我暂存区内容的 emm 幸亏我们这里用了 apply git stash 中的记录还存在我们可以这样<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200405202557905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTM0NDc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h1 id="解决git-stash-冲突"><a class="markdownIt-Anchor" href="#解决git-stash-冲突"></a> 解决GIt Stash 冲突</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash branch new_branch [&lt;stash&gt;]  <span class="comment"># &lt;stash&gt; will be the last one if not provided.</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>1.<code>git stash</code> 命令还是很好用的有木有</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 恢复文件三种办法</title>
      <link href="/2021/01/26/Git-%E6%81%A2%E5%A4%8D%E6%96%87%E4%BB%B6%E4%B8%89%E7%A7%8D%E5%8A%9E%E6%B3%95/"/>
      <url>/2021/01/26/Git-%E6%81%A2%E5%A4%8D%E6%96%87%E4%BB%B6%E4%B8%89%E7%A7%8D%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h1><blockquote><p>这样直接覆盖工作区的文件了</p></blockquote><p><a href="https://git-scm.com/docs/git-restore/2.23.0">官网文档</a></p><ul><li><code>git restore --source</code> 某次提交的commitdi -W 要写的文件名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如，如果我希望文件在工作副本和索引中的内容都与三次提交之前相同，则可以这样写：main.c</span></span><br><span class="line">git restore --<span class="built_in">source</span> HEAD~3 --staged --worktree main.c</span><br></pre></td></tr></table></figure><blockquote><p>git cat 可以读取任意某次提交的文件内容，通过重定向到一个新文件，这样不影响现在工作区的修。</p></blockquote><ul><li><code>git cat-file commitid:文件的相对路径 &gt; 新的文件名</code></li></ul><ul><li><code>git reset 与 git checkout</code><ul><li><code>reset hard</code>同时重置仓库 index 工作区</li><li><code>reset mix</code>同时重置仓库 index</li><li><code>reset soft</code>重置仓库</li><li><code>checkout --</code> 这种用index重置工作区</li></ul></li></ul><h1 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> <strong>结论</strong></h1><p>只重置工作区，而且不是用index，是用仓库的提交，只能restore</p><p>但是这种操作都可能导致未提交的工作区修改丢失，因为没提交，所以不可逆</p><p>git cat 可以读取任意某次提交的文件内容，通过重定向到一个新文件，这样不影响现在工作区的修改，就曲线救国</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GateWay</title>
      <link href="/2021/01/24/GateWay/"/>
      <url>/2021/01/24/GateWay/</url>
      
        <content type="html"><![CDATA[<h1 id="一-概念"><a class="markdownIt-Anchor" href="#一-概念"></a> 一、概念</h1><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">官网</a></p><blockquote><p>GateWay是在Spring生态系统之上构建的API网关服务，基于Spring5，SpringBoot2，和Project Reactor等技术，Gateway只在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，；例如，熔断、限流、重试等</p></blockquote><blockquote><p>SpringCloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Zuul，在SpringCloud 2.0以上版本中，没有对新版本的Zuul2.0以上最新高性能版本进行集成，仍然使用Zuul1.x非Reactor模式的老版本，为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty</p></blockquote><blockquote><p>SpringCloud GateWay的目标提供统一的路由方式且基于Filter链的方式提供了网关的基本功能，例如：安全，监控、指标、和限流</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/24/GateWay/image-20210124170828606.png" alt="image-20210124170828606"></p><h2 id="1-路由"><a class="markdownIt-Anchor" href="#1-路由"></a> 1 路由</h2><blockquote><p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p></blockquote><h2 id="2-predicate断言"><a class="markdownIt-Anchor" href="#2-predicate断言"></a> 2 Predicate（断言）</h2><blockquote><p>参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</p></blockquote><h2 id="3-filter过滤"><a class="markdownIt-Anchor" href="#3-filter过滤"></a> 3 Filter(过滤)</h2><blockquote><p>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p></blockquote><h2 id="4-核心逻辑"><a class="markdownIt-Anchor" href="#4-核心逻辑"></a> 4 核心逻辑</h2><blockquote><p>路由转发+执行过滤器链</p></blockquote><h2 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5 总结</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/24/GateWay/image-20210124184814535.png" alt="image-20210124184814535"></p><blockquote><p>客户端向SpringCloud Gatway发出请求。然后在GateWay Handler Mapping中找到与请求相匹配的路由，将其发送到GateWay Web Handler上</p><p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回，过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前或之后执行业务    逻辑</p><p>Filter在pre类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在post类型的过滤器可以做响应内容、响应头修改、日志输出、流量监控等</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/24/GateWay/image-20210124184847772.png" alt="image-20210124184847772"></p><h1 id="二-使用"><a class="markdownIt-Anchor" href="#二-使用"></a> 二、使用</h1><h2 id="1-配置"><a class="markdownIt-Anchor" href="#1-配置"></a> 1 配置</h2><p><strong>POM依赖</strong></p><blockquote><p>注意：因为GateWay是WebFlux要剔除SpringWeb</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--新增gateway--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>YAML文件</strong></p><blockquote><p>默认情况下Gateway会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-order-consumer</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/feign/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line">          <span class="comment">#StripPrefix=1就代表截取路径的个数，这样配置后当请求/config/feign/get后端匹配到的请求路径，</span></span><br><span class="line">          <span class="comment">#就会变成http://localhost:8762/feign/get后端匹配到的请求路径</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-config-client</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/config/feign/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line">        <span class="comment">#StripPrefix=1就代表截取路径的个数，这样配置后当请求/config/feign/get后端匹配到的请求路径，</span></span><br><span class="line">        <span class="comment">#就会变成http://localhost:8762/feign/get后端匹配到的请求路径</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</li><li>lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/24/GateWay/image-20210124205119110.png" alt="Route Predicate Factories"></p><h2 id="2-代码实现配置"><a class="markdownIt-Anchor" href="#2-代码实现配置"></a> 2 代码实现配置</h2><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(r -&gt; r.path(<span class="string">&quot;/activity/**&quot;</span>)</span><br><span class="line">                        .filters(f -&gt; f.stripPrefix(<span class="number">1</span>).filter(<span class="keyword">new</span> TestGetWayFilter()).addResponseHeader(<span class="string">&quot;X-Response-Default-Foo&quot;</span>, <span class="string">&quot;Default-Bar&quot;</span>))</span><br><span class="line">                        .uri(<span class="string">&quot;lb://activity&quot;</span>)</span><br><span class="line">                        .order(<span class="number">0</span>)</span><br><span class="line">                        .id(<span class="string">&quot;activity-route&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-常用的route-predicate"><a class="markdownIt-Anchor" href="#3-常用的route-predicate"></a> 3 常用的Route Predicate</h2><ul><li><code>After</code> Route Predicate</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><ul><li><code>Before</code> route predicate</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">before_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><ul><li><code>Between</code> route predicate</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">between_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017-01-21T17:42:47.789-07:00</span>[<span class="string">America/Denver</span>]</span><br></pre></td></tr></table></figure><ul><li><code>Cookie</code> route predicate</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br></pre></td></tr></table></figure><p>This route matches requests that have a cookie named <code>chocolate</code> whose value matches the <code>ch.p</code> regular expression.</p><ul><li><code>Header</code> route predicate</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p>This route matches if the request has a header named <code>X-Request-Id</code> whose value matches the <code>\d+</code> regular expression (that is, it has a value of one or more digits).</p><ul><li><code>Host</code> route predicate</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">详见官网</a></p><h1 id="三-过滤器"><a class="markdownIt-Anchor" href="#三-过滤器"></a> 三 、过滤器</h1><blockquote><p>Route filters allow the modification of the incoming HTTP request or outgoing HTTP response in some manner. Route filters are scoped to a particular route. Spring Cloud Gateway includes many built-in GatewayFilter Factories.</p><p>路由过滤器可用于修改进入HTTP请求和返回的HTTP响应，路由过滤器智能指定路由进行使用，SPringCloudGateWay内置了多种路由过滤器，他们由GateWayFilter的工厂类来产生</p></blockquote><h2 id="1-常用的gatewayfilter"><a class="markdownIt-Anchor" href="#1-常用的gatewayfilter"></a> 1 常用的GatewayFilter</h2><ul><li><code>AddRequestParameter</code></li></ul><blockquote><p>This listing adds <code>X-Request-red:blue</code> header to the downstream request’s headers for all matching requests.</p><p><code>AddRequestHeader</code> is aware of the URI variables used to match a path or host. URI variables may be used in the value and are expanded at runtime. The following example configures an <code>AddRequestHeader</code> <code>GatewayFilter</code> that uses a variable:</p><p>会在匹配的请求头上加一对请求头</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">其余见官网</a></li></ul><h2 id="2-自定义过滤器"><a class="markdownIt-Anchor" href="#2-自定义过滤器"></a> 2 自定义过滤器</h2><h3 id="1-实现接口"><a class="markdownIt-Anchor" href="#1-实现接口"></a> 1 实现接口</h3><ul><li>GlobalFilter</li><li>Ordered</li></ul><h3 id="2-作用"><a class="markdownIt-Anchor" href="#2-作用"></a> 2 作用</h3><ul><li><p>全局日志记录</p></li><li><p>统一网关鉴权等</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud - Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven常用命令</title>
      <link href="/2021/01/23/Maven%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/01/23/Maven%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenFeign</title>
      <link href="/2021/01/23/OpenFeign/"/>
      <url>/2021/01/23/OpenFeign/</url>
      
        <content type="html"><![CDATA[<h1 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h1><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/">官网</a></p><blockquote><p>Feign是一个声明式WebService客户端，使用Feign能让编写WebService客户端更加简单</p></blockquote><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>@RequestLine</td><td>方法上 定义HttpMethod 和 UriTemplate. UriTemplate 中使用{} 包裹的表达式，可以通过在方法参数上使用</td></tr><tr><td>@Param</td><td>自动注入 @Param 方法参数 定义模板变量，模板变量的值可以使用名称的方式使用模板注入解析</td></tr><tr><td>@Headers</td><td>类上或者方法上 定义头部模板变量，使用@Param 注解提供参数值的注入。如果该注解添加在接口类上，则所有的请求都会携带对应的Header信息；如果在方法上，则只会添加到对应的方法请求上</td></tr><tr><td>@QueryMap</td><td>方法上 定义一个键值对或者 pojo，参数值将会被转换成URL上的 query 字符串上</td></tr><tr><td>@HeaderMap</td><td>方法上 定义一个HeaderMap, 与 UrlTemplate 和HeaderTemplate 类型，可以使用@Param 注解提供参数值</td></tr><tr><td>@FeignClient</td><td>注解指定调用的微服务名称，封装了调用 USER-API 的过程，作为消费方调用模板。</td></tr><tr><td>@EnableFeignClients</td><td>扫描声明它们是假装客户端的接口（@FeignClient ）。配置组件扫描指令以供使用(@Configuration )类。</td></tr><tr><td>@SpringQueryMap</td><td>Spring MVC相当于OpenFeign的{@QueryMap} 。</td></tr></tbody></table><h2 id="feignclient详解"><a class="markdownIt-Anchor" href="#feignclient详解"></a> @FeignClient详解</h2><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>name、value和serviceId</td><td>从源码可以得知，name是value的别名，value也是name的别名。两者的作用是一致的，name指定FeignClient的名称，如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现。其中，serviceId和value的作用一样，用于指定服务ID，已经废弃。</td></tr><tr><td>qualifier</td><td>该属性用来指定@Qualifier注解的值，该值是该FeignClient的限定词，可以使用改值进行引用。</td></tr><tr><td>url</td><td>url属性一般用于调试程序，允许我们手动指定@FeignClient调用的地址。</td></tr><tr><td>decode404</td><td>当发生http 404错误时，如果该字段位true，会调用decoder进行解码，否则抛出FeignException</td></tr><tr><td>configuration</td><td>Feign配置类，可以自定义Feign的Encoder、Decoder、LogLevel、Contract。</td></tr><tr><td>fallback</td><td>定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback指定的类必须实现@FeignClient标记的接口</td></tr><tr><td>fallbackFactory</td><td>工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码。</td></tr><tr><td>path</td><td>path属性定义当前FeignClient的统一前缀。</td></tr><tr><td>primary</td><td>是否将伪代理标记为主Bean，默认为true。</td></tr></tbody></table><h2 id="enablefeignclients"><a class="markdownIt-Anchor" href="#enablefeignclients"></a> @EnableFeignClients</h2><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>value</td><td>为basePackages属性的别名，允许使用更简洁的书写方式。</td></tr><tr><td>basePackage</td><td>设置自动扫描带有@FeignClient注解的基础包路径。</td></tr><tr><td>basePackageClasses</td><td>该属性是basePackages属性的安全替代属性。该属性将扫描指定的每个类所在的包下面的所有被@FeignClient修饰的类；这需要考虑在每个包中创建一个特殊的标记类或接口，该类或接口除了被该属性引用外，没有其他用途。</td></tr><tr><td>defaultConfiguration</td><td>该属性用来自定义所有Feign客户端的配置，使用@Configuration进行配置。</td></tr><tr><td>clients</td><td>设置由@FeignClient注解修饰的类列表。如果clients不是空数组，则不通过类路径自动扫描功能来加载FeignClient。</td></tr></tbody></table><h1 id="二-使用"><a class="markdownIt-Anchor" href="#二-使用"></a> 二 、使用</h1><h2 id="1-基本使用"><a class="markdownIt-Anchor" href="#1-基本使用"></a> 1 基本使用</h2><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动类添加注解<code>@EnableFeignClients</code></li><li>接口添加注解<code>@FeignClient</code></li><li>编写对应的Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-order-consumer&quot;, path = &quot;/feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestFeign</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providerFeign</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-文件操作"><a class="markdownIt-Anchor" href="#2-文件操作"></a> 2 文件操作</h2><blockquote><p>默认情况下，在SpringCloud Alibaba 微服务项目中，无法通过消费者服务直接将前端上传的文件，以请求的方式发送到服务提供者来操作文件上传的。</p><p>因此需要在 OpenFeign 中将 文件名称 和 文件内容的Base64 封装为类，消费者添加 consumes 文件上传参数。</p></blockquote><h3 id="2-文件上传"><a class="markdownIt-Anchor" href="#2-文件上传"></a> 2. 文件上传</h3><h4 id="21-配置类"><a class="markdownIt-Anchor" href="#21-配置类"></a> 2.1 配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">CoreFeignConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Request.<span class="function">Options <span class="title">options</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request.Options(<span class="number">6</span> * <span class="number">1000</span>, <span class="number">6</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">multipartFormEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> feign.Logger.<span class="function">Level <span class="title">multipartLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feign.Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-接口"><a class="markdownIt-Anchor" href="#22-接口"></a> 2.2 接口</h4><blockquote><p>消费者 OssService 接口(<code>@FeignClient</code>注解修饰不需要实现类)，</p><p>添加参数 <code>consumes = MediaType.MULTIPART_FORM_DATA_VALUE</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/1/23 17:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-config-client&quot;, path = &quot;/feign&quot;, configuration = &#123;TestFeign2.CoreFeignConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestFeign2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providerFeign</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;,consumes = MediaType.MULTIPART_FORM_DATA_VALUE,produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="function">String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile)</span></span>;</span><br><span class="line"><span class="comment">// 局部配置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreFeignConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Request.<span class="function">Options <span class="title">options</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Request.Options(<span class="number">6</span> * <span class="number">1000</span>, <span class="number">6</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Encoder <span class="title">multipartFormEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> feign.Logger.<span class="function">Level <span class="title">multipartLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> feign.Logger.Level.FULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23-文件转化为multipartfile"><a class="markdownIt-Anchor" href="#23-文件转化为multipartfile"></a> 2.3 文件转化为MultipartFile</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1  </span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;src/test/resources/input.txt&quot;</span>);</span><br><span class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    MultipartFile multipartFile = <span class="keyword">new</span> MockMultipartFile(<span class="string">&quot;file&quot;</span>,</span><br><span class="line">            file.getName(), <span class="string">&quot;text/plain&quot;</span>, IOUtils.toByteArray(input));</span><br><span class="line"><span class="comment">// 方法 2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MultipartFile <span class="title">file2MultipartFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileItem fileItem = <span class="keyword">new</span> DiskFileItemFactory().createItem(<span class="string">&quot;file&quot;</span>,</span><br><span class="line">                Files.probeContentType(file.toPath()), <span class="keyword">false</span>, file.getName());</span><br><span class="line">        <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(file); OutputStream out = fileItem.getOutputStream()) &#123;</span><br><span class="line">            StreamUtils.copy(in,out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid file: &quot;</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartFile(fileItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="24-实例2-多文件上传"><a class="markdownIt-Anchor" href="#24-实例2-多文件上传"></a> 2.4 实例2 多文件上传</h4><p><strong>方法一</strong> (<code>测试无效,实际上只会穿一个文件</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/upload&quot;,consumes = MediaType.MULTIPART_FORM_DATA_VALUE,produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line"><span class="function">String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile[] multipartFile)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h5><p><code>删除Encoder配置</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Encoder <span class="title">multipartFormEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ProviderController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(path = &quot;/add&quot;, consumes = MULTIPART_FORM_DATA_VALUE, produces = APPLICATION_JSON_VALUE)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> MyResponseObject <span class="title">add</span><span class="params">(<span class="meta">@RequestParam(name = &quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="meta">@RequestPart(name = &quot;filetoupload&quot;)</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line">              Do something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OpenFeign接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(path = &quot;/myApi/add&quot;, consumes = MULTIPART_FORM_DATA_VALUE, </span></span><br><span class="line"><span class="meta">              produces = APPLICATION_JSON_VALUE)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> MyResponseObject <span class="title">addFile</span><span class="params">(<span class="meta">@RequestParam(name = &quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="meta">@RequestPart(name = &quot;filetoupload&quot;)</span> MultiValueMap&lt;String, Object&gt; file)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>转化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MyResponseObject <span class="title">addFileInAnotherEndPoint</span><span class="params">(String username, MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    MultiValueMap&lt;String, Object&gt; multiValueMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    ByteArrayResource contentsAsResource = <span class="keyword">new</span> ByteArrayResource(file.getBytes()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;filetoupload&quot;</span>, contentsAsResource);</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;fileType&quot;</span>, file.getContentType());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myFeignClient.addFile(username, multiValueMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-文件下载"><a class="markdownIt-Anchor" href="#3-文件下载"></a> 3 文件下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;some-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(method = RequestMethod.GET, value =&quot;/download&quot;)</span></span><br><span class="line">   <span class="function">Response <span class="title">downloadFile</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usage of Feign Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Response response = client.downloadFile();</span><br><span class="line"><span class="keyword">final</span> Response.Body body = response.body();</span><br><span class="line"><span class="keyword">final</span> InputStream inputStream = body.asInputStream();</span><br></pre></td></tr></table></figure><h2 id="3-超时时间"><a class="markdownIt-Anchor" href="#3-超时时间"></a> 3 超时时间</h2><blockquote><p>配置OpenFeign的超时控制时间，OpenFeign 内与 ribbon 整合了，支持负载均衡，它的超时控制也由最底层的 ribbon 进行控制，yml 添加配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"> <span class="attr">client:</span></span><br><span class="line">   <span class="attr">config:</span></span><br><span class="line">     <span class="attr">default:</span></span><br><span class="line">       <span class="attr">connectTimeout:</span> <span class="number">10000</span> <span class="comment">#设置连接的超时时间 10s</span></span><br><span class="line">       <span class="attr">readTimeout:</span> <span class="number">20000</span>  <span class="comment">#设置读取的超时时间 20s</span></span><br></pre></td></tr></table></figure><h3 id="局部超时"><a class="markdownIt-Anchor" href="#局部超时"></a> 局部超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/1/23 17:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-config-client&quot;, path = &quot;/feign&quot;, configuration = &#123;TestFeign2.CoreFeignConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestFeign2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providerFeign</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreFeignConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Request.<span class="function">Options <span class="title">options</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Request.Options(<span class="number">6</span> * <span class="number">1000</span>, <span class="number">6</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-日志处理"><a class="markdownIt-Anchor" href="#4-日志处理"></a> 4 日志处理</h2><p>Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。说白了就是对Feign接口的调用i情况进行监控和输出</p><p><strong>日志级别</strong></p><ul><li><p><code>None</code>：默认的，不显示任何日志</p></li><li><p><code>BASIC</code>：仅记录请求方法，URL，响应状态码几执行时间</p></li><li><p><code>HEADERS</code>：除了BASIC中定义的信息之外，还有请求和响应的头信息</p></li><li><p><code>FULL</code>：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud - OpenFeign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Diff与Git Difftool</title>
      <link href="/2021/01/20/Git-Diff%E4%B8%8EGit-Difftool/"/>
      <url>/2021/01/20/Git-Diff%E4%B8%8EGit-Difftool/</url>
      
        <content type="html"><![CDATA[<h1 id="配置difftool"><a class="markdownIt-Anchor" href="#配置difftool"></a> 配置Difftool</h1><h2 id="1-配置"><a class="markdownIt-Anchor" href="#1-配置"></a> 1 配置</h2><h3 id="1-meld"><a class="markdownIt-Anchor" href="#1-meld"></a> 1 meld</h3><p><a href="http://meldmerge.org/">官网</a></p><p><strong>命令配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool meld</span><br><span class="line">git config --global difftool.prompt <span class="literal">false</span></span><br><span class="line">git config --global difftool.meld.cmd <span class="string">&#x27;&quot;C:\Program Files (x86)\Meld\Meld.exe&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot;&#x27;</span></span><br><span class="line">git config --global merge.tool meld</span><br><span class="line">git config --global mergetool.meld.cmd <span class="string">&#x27;&quot;C:\Program Files (x86)\Meld\Meld.exe&quot; &quot;$BASE&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot; &quot;$MERGED&quot;&#x27;</span></span><br><span class="line">git config --global mergetool.bc3.trustExitCode <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[difftool <span class="string">&quot;meld&quot;</span>]</span><br><span class="line">cmd = \&quot;C:\\Program Files (x86)\\Meld\\Meld.exe\&quot; \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot;</span><br><span class="line">[mergetool <span class="string">&quot;meld&quot;</span>]</span><br><span class="line">cmd = \&quot;C:\\Program Files (x86)\\Meld\\Meld.exe\&quot; \&quot;<span class="variable">$BASE</span>\&quot; \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot; \&quot;<span class="variable">$MERGED</span>\&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/20/Git-Diff%E4%B8%8EGit-Difftool/image-20210122110200827.png" alt="效果"></p><h3 id="2-bc3"><a class="markdownIt-Anchor" href="#2-bc3"></a> 2 bc3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 设置difftool</span></span><br><span class="line">git config --global diff.tool bc3 </span><br><span class="line">git config --global difftool.prompt <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置mergetool</span></span><br><span class="line"><span class="comment"># cmd见下面设置</span></span><br><span class="line">git config --global merge.tool bc3 </span><br><span class="line">git config --global mergetool.bc3.trustExitCode <span class="literal">true</span></span><br><span class="line"><span class="comment"># 在.gitconfig中添加</span></span><br><span class="line">[merge]</span><br><span class="line">tool = bc3</span><br><span class="line">[mergetool <span class="string">&quot;bc3&quot;</span>]</span><br><span class="line">    cmd = \&quot;D:/workTools/Beyond Compare 4/bcomp.exe\&quot; \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot; \&quot;<span class="variable">$BASE</span>\&quot; \&quot;<span class="variable">$MERGED</span>\</span><br><span class="line"><span class="comment"># 在.gitconfig添加</span></span><br><span class="line">[diff]</span><br><span class="line">tool = bc3</span><br><span class="line">[difftool <span class="string">&quot;bc3&quot;</span>]</span><br><span class="line">    cmd = \&quot;D:/workTools/Beyond Compare 4/bcomp.exe\&quot; \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/20/Git-Diff%E4%B8%8EGit-Difftool/image-20210122111632128.png" alt="界面"></p><h3 id="3-p4merge"><a class="markdownIt-Anchor" href="#3-p4merge"></a> 3 p4merge</h3><p><a href="https://www.perforce.com/downloads/visual-merge-tool">官网</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global diff.tool p4merge</span><br><span class="line">git config --global difftool.p4merge.path <span class="string">&quot;C:\Program Files\Perforce\p4merge.exe&quot;</span></span><br><span class="line"><span class="comment"># 因为每次使用diff tool的时候, git会弹出确认框, 我们最好把这个确认框从全局范围内默认不启用:</span></span><br><span class="line">git config --global difftool.prompt <span class="literal">false</span></span><br><span class="line">git config --global merge.tool p4merge</span><br><span class="line">git config --global mergetool.p4merge.path <span class="string">&quot;C:\Program Files\Perforce\p4merge.exe&quot;</span></span><br><span class="line">git config --global mergetool.prompt <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2 使用</h2><blockquote><p>与 diff 参数相同</p></blockquote><h3 id="工作区与暂存区"><a class="markdownIt-Anchor" href="#工作区与暂存区"></a> 工作区与暂存区</h3><blockquote><p>当提示Launch ‘bc’[Y/n] 的时候</p><p>临时解决方法：git difftool -y</p><p>永久解决方法：<code>git config --global difftool.prompt false</code></p></blockquote><ul><li><code>git difftool --name-only</code></li></ul><blockquote><p>比较工作区与暂存区的文件，并列出变更列表</p></blockquote><ul><li><code>git difftool --no-symlinks</code></li></ul><blockquote><p>依次在图像界面显示变更的文件</p></blockquote><ul><li><code>git difftool -d</code></li></ul><blockquote><p>依次在图像界面显示变更的文件夹</p></blockquote><h3 id="暂存区与版本库"><a class="markdownIt-Anchor" href="#暂存区与版本库"></a> 暂存区与版本库</h3><ul><li><code>git difftool HEAD</code></li></ul><blockquote><p>比较暂存区与HEAD</p></blockquote><h3 id="版本库与版本库"><a class="markdownIt-Anchor" href="#版本库与版本库"></a> 版本库与版本库</h3><ul><li><code>git diff commit commit</code></li></ul><h1 id="git-diff-命令详解"><a class="markdownIt-Anchor" href="#git-diff-命令详解"></a> git diff 命令详解</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作目录 vs 暂存区</span></span><br><span class="line">git diff &lt;filename&gt;</span><br><span class="line">git diff &lt;branch&gt; &lt;filename&gt;</span><br><span class="line"><span class="comment"># 暂存区 vs Git仓库</span></span><br><span class="line">git diff --cached &lt;filename&gt;</span><br><span class="line">git diff --cached &lt;commit&gt; &lt;filename&gt;</span><br><span class="line"><span class="comment"># 工作目录 vs Git仓库</span></span><br><span class="line">git diff &lt;commit&gt; &lt;filename&gt;</span><br><span class="line"><span class="comment"># Git仓库 vs Git仓库</span></span><br><span class="line">git diff &lt;commit&gt; &lt;commit&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Devtools</title>
      <link href="/2021/01/16/Devtools/"/>
      <url>/2021/01/16/Devtools/</url>
      
        <content type="html"><![CDATA[<h1 id="1-添加依赖"><a class="markdownIt-Anchor" href="#1-添加依赖"></a> 1 添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-root工程添加"><a class="markdownIt-Anchor" href="#2-root工程添加"></a> 2 root工程添加</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-开启自动构建"><a class="markdownIt-Anchor" href="#3-开启自动构建"></a> 3 开启自动构建</h1><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Devtools/image-20210116231753206.png" alt="开启自动构建"></p><h1 id="4-update-the-value-of"><a class="markdownIt-Anchor" href="#4-update-the-value-of"></a> 4 Update the value of</h1><p>快捷键<code>ctrl+shift+alt+/</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Devtools/image-20210116232054413.png" alt="开启"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Devtools/image-20210116232159614.png" alt="开启"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea插件之自动部署</title>
      <link href="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载"><a class="markdownIt-Anchor" href="#1-下载"></a> 1 下载</h1><blockquote><p>下载alibaba cloud toolkit工具</p></blockquote><h1 id="2-配置"><a class="markdownIt-Anchor" href="#2-配置"></a> 2 配置</h1><h2 id="1-添加host"><a class="markdownIt-Anchor" href="#1-添加host"></a> 1 添加Host</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116210439432.png" alt="添加Host"></p><h2 id="2-配置账号密码"><a class="markdownIt-Anchor" href="#2-配置账号密码"></a> 2 配置账号密码</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116210601635.png" alt="配置账号密码"></p><h2 id="3-补充tag与描述"><a class="markdownIt-Anchor" href="#3-补充tag与描述"></a> 3 补充tag与描述</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116210706379.png" alt="补充tag与描述"></p><h2 id="4-添加命令"><a class="markdownIt-Anchor" href="#4-添加命令"></a> 4 添加命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据进程名找到进程Id停掉历史进程</span></span><br><span class="line">ps -aux | grep -v grep | grep <span class="variable">$&#123;serverName&#125;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line"><span class="comment"># 启动新上传的java jar 应用服务</span></span><br><span class="line">nohup java -jar /root/<span class="variable">$&#123;serverName&#125;</span>.jar &amp;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116213132180.png" alt="添加命令"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116213104902.png" alt="添加命令"></p><h2 id="5-应用部署配置"><a class="markdownIt-Anchor" href="#5-应用部署配置"></a> 5 应用部署配置</h2><p>需要部署的项目右键-&gt;Alibaba Cloud -&gt; Deploy To Host</p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116213510808.png" alt="应用部署配置"></p><ul><li>本次部署配置的名称：Name，配置固化下来之后可以复用</li><li>在项目上传到服务器之前<a href="http://www.zimug.com/tag/maven">maven</a>打包：Maven Build。也可以选择使用Gradle打包：Gradle Build或者手动打包之后上传文件：Upload File。</li><li>选择远程部署的服务器的Ip，本文中第二步的配置结果</li><li>Target Directory：<a href="http://www.zimug.com/tag/maven">maven</a>打包之后的文件上传目录（即应用部署目录）：根据自己的主机路径规划填写。</li><li>After Deploy：当文件上传主机之后执行的shell脚本或命令行，我们这里选择执行<code>nohup java -jar /root/server-jwt-1.0.jar &amp;;</code>启动应用。</li><li>Run Maven Goal :<a href="http://www.zimug.com/tag/maven">maven</a> 的打包目标，先对父项目打包，再对子模块打包。如果不存在，就点击“+”新建，打包命令是“clean install”</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116213606080.png" alt="image-20210116213606080"></p><p>除了应用打包、上传、启动之外，我们通常需要一些额外的动作。</p><ul><li>比如：之前已将发过一版，再次部署发版应该先把旧版本进程停掉。选择<code>ps -aux|grep -v grep |grep server-jwt| awk '&#123;print $2&#125;'|xargs kill -9;</code>命令行，第三步配置好的。</li><li>比如：应用部署完成之后，应该立刻查看应用启动的日志，观察是否正常。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/16/Idea%E6%8F%92%E4%BB%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20210116213638558.png" alt="添加日志"></p><h1 id="3-参阅"><a class="markdownIt-Anchor" href="#3-参阅"></a> 3 参阅</h1><p><a href="http://www.zimug.com/java/%e9%a1%b9%e7%9b%ae%e9%83%a8%e7%bd%b2%e7%82%b9%e4%b8%80%e4%b8%8b%e6%8c%89%e9%92%ae%e5%b0%b1%e5%8f%af%e4%bb%a5%ef%bc%8c%e5%85%a8%e6%b5%81%e7%a8%8b%e8%87%aa%e5%8a%a8%e5%8c%96-%e4%b8%89%e5%88%86%e9%92%9f/.html">项目部署</a></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud项目搭建</title>
      <link href="/2021/01/15/SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/01/15/SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一-新建工程"><a class="markdownIt-Anchor" href="#一-新建工程"></a> 一、新建工程</h1><ol><li>创建Maven工程</li><li>选择Maven版本</li><li>设置字符编码</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20210115222822095.png" alt="设置字符编码"></p><ol start="4"><li>注解激活生效</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20210115222928116.png" alt="注解激活生效"></p><ol start="5"><li>选择java版本</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20210115222951511.png" alt="选择java版本"></p><h1 id="二-父工程pom文件配置"><a class="markdownIt-Anchor" href="#二-父工程pom文件配置"></a> 二、父工程POM文件配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.stu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三-dependencymanagement"><a class="markdownIt-Anchor" href="#三-dependencymanagement"></a> 三、dependencyManagement</h1><h2 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1 介绍</h2><blockquote><p>Maven使用dependencyManagement元素来提供了一种管理依赖版本号的方式，通常会在一个组织或者项目的最顶层的父POM中看到dependencyManagement元素。</p></blockquote><h2 id="2-作用"><a class="markdownIt-Anchor" href="#2-作用"></a> 2 作用</h2><blockquote><p>使用pom.xml中dependencyManagement元素能让所有在子项目中引用一个依赖而不用显式的列出版本号。Maven会沿着父子层向上走，直到找到一个拥有dependencyManagement元素的项目，然后他就会使用这个dependencyManagement中定义的版本号</p></blockquote><h2 id="3-好处"><a class="markdownIt-Anchor" href="#3-好处"></a> 3 好处</h2><blockquote><p>好处是如果多个子项目都引用同一个依赖，则可避免在每个使用的子项目中都声明版本号，这样当想升级或者切换到另一个版本的时候，只需要在顶层父容器里更新，而不需要一个一个的修改子项目，另外其他子项目如果需要另外一个版本，只需要生命Version即可</p></blockquote><h2 id="4-注意"><a class="markdownIt-Anchor" href="#4-注意"></a> 4 注意</h2><ul><li>dependencyManagement里面只是声明依赖，<code>并不实现引入</code>，因此子项目需要显示的声明需要用到的依赖</li><li>如果不在子项目中声明依赖，是不会从父项目中继承下来的，只有在子项目中写了该依赖，才会从父项目中继承该项，并且version和scope都读取父pom</li><li>如果子项目中指定了版本号，那么就会使用子项目中指定的jar版本</li></ul><h1 id="四-注意"><a class="markdownIt-Anchor" href="#四-注意"></a> 四、注意</h1><blockquote><p>父工程创建完成执行mvn:install将父工程发布到仓库方便子工程继承</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud - 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos入门</title>
      <link href="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/"/>
      <url>/2021/01/15/Nacos%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>​</p><h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一 、简介</h1><h2 id="1-为什么叫nacos"><a class="markdownIt-Anchor" href="#1-为什么叫nacos"></a> 1 为什么叫Nacos</h2><blockquote><p>前四个字母分贝为Naming和Configuration的前两个字母，最后的s为Service</p></blockquote><h2 id="2-nacos是什么"><a class="markdownIt-Anchor" href="#2-nacos是什么"></a> 2 Nacos是什么</h2><ol><li>易于构建云原生应用的动态服务发现，配置管理和服务管理中心</li><li>Nacos：Dynamic Naming and Configuration Service</li><li>Nacos就是注册中心与配置中心的组合</li></ol><h2 id="3-ncaos作用"><a class="markdownIt-Anchor" href="#3-ncaos作用"></a> 3 Ncaos作用</h2><ol><li>替代Eureka做服务注册中心</li><li>替代Config做服务配置中心</li><li><strong>Nacos</strong> = <code>Eureka</code>+<code>Config</code>+<code>Bus</code></li></ol><h2 id="4-nacos官网"><a class="markdownIt-Anchor" href="#4-nacos官网"></a> 4 Nacos官网</h2><ul><li><p><a href="https://github.com/alibaba/Nacos">官网</a></p></li><li><p><a href="https://nacos.io/zh-cn/index.html">官方文档</a></p></li><li><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery">官方文档GitHub</a></p></li></ul><h2 id="5-nacos比较"><a class="markdownIt-Anchor" href="#5-nacos比较"></a> 5 Nacos比较</h2><table><thead><tr><th>服务注册与发现框架</th><th>CAP模型</th><th>控制台管理</th><th>社区活跃度</th></tr></thead><tbody><tr><td>Eureka</td><td>AP</td><td>支持</td><td>低(2.x版本闭源)</td></tr><tr><td>Zookeeper</td><td>CP</td><td>不支持</td><td>中</td></tr><tr><td>Consul</td><td>CP</td><td>支持</td><td>高</td></tr><tr><td>Nacos</td><td>AP</td><td>支持</td><td>高</td></tr></tbody></table><h2 id="6-nacos的三种部署模式"><a class="markdownIt-Anchor" href="#6-nacos的三种部署模式"></a> 6 Nacos的三种部署模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 启动</span></span><br><span class="line">docker run --name nacos -e MODE=standalone -p 8848:8848 -d nacos/nacos-server:latest</span><br></pre></td></tr></table></figure><h3 id="1-单机模式"><a class="markdownIt-Anchor" href="#1-单机模式"></a> 1 单机模式</h3><blockquote><p>单机模式：可用于测试和单机使用，生产环境切忌使用单机模式（满足不了高可用）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">./startup.sh -m standalone</span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><h3 id="2-集群模式"><a class="markdownIt-Anchor" href="#2-集群模式"></a> 2 集群模式</h3><blockquote><p>集群模式：可用于生产环境，确保高可用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">./startup.sh -m cluster</span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">startup.cmd -m cluster</span><br></pre></td></tr></table></figure><h3 id="3-多集群模式"><a class="markdownIt-Anchor" href="#3-多集群模式"></a> 3 多集群模式</h3><blockquote><p>多集群模式：可用于多数据中心场景</p></blockquote><h1 id="二-注册中心入门"><a class="markdownIt-Anchor" href="#二-注册中心入门"></a> 二、注册中心入门</h1><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117164440317.png" alt="自带负载均衡"></p><h2 id="1-父工程pom添加"><a class="markdownIt-Anchor" href="#1-父工程pom添加"></a> <strong>1 父工程pom添加</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-本工程pom"><a class="markdownIt-Anchor" href="#2-本工程pom"></a> <strong>2 本工程pom</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.stu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-applicationyml文件"><a class="markdownIt-Anchor" href="#3-applicationyml文件"></a> <strong>3 application.yml文件</strong></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-启动类"><a class="markdownIt-Anchor" href="#4-启动类"></a> <strong>4 启动类</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-服务注册中心对比"><a class="markdownIt-Anchor" href="#三-服务注册中心对比"></a> 三、服务注册中心对比</h1><h2 id="1-nacos-全景图所示"><a class="markdownIt-Anchor" href="#1-nacos-全景图所示"></a> 1 Nacos 全景图所示</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117170026388.png" alt="全景图"></p><h2 id="2-nacos和cap"><a class="markdownIt-Anchor" href="#2-nacos和cap"></a> 2 Nacos和CAP</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117170106013.png" alt="Nacos和CAP"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117170124102.png" alt="Nacos服务发现实例模型"></p><h2 id="3-切换"><a class="markdownIt-Anchor" href="#3-切换"></a> 3 切换</h2><blockquote><p>C是所有节点在同一时间看到的数据是一致的，而A的定义是所有的请求都会收到响应</p></blockquote><p><strong>何时选择何种模式</strong></p><blockquote><p>一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并且能够保持信条上报，那么就可以选择AP模式，当前主流的服务如Spring Cloud和Dobbo服务用于AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例</p><p>如果需要在服务级别编辑存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式</p><p>CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式注册实例之前必须要先注册服务，如果服务不存在，则返回错误</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">&#x27;$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="四-服务配置中心入门"><a class="markdownIt-Anchor" href="#四-服务配置中心入门"></a> 四、服务配置中心入门</h1><h2 id="1-pom文件"><a class="markdownIt-Anchor" href="#1-pom文件"></a> 1 POM文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般基础配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-yaml"><a class="markdownIt-Anchor" href="#2-yaml"></a> 2 YAML</h2><p><strong>为什么配置两个</strong>?</p><blockquote><p>Nacos同SpringCloud-Config一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动</p></blockquote><blockquote><p>SpringBoot中配置文件的家在是存在优先级顺序的，bootstrap优先级高于application</p></blockquote><h3 id="1-applicationyml"><a class="markdownIt-Anchor" href="#1-applicationyml"></a> 1 application.yml</h3><blockquote><p>个性化配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h3 id="2-bootstrapyml"><a class="markdownIt-Anchor" href="#2-bootstrapyml"></a> 2 bootstrap.yml</h3><blockquote><p>全局配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        </span><br><span class="line"><span class="string">DataId为的基本配置$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.</span> <span class="string">$&#123;spring.cloud.nacos.config.file-extension&#125;。</span></span><br></pre></td></tr></table></figure><h2 id="3-启动类"><a class="markdownIt-Anchor" href="#3-启动类"></a> 3 启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-业务"><a class="markdownIt-Anchor" href="#4-业务"></a> 4 业务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringCloud 实现配置自动刷新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="5-nacos添加配置中心"><a class="markdownIt-Anchor" href="#5-nacos添加配置中心"></a> 5 Nacos添加配置中心</h2><p><a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">官方文档</a></p><h3 id="1-公式"><a class="markdownIt-Anchor" href="#1-公式"></a> 1 公式</h3><ul><li>prefix默认为spring.application.name的值</li><li>spring.profile.active既为当前环境对应的profile,可以通过配置项spring.profile.active</li><li>file-exetension为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;spring.application.name&#125;</span>-<span class="variable">$&#123;spring.profile.active&#125;</span>.<span class="variable">$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br></pre></td></tr></table></figure><h1 id="五-nacos作为配置中心-分类配置"><a class="markdownIt-Anchor" href="#五-nacos作为配置中心-分类配置"></a> 五、Nacos作为配置中心-分类配置</h1><h2 id="1-问题"><a class="markdownIt-Anchor" href="#1-问题"></a> 1 问题</h2><p>实际开发中，通常一个系统会准备</p><ul><li>dev开发环境</li><li>test测试环境</li><li>prod生产环境</li></ul><p><strong>问题一</strong>：</p><p>如何保证指定环境启动时服务能正常读取到Nacos上相应的环境配置文件呢?</p><p><strong>问题二</strong></p><p>一个大型分布式无服务系统会有很多服务的子项目，每个微服务项目又都会有对应的开发环境，测试环境，预发环境，正式环境，那么怎么对这些微服务进行管理呢？</p><h2 id="2-图形界面"><a class="markdownIt-Anchor" href="#2-图形界面"></a> 2 图形界面</h2><blockquote><p>Nacos图形界面中有配置管理与命名了空间</p></blockquote><h2 id="3-namespacegroupdata-id三者关系为什么这么设计"><a class="markdownIt-Anchor" href="#3-namespacegroupdata-id三者关系为什么这么设计"></a> 3 Namespace+Group+Data ID三者关系？为什么这么设计？</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117181600858.png" alt="image-20210117181600858"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117181714570.png" alt="image-20210117181714570"></p><h2 id="4-nacos之dataid配置"><a class="markdownIt-Anchor" href="#4-nacos之dataid配置"></a> 4 Nacos之DataID配置</h2><ul><li>指定spring.profile.active和配置文件的DataID来使不同环境下读取不同的配置</li><li>默认空间+默认分组+新建dev和test两个DataID</li><li>通过spring.profile.active属性就能进行多环境下配置文件的读取</li></ul><h2 id="5-nacos之group配置"><a class="markdownIt-Anchor" href="#5-nacos之group配置"></a> 5 Nacos之Group配置</h2><ul><li>在nacos图形界面控制台上面新建配置文件DataID</li><li>bootstrap添加Group为对应的Group名称</li></ul><h2 id="6-nacos之namespace"><a class="markdownIt-Anchor" href="#6-nacos之namespace"></a> 6 Nacos之Namespace</h2><ul><li>新建Namespace</li><li>在bootstrap中添加对应ID</li></ul><h1 id="六-nacos集群与持久化配置"><a class="markdownIt-Anchor" href="#六-nacos集群与持久化配置"></a> 六、Nacos集群与持久化配置</h1><h2 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1 概念</h2><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">官网</a></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117184851414.png" alt="架构"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117185056772.png" alt="图片来自尚硅谷"></p><h3 id="重点说明"><a class="markdownIt-Anchor" href="#重点说明"></a> 重点说明</h3><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117185447278.png" alt="重点说明"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117185550557.png" alt="重点说明"></p><h2 id="2-nacos持久化配置"><a class="markdownIt-Anchor" href="#2-nacos持久化配置"></a> 2 Nacos持久化配置</h2><p>默认嵌入式数据库derby</p><p><a href="https://github.com/alibaba/nacos/blob/develop/config/pom.xml">官网</a></p><h3 id="derby切换到mysql"><a class="markdownIt-Anchor" href="#derby切换到mysql"></a> derby切换到mysql</h3><ol><li>nacos-server-1.1.4\nacos\conf目录下找到sql脚本<ul><li><code>nacos-mysql.sql mysql脚本</code></li><li><code>schema.sql derby脚本</code></li></ul></li><li>运行nacos-mysql.sql脚本</li><li>修改application.properties配置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h2 id="3-nacos-集群安装"><a class="markdownIt-Anchor" href="#3-nacos-集群安装"></a> 3 Nacos 集群安装</h2><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117213444032.png" alt="架构图来自尚硅谷"></p><h3 id="1-环境搭建"><a class="markdownIt-Anchor" href="#1-环境搭建"></a> 1 环境搭建</h3><p><a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">下载地址</a></p><ul><li>Nginx -  1 个</li><li>Nacos - 3 个</li><li>Mysql  - 1 个</li></ul><h3 id="2-配置"><a class="markdownIt-Anchor" href="#2-配置"></a> 2 配置</h3><h4 id="1-普通版"><a class="markdownIt-Anchor" href="#1-普通版"></a> 1  普通版</h4><ol><li>梳理出三台nacos机器的不同服务端口号</li><li>编辑cluster.conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.1:1111</span><br><span class="line">192.168.0.2:2222</span><br><span class="line">192.168.0.3:3333</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="http://xn--stratup-dw5st00j.sh">编辑stratup.sh</a></li></ol><blockquote><p>添加 -p 参数用于指定Nacos启动的端口号</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117212216016.png" alt="图片来自尚硅谷"></p><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/15/Nacos%E5%85%A5%E9%97%A8/image-20210117212241094.png" alt="图片来自尚硅谷"></p><ol start="4"><li>执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./stratup.sh -p 1111</span><br><span class="line">./stratup.sh -p 2222</span><br><span class="line">./stratup.sh -p 3333</span><br></pre></td></tr></table></figure><ol start="5"><li>Nginx配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream cluster&#123;                                                 </span><br><span class="line">    server 192.168.0.1:1111;</span><br><span class="line">    server 192.168.0.2:2222;</span><br><span class="line">    server 192.168.0.3:3333;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">                          </span><br><span class="line">    listen 8888;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location /&#123;</span><br><span class="line">         proxy_pass http://cluster;                                                     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx/conf</span><br></pre></td></tr></table></figure><h4 id="2-docker-版"><a class="markdownIt-Anchor" href="#2-docker-版"></a> 2 Docker 版</h4><ol><li><p>数据库以及配置文件修改<code>略</code></p></li><li><p>创建并运行Nacos容器</p></li></ol><p><strong>获取镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><p><strong>启动Nacos1111</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=<span class="string">&quot;192.168.0.1:1111 192.168.0.1:2222 192.168.0.1:3333&quot;</span> \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.0.100 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=123456 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos-config \</span><br><span class="line">-e NACOS_SERVER_IP=192.168.0.1 \</span><br><span class="line">-p 1111:8846 \</span><br><span class="line">--name nacos1111 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p><strong>启动Nacos2222</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=<span class="string">&quot;192.168.0.1:1111 192.168.0.1:2222 192.168.0.1:3333&quot;</span> \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.0.100 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=123456 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos-config \</span><br><span class="line">-e NACOS_SERVER_IP=192.168.0.1 \</span><br><span class="line">-p 2222:8846 \</span><br><span class="line">--name nacos2222 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p><strong>启动Nacos3333</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=<span class="string">&quot;192.168.0.1:1111 192.168.0.1:2222 192.168.0.1:3333&quot;</span> \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.0.100 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=123456 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos-config \</span><br><span class="line">-e NACOS_SERVER_IP=192.168.0.1 \</span><br><span class="line">-p 3333:8846 \</span><br><span class="line">--name nacos3333 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p><strong>配置Nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream cluster&#123;</span><br><span class="line">       server 192.168.248.129:8846;</span><br><span class="line">       server 192.168.248.129:8847;</span><br><span class="line">       server 192.168.248.129:8848;</span><br><span class="line">   &#125;</span><br><span class="line">   server &#123;</span><br><span class="line">       listen 8080;</span><br><span class="line">       server_name _;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://cluster;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>启动Nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-nginx -v /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro -p 8080:8080 -d nginx</span><br></pre></td></tr></table></figure><h1 id="七-nacos微服务注册地址为内网ip的解决办法"><a class="markdownIt-Anchor" href="#七-nacos微服务注册地址为内网ip的解决办法"></a> 七、Nacos微服务注册地址为内网IP的解决办法</h1><p>Nacos注册中心是: <a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>各个服务通过Nacos客户端将服务信息注册到Nacos上<br>当Nacos服务注册的IP默认选择出问题时，可以通过查阅对应的客户端文档，来选择配置不同的网卡或者IP<br><code>（参考org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties的配置）</code></p><p>例如，使用了Spring cloud alibaba（官方文档）作为Nacos客户端，<br>服务默认获取了内网IP <code>192.168.1.21</code>,<br>可以通过配置<code>spring.cloud.inetutils.preferred-networks=10.34.12</code>，使服务获取内网中前缀为<code>10.34.12</code>的IP</p><p>解决方法：</p><p>1、直接添加忽略某张网卡的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.inetutils.ignored-interfaces[0]</span>=<span class="string">eth0 # 忽略eth0, 支持正则表达式</span></span><br></pre></td></tr></table></figure><p>正则：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.inetutils.ignored-interfaces</span>=<span class="string">eth.*</span></span><br></pre></td></tr></table></figure><p>2、指定默认IP：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.inetutils.preferred-networks</span>=<span class="string">192.168.20.123 #可以是IP段：192.168.20</span></span><br></pre></td></tr></table></figure><p>3、除了这些配置，还有以下的这些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果选择固定Ip注册可以配置</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.ip</span> = <span class="string">10.2.11.11</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.port</span> = <span class="string">9090</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 如果选择固定网卡配置项</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.networkInterface</span> = <span class="string">eth0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 如果想更丰富的选择，可以使用spring cloud 的工具 InetUtils进行配置</span></span><br><span class="line"><span class="comment"># 具体说明可以自行检索: https://github.com/spring-cloud/spring-cloud-commons/blob/master/docs/src/main/asciidoc/spring-cloud-commons.adoc</span></span><br><span class="line"><span class="attr">spring.cloud.inetutils.default-hostname</span></span><br><span class="line"><span class="attr">spring.cloud.inetutils.default-ip-address</span></span><br><span class="line"><span class="meta">spring.cloud.inetutils.ignored-interfaces[0]</span>=<span class="string">eth0 # 忽略网卡，eth0</span></span><br><span class="line"><span class="meta">spring.cloud.inetutils.ignored-interfaces</span>=<span class="string">eth.* # 忽略网卡，eth.*，正则表达式</span></span><br><span class="line"><span class="meta">spring.cloud.inetutils.preferred-networks</span>=<span class="string">10.34.12 # 选择符合前缀的IP作为服务注册IP</span></span><br><span class="line"><span class="attr">spring.cloud.inetutils.timeout-seconds</span></span><br><span class="line"><span class="attr">spring.cloud.inetutils.use-only-site-local-interfaces</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>  <span class="string">#Nacos Server 启动监听的ip地址和端口</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.service</span>  <span class="string">#给当前的服务命名</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.weight</span>  <span class="string">#取值范围 1 到 100，数值越大，权重越大</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.network-interface</span> <span class="string">#当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.ip</span>  <span class="string"># 优先级最高</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.port</span>  <span class="string"># 默认情况下不用配置，会自动探测</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.namespace</span> <span class="string"># 常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.access-key</span>  <span class="string"># 当要上阿里云时，阿里云上面的一个云账号名</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.secret-key</span> <span class="string"># 当要上阿里云时，阿里云上面的一个云账号密码</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.metadata</span>    <span class="string">#使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.log-name</span>   <span class="string"># 日志文件名</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.enpoint</span>   <span class="string"># 地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</span></span><br><span class="line"><span class="meta">ribbon.nacos.enabled</span>  <span class="string"># 是否集成Ribbon 默认为true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ignored-interfaces和preferred-networks这两个配置。这两个配置决定了spring cloud应用在启动的时候所使用的网卡和IP地址。ignored-interfaces接收一个正则表达式数组，配置名字虽然是ignored-interfaces，忽略的网卡，但是因为其接收的是正则表达式，所以我们可以任意的选择和反选本机的网卡。preferred-networks是指倾向于使用的IP地址，接收一个正则表达式数组，用于选择Spring Cloud应用使用的本机的IP地址。通过这两个配置，我们可以任意指定Spring Cloud应用使用的网卡和IP地址。</p><p>更多解释参考官方说明，<a href="https://github.com/spring-cloud/spring-cloud-commons/blob/master/docs/src/main/asciidoc/spring-cloud-commons.adoc">spring-cloud-commons</a>项目为Spring Cloud生态提供了顶层的抽象和基础设施的实现。 网络这个最基本的基础设施也是在这里有对应的实现：InetUtils、InetUtilsProperties和UtilAutoConfiguration提供了网络配置相关的功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud - Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基础</title>
      <link href="/2021/01/14/Maven%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/01/14/Maven%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一-解决依赖冲突"><a class="markdownIt-Anchor" href="#一-解决依赖冲突"></a> 一、解决依赖冲突</h1><h2 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1 概念</h2><ol><li>直接依赖</li></ol><blockquote><p>项目中直接导入jar包，就是该项目的直接依赖包</p></blockquote><ol start="2"><li>传递依赖</li></ol><blockquote><p>项目中没有直接导入jar包，可以通过项目直接依赖jar包传递到项目中去</p></blockquote><h2 id="2-解决依赖的方式"><a class="markdownIt-Anchor" href="#2-解决依赖的方式"></a> 2 解决依赖的方式</h2><ol><li>第一声明原则</li></ol><blockquote><p>哪个jar包的坐标在靠上的位置，这个jar就是先声明的，先声明的jar包坐标下的依赖包，可以优先放入项目中</p></blockquote><ol start="2"><li>路径近者优先原则</li></ol><blockquote><p>直接依赖路径比传递依赖路径近，那么最终项目进入的jar包会是路径近的直接依赖</p></blockquote><ol start="3"><li>直接排除</li></ol><blockquote><p>当我们要排除某个jar包下依赖包，在配置exclusions标签的时候，内部不写版本号。因为此时依赖包使用的版本和默认jar包一样</p></blockquote><ol start="4"><li>dependencyManagement</li></ol><blockquote><p>锁住jar包保本</p></blockquote><h1 id="二-maven工程拆分与聚合"><a class="markdownIt-Anchor" href="#二-maven工程拆分与聚合"></a> 二、Maven工程拆分与聚合</h1><h2 id="1-工程与模块的区别与联系"><a class="markdownIt-Anchor" href="#1-工程与模块的区别与联系"></a> 1 工程与模块的区别与联系</h2><blockquote><p>工程不等于完整的项目，模块也不等于完整的项目，一个完整的项目看的是代码，代码完整就是完整的项目</p><p>工程是独立的，只能使用内部资源，后天可以和其他工程或模块建立管理关系，模块属于父工程的，模块一旦创建，所有父工程资源都可以使用</p><p>子模块天生集成父工程，可以使用父工程所有资源</p><p>平级直接的引用叫做依赖</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2021/01/14/Maven%E5%9F%BA%E7%A1%80/image-20210114204622550.png" alt="传递依赖"></p><h1 id="三-私服"><a class="markdownIt-Anchor" href="#三-私服"></a> 三、私服</h1>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD 介绍和使用</title>
      <link href="/2021/01/10/gitlab-runner-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2021/01/10/gitlab-runner-%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h1><h2 id="1-持续集成介绍"><a class="markdownIt-Anchor" href="#1-持续集成介绍"></a> 1、持续集成介绍</h2><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p></blockquote><h2 id="2-概念"><a class="markdownIt-Anchor" href="#2-概念"></a> 2、 概念</h2><ul><li><strong>持续集成</strong>(<code>Continuous Integration</code>)：**频繁地(一天多次)将代码集成到主干。**让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li><li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：**频繁地将软件的新版本，交付给质量团队或者用户，以供评审。**如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li><li><strong>持续部署</strong>(<code>continuous Deployment</code>)：**代码通过评审以后，自动部署到生产环境。**是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li></ul><h2 id="3-持续集成的好处"><a class="markdownIt-Anchor" href="#3-持续集成的好处"></a> 3、持续集成的好处</h2><ul><li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li><li>**解放了重复性劳动。**自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li><li>**更快地发现和修复问题。**持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li><li>**更快的交付成果。**更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li><li>**减少手工的错误。**在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li><li>**减少了等待时间。**缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li><li>**更高的产品质量。**集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li></ul><h2 id="4-常用持续集成工具"><a class="markdownIt-Anchor" href="#4-常用持续集成工具"></a> 4、常用持续集成工具</h2><ul><li><a href="https://jenkins.io/">Jenkins</a></li><li><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI</a></li><li><a href="https://www.jetbrains.com/teamcity/">TeamCity</a></li><li><a href="https://www.travis-ci.org/">Travis CI</a></li><li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a></li><li><a href="https://circleci.com/">CircleCI</a></li><li>…</li></ul><h2 id="5-gitlab介绍"><a class="markdownIt-Anchor" href="#5-gitlab介绍"></a> 5、Gitlab介绍</h2><h4 id="1-gitlab"><a class="markdownIt-Anchor" href="#1-gitlab"></a> (1) GitLab</h4><p><a href="https://about.gitlab.com/">GitLab</a> 是一个利用<code>Ruby on Rails</code>开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与<a href="https://github.com/">GitHub</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。</p><h4 id="2-gitlab-cicd"><a class="markdownIt-Anchor" href="#2-gitlab-cicd"></a> (2) GitLab CI/CD</h4><p><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI/CD</a> 是<code>GitLab Continuous Integration</code>（Gitlab持续集成）的简称。GitLab 自<code>GitLab 8.0</code>开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了Runner（运行器），那么每一次<code>push</code>或者合并请求（<code>Merge Request</code>）都会触发<a href="https://docs.gitlab.com/ce/ci/pipelines.html">CI Pipeline</a>。</p><h4 id="3-gitlab-runner"><a class="markdownIt-Anchor" href="#3-gitlab-runner"></a> (3) GitLab Runner</h4><p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> <code>GitLab Runner</code>是一个开源项目，可以运行在 GNU / Linux，macOS 和 Windows 操作系统上。每次<code>push</code>的时候 GitLab CI 会根据<code>.gitlab-ci.yml</code>配置文件运行你流水线（<code>Pipeline</code>）中各个阶段的任务（<code>Job</code>），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p><p>Gitlab Runner 分为三种：</p><ul><li>共享Runner(<code>Shared runners</code>)</li><li>专享Runner(<code>Specific runners</code>)</li><li>分组Runner(<code>Group Runners</code>)</li></ul><h4 id="4-pipelines"><a class="markdownIt-Anchor" href="#4-pipelines"></a> (4) Pipelines</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html">Pipelines</a> 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次<code>push</code>或者<code>Merge Request</code>都会触发生成一条新的Pipeline。</p><h4 id="5-stages"><a class="markdownIt-Anchor" href="#5-stages"></a> (5) Stages</h4><p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#stages">Stages</a> 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在<code>.gitlab-ci.yml</code>文件中配置上一阶段失败时下一阶段也执行）</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><h4 id="6-jobs"><a class="markdownIt-Anchor" href="#6-jobs"></a> (6) Jobs</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#jobs">Jobs</a> 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在<code>.gitlab-ci.yml</code>文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li></ul><h4 id="7-gitlab-ciyml"><a class="markdownIt-Anchor" href="#7-gitlab-ciyml"></a> (7) .gitlab-ci.yml</h4><p>GitLab 中默认开启了 Gitlab CI/CD 的支持，且使用<a href="http://yaml.org/">YAML</a>文件<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#examples">.gitlab-ci.yml</a>来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在<code>.gitlab-ci.yml</code>配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p><p>下面是<code>.gitlab-ci.yml</code>文件的一个简单的<code>Hello World</code>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 test 和 package 两个 Stages</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 package 阶段的一个 job</span></span><br><span class="line"><span class="attr">package-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello, package-job&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;I am in package stage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 test 阶段的一个 job</span></span><br><span class="line"><span class="attr">test-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello, test-job&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;I am in test stage&quot;</span></span><br></pre></td></tr></table></figure><p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的<code>script</code>关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p><blockquote><p><strong>注</strong>：猜猜上面例子的运行结果？</p></blockquote><h4 id="8-badges"><a class="markdownIt-Anchor" href="#8-badges"></a> (8) Badges</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#badges">Badges</a> 即：<strong>徽章</strong>，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的<code>README.md</code>文件中，便于从仓库主页看到最新的构建状态。</p><h1 id="二-安装"><a class="markdownIt-Anchor" href="#二-安装"></a> 二、安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull gitlab/gitlab-runner:latest</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /home/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><h1 id="三-使用"><a class="markdownIt-Anchor" href="#三-使用"></a> 三、使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册</span></span><br><span class="line">docker <span class="built_in">exec</span> gitlab-runner gitlab-runner register -n \</span><br><span class="line">       --url https://gitlab.com/ \</span><br><span class="line">       --registration-token wkHbVMuHPut1ikJ1DW-u \</span><br><span class="line">       --tag-list runner \</span><br><span class="line">       --executor docker \</span><br><span class="line">       --docker-image node:alpine \</span><br><span class="line">       --docker-volumes /root/.m2:/root/.m2 \</span><br><span class="line">       --docker-volumes /root/.npm:/root/.npm \</span><br><span class="line">       --docker-volumes /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">       --description <span class="string">&quot;vue-test&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册runner</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab-runner gitlab-ci-multi-runner register</span><br><span class="line"><span class="comment"># 配置runner</span></span><br><span class="line"><span class="comment"># 输入公司的 GitLab 网站地址</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">http://gitlab.xxxx.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你项目仓库的token，token可以在 Settings -&gt; CI/CD -&gt; Runners settings 中找到.</span></span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner</span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入描述这个 runner 的名称</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner</span><br><span class="line">[hostame] my-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 runner 的标签</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">my-tag,another-tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 runner 的执行器.</span></span><br><span class="line">Please enter the default Docker image (e.g. ruby:2.1):</span><br><span class="line">microsoft/dotnet:latest <span class="comment">#注意这里使用dotnet镜像,查看镜像https://hub.docker.com/</span></span><br></pre></td></tr></table></figure><blockquote><p>映射<code>/var/run/docker.sock</code>这个文件是为了让容器可以通过<code>/var/run/docker.sock</code>与<code>Docker守护进程</code>通信，管理其他<code>Docker容器</code><br><code>-v /srv/gitlab-runner/config:/etc/gitlab-runner</code>是将runner的配置文件映射到宿主机<code>/srv/gitlab-runner/config</code>方便调整和查看配置</p></blockquote><p>以上流程注册成功之后，就可以在你的项目仓库中 <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners settings</code> 看到这个 Runner 了。</p><h1 id="四-gitlab-cicd-yaml-常用配置介绍"><a class="markdownIt-Anchor" href="#四-gitlab-cicd-yaml-常用配置介绍"></a> 四、Gitlab CI/CD yaml 常用配置介绍</h1><p>开始构建之前<code>.gitlab-ci.yml</code>文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，<code>.gitlab-ci.yml</code>允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：</p><ul><li><code>image</code></li><li><code>services</code></li><li><code>stages</code></li><li><code>types</code></li><li><code>before_script</code></li><li><code>after_script</code></li><li><code>variables</code></li><li><code>cache</code></li></ul><p>job由一列参数来定义 jobs 的行为：</p><table><thead><tr><th style="text-align:left">Keyword</th><th style="text-align:left">Required</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">script</td><td style="text-align:left">yes</td><td style="text-align:left">Runner执行的命令或脚本</td></tr><tr><td style="text-align:left">extends</td><td style="text-align:left">no</td><td style="text-align:left">定义此作业将继承的配置条目</td></tr><tr><td style="text-align:left">image</td><td style="text-align:left">no</td><td style="text-align:left">所使用的docker镜像，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml">使用docker镜像</a></td></tr><tr><td style="text-align:left">services</td><td style="text-align:left">no</td><td style="text-align:left">所使用的docker服务，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml">使用docker镜像</a></td></tr><tr><td style="text-align:left">stage</td><td style="text-align:left">no</td><td style="text-align:left">定义job stage（默认：<code>test</code>）</td></tr><tr><td style="text-align:left">type</td><td style="text-align:left">no</td><td style="text-align:left"><code>stage</code>的别名（已弃用）</td></tr><tr><td style="text-align:left">variables</td><td style="text-align:left">no</td><td style="text-align:left">定义job级别的变量</td></tr><tr><td style="text-align:left">only</td><td style="text-align:left">no</td><td style="text-align:left">定义一列git分支，并为其创建job</td></tr><tr><td style="text-align:left">except</td><td style="text-align:left">no</td><td style="text-align:left">定义一列git分支，不创建job</td></tr><tr><td style="text-align:left">tags</td><td style="text-align:left">no</td><td style="text-align:left">定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td></tr><tr><td style="text-align:left">allow_failure</td><td style="text-align:left">no</td><td style="text-align:left">允许job失败。失败的job不影响commit状态</td></tr><tr><td style="text-align:left">when</td><td style="text-align:left">no</td><td style="text-align:left">定义何时开始job。可以是<code>on_success</code>，<code>on_failure</code>，<code>always</code>或者<code>manual</code></td></tr><tr><td style="text-align:left">dependencies</td><td style="text-align:left">no</td><td style="text-align:left">定义job依赖关系，这样他们就可以互相传递artifacts</td></tr><tr><td style="text-align:left">cache</td><td style="text-align:left">no</td><td style="text-align:left">定义应在后续运行之间缓存的文件列表</td></tr><tr><td style="text-align:left">before_script</td><td style="text-align:left">no</td><td style="text-align:left">重写一组在作业前执行的命令</td></tr><tr><td style="text-align:left">after_script</td><td style="text-align:left">no</td><td style="text-align:left">重写一组在作业后执行的命令</td></tr><tr><td style="text-align:left">environment</td><td style="text-align:left">no</td><td style="text-align:left">定义此作业完成部署的环境名称</td></tr><tr><td style="text-align:left">coverage</td><td style="text-align:left">no</td><td style="text-align:left">定义给定作业的代码覆盖率设置</td></tr><tr><td style="text-align:left">etry</td><td style="text-align:left">no</td><td style="text-align:left">定义在发生故障时可以自动重试作业的时间和次数</td></tr><tr><td style="text-align:left">parallel</td><td style="text-align:left">no</td><td style="text-align:left">定义应并行运行的作业实例数</td></tr></tbody></table><h3 id="extends"><a class="markdownIt-Anchor" href="#extends"></a> extends</h3><blockquote><p>是在 GitLab 11.3 中引入的。</p></blockquote><p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。它是使用<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#anchors">YAML锚点</a>的替代方案，并且更加灵活和可读：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.tests:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">rake</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">extends:</span> <span class="string">.tests</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$RSPEC</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>rspec</code>作业继承自<code>.tests</code>模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：</p><ul><li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中。</li><li>不合并键的值。</li></ul><p>这实际生成的是以下<code>rspec</code>作业：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$RSPEC</span></span><br></pre></td></tr></table></figure><h3 id="image-和-services"><a class="markdownIt-Anchor" href="#image-和-services"></a> image 和 services</h3><p>这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看<a href="https://docs.gitlab.com/ee/ci/docker/README.html">a separate document</a>。</p><h3 id="before_script-和-after_script"><a class="markdownIt-Anchor" href="#before_script-和-after_script"></a> before_script 和 after_script</h3><p><code>before_script</code>用来定义所有 job 之前运行的命令，<code>after_script</code>用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。</p><h3 id="stages"><a class="markdownIt-Anchor" href="#stages"></a> stages</h3><p>stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。</p><p>stages中的元素顺序决定了对应job的执行顺序：</p><ol><li>相同 stage 的 job 可以平行执行。</li><li>下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。</li></ol><p>接下仔细看看这个例子，它包含了3个 stage：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><ol><li>首先，所有 build 的 jobs 都是并行执行的。</li><li>所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。</li><li>所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。</li><li>所有的 deploy 的 jobs 执行成功，<code>commit</code>才会标记为<code>success</code>。</li><li>任何一个前置的 jobs 失败了，<code>commit</code>会标记为<code>failed</code>并且下一个 stages 的 jobs 都不会执行。</li></ol><p>这有两个特殊的例子值得一提：</p><ol><li>如果<code>.gitlab-ci.yml</code>中没有定义stages，那么 job’s stages 会默认定义为<code>build</code>，<code>test</code>和<code>deploy</code>。</li><li>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</li></ol><h3 id="only-和-except"><a class="markdownIt-Anchor" href="#only-和-except"></a> only 和 except</h3><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制 jobs 构建：</p><ul><li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li><li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li></ul><p>下面是refs策略的使用规则：</p><ul><li>only 和 except 可同时使用。如果<code>only</code>和<code>except</code>在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。</li><li>only 和 except 可以使用正则表达式。</li><li>only 和 except 允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</li><li>only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。</li></ul><p>在下面这个例子中，job 将只会运行以<code>issue-</code>开始的refs(分支)，然而<code>except</code>中设置将被跳过。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="comment"># use regexp</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/^issue-.*$/</span></span><br><span class="line">  <span class="comment"># use special keyword</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches</span></span><br></pre></td></tr></table></figure><p>在下面这个例子中，job 将只会执行有<code>tags</code>的refs，或者通过<code>API</code>触发器明确地请求构建。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="comment"># use special keywords</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">triggers</span></span><br></pre></td></tr></table></figure><p>下面这个例子将会为所有的分支执行job，但 master 分支除外。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches@gitlab-org/gitlab-ce</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master@gitlab-org/gitlab-ce</span></span><br></pre></td></tr></table></figure><h3 id="variables"><a class="markdownIt-Anchor" href="#variables"></a> variables</h3><p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以<strong>最好是存储项目的非敏感配置</strong>，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="string">DATABASE_URL:&quot;postgres://postgres@postgres/my_database&quot;</span></span><br></pre></td></tr></table></figure><p>这些变量可以被后续的命令和脚本使用。</p><p>除了用户自定义的变量外，Runner 也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。</p><p>这里有更多关于<a href="https://docs.gitlab.com/ce/ci/variables/README.html">variables</a>的介绍。</p><h3 id="cache"><a class="markdownIt-Anchor" href="#cache"></a> cache</h3><h4 id="cache-paths"><a class="markdownIt-Anchor" href="#cache-paths"></a> cache: paths</h4><p>使用<code>paths</code>指令选择要缓存的文件或目录。也可以使用通配符。</p><p>如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。</p><p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">binaries/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.config</span></span><br></pre></td></tr></table></figure><p>缓存<code>git</code>中没有被跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存<code>binaries</code>下没有被<code>git</code>跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">untracked:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">binaries/</span></span><br></pre></td></tr></table></figure><p>job 中优先级高于全局的。下面这个<code>rspec</code> job中将只会缓存<code>binaries/</code>下的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">my/files</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">rspec</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">binaries/</span></span><br></pre></td></tr></table></figure><p>注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。</p><h4 id="cache-key"><a class="markdownIt-Anchor" href="#cache-key"></a> cache: key</h4><p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。</p><p><code>cache:key</code>可以使用任何的<a href="https://docs.gitlab.com/ce/ci/variables/README.html">预定义变量</a>。</p><p>默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。</p><p>配置示例</p><p>缓存每个job：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_JOB_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存每个分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_COMMIT_REF_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存每个 job 且每个分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存每个分支且每个stage：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_JOB_STAGE/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="allow_failure"><a class="markdownIt-Anchor" href="#allow_failure"></a> allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到<code>commit</code>状态。</p><p>当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个”<code>CI build passed with warnings</code>“信息显示在<code>Merge Request</code>或<code>commit</code>或<code>job page</code>。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p><p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了<code>allow_failure: true</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">execute_script_that_will_fail</span></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">execute_script_that_will_succeed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job3:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy_to_staging</span></span><br></pre></td></tr></table></figure><h3 id="when"><a class="markdownIt-Anchor" href="#when"></a> when</h3><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：</p><ul><li><code>on_success</code> - 只有前面 stages 的所有工作成功时才执行。这是默认值。</li><li><code>on_failure</code> - 当前面 stages 中任意一个jobs失败后执行。</li><li><code>always</code> - 无论前面 stages 中 jobs 状态如何都执行。</li><li><code>manual</code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。</li></ul><h3 id="artifacts"><a class="markdownIt-Anchor" href="#artifacts"></a> artifacts</h3><p><code>artifacts</code>用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递<code>artifacts</code>，请查阅<a href="https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies">依赖关系</a>。以下是一些例子：</p><p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">binaries/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">.config</span></span><br></pre></td></tr></table></figure><p>发送所有没有被Git跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">binaries/</span></span><br></pre></td></tr></table></figure><h1 id="五-演示"><a class="markdownIt-Anchor" href="#五-演示"></a> 五、演示</h1><p>接下来，用一个实际项目来演示 GitLab CI/CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。</p><p>下面用一个传统的 Java web 项目(这里称之为<code>cidemo</code>)和<code>Tomcat</code>来作为示例，并用来展示常用配置的使用。当我每次<code>push</code>代码或者<code>Merge Request</code>时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。</p><blockquote><p><strong>注</strong>： Gitlab Runner 安装在<code>Centos</code>环境中，并使用的<code>shell</code>执行器。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义stages</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">run</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sonar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">CIDEMO_PACKAGE_DIR:</span> <span class="string">&#x27;/home/gitlab-runner/packages/cidemo/&#x27;</span></span><br><span class="line">  <span class="attr">SERVER_HOME_DIR:</span> <span class="string">&#x27;/home/gitlab-runner/tomcat/cidemo-tomcat/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### 构建编译和单元测试的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">编译测试任务:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Maven安装得到war包的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">打包任务:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;准备将最新的war包复制、保存到某个目录里面供后续使用.&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">$CIDEMO_PACKAGE_DIR/*.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">target/*.war</span> <span class="string">$CIDEMO_PACKAGE_DIR/cidemo.war</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################### 部署运行war包的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">部署运行任务:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;准备部署和运行war包！(为了方便部署到了Tomcat中运行)&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">$SERVER_HOME_DIR</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">bin/shutdown.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">webapps/cidemo.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">$CIDEMO_PACKAGE_DIR/cidemo.war</span> <span class="string">$SERVER_HOME_DIR/webapps/cidemo.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nohup</span> <span class="string">sh</span> <span class="string">./bin/startup.sh</span> <span class="string">&gt;</span> <span class="string">logs/cidemo_nohup.log</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Sonar手动构建的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">Sonar手动检查:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;准备对项目代码做sonar的质量检查！&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">compile</span> <span class="string">&amp;&amp;</span> <span class="string">mvn</span> <span class="string">sonar:sonar</span> <span class="string">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class="string">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Sonar每晚定时构建的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">Sonar定时检查:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">schedules</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;开始定时对项目代码做sonar的质量检查！&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">compile</span> <span class="string">&amp;&amp;</span> <span class="string">mvn</span> <span class="string">sonar:sonar</span> <span class="string">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class="string">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br></pre></td></tr></table></figure><h1 id="六-实战"><a class="markdownIt-Anchor" href="#六-实战"></a> 六、实战</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为我们Runner执行器设置为docker, 所以这里需要指定docker的版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">docker:stable</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy-master</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">node:alpine</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span> <span class="string">-v</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">-v</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ls</span> <span class="string">-all</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--registry=https://registry.npm.taobao.org</span> <span class="string">--legacy-peer-deps</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:prod</span> </span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">week</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner</span> </span><br><span class="line"><span class="comment"># 发布正式</span></span><br><span class="line"><span class="attr">deploy-master-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy-master</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build</span>  </span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ls</span> <span class="string">-all</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">--name</span> <span class="string">nginx</span> <span class="string">-p</span> <span class="number">8080</span><span class="string">:80</span> <span class="string">-d</span> <span class="string">-v</span> <span class="string">/mnt/www:/usr/share/nginx/html</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-部署vue项目到docker容器中"><a class="markdownIt-Anchor" href="#1-部署vue项目到docker容器中"></a> 1、 部署vue项目到docker容器中</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为我们Runner执行器设置为docker, 所以这里需要指定docker的版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">docker:stable</span></span><br><span class="line"><span class="comment"># 设置变量</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">IMAGE_TAG:</span> <span class="string">vue-nginx:latest</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">vue-nginx</span></span><br><span class="line"><span class="comment"># 定义三个阶段，分别为遍历代码，构建镜像，运行镜像</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">compile</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">run</span></span><br><span class="line"><span class="comment"># 第一阶段</span></span><br><span class="line"><span class="attr">compile:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">node:alpine</span></span><br><span class="line">  <span class="comment"># 指定阶段</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">compile</span></span><br><span class="line">  <span class="comment"># 运行脚本, 使用变量时要用到 $ 符号</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--registry=https://registry.npm.taobao.org</span> <span class="string">--legacy-peer-deps</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:prod</span></span><br><span class="line">  <span class="comment"># 只作用在master分支</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># 创建runner时指定的tag</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner</span> </span><br><span class="line">  <span class="comment"># 编译后有产物,所以要指定下过期时间和路径, 以供于其他阶段使用</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">days</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"><span class="comment"># 第二阶段, 这里不再一一介绍, 和第一阶段差不多</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">&quot;$(docker ps -a | grep $CONTAINER_NAME)&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">stop</span> <span class="string">$CONTAINER_NAME</span> <span class="string">&amp;&amp;</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">$CONTAINER_NAME</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">&quot;$(docker images | grep $IMAGE_TAG)&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">$IMAGE_TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">fi</span>   </span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_TAG</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner</span></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">-p</span> <span class="number">8000</span><span class="string">:80</span> <span class="string">$IMAGE_TAG</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-部署maven项目到docker容器中"><a class="markdownIt-Anchor" href="#2-部署maven项目到docker容器中"></a> 2、部署Maven项目到docker容器中</h2><p><strong>注意</strong></p><blockquote><p>添加自己的settings 文件避免下载过慢的问题</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为我们Runner执行器设置为docker, 所以这里需要指定docker的版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">docker:stable</span></span><br><span class="line"><span class="comment"># 设置变量</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">IMAGE_TAG:</span> <span class="string">hello-cd:latest</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">hello-cd</span></span><br><span class="line"><span class="comment"># 定义三个阶段，分别为遍历代码，构建镜像，运行镜像</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">compile</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">run</span></span><br><span class="line"><span class="comment"># 第一阶段</span></span><br><span class="line"><span class="attr">compile:</span></span><br><span class="line">  <span class="comment"># 打包用到了maven, 所有需要拉取maven镜像, 这是我自己构建的阿里云maven私服的maven镜像</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.6-jdk-8-alpine</span></span><br><span class="line">  <span class="comment"># 指定阶段</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">compile</span></span><br><span class="line">  <span class="comment"># 运行脚本, 使用变量时要用到 $ 符号</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">settings.xml</span> <span class="string">/usr/share/maven/ref/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="comment"># 只作用在master分支</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="comment"># 创建runner时指定的tag</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven</span> </span><br><span class="line">  <span class="comment"># 编译后有产物,所以要指定下过期时间和路径, 以供于其他阶段使用</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">days</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">target/*.jar</span></span><br><span class="line"><span class="comment"># 第二阶段, 这里不再一一介绍, 和第一阶段差不多</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line"><span class="comment"># s</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">&quot;$(docker ps -a | grep $CONTAINER_NAME)&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">stop</span> <span class="string">$CONTAINER_NAME</span> <span class="string">&amp;&amp;</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">$CONTAINER_NAME</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">&quot;$(docker images | grep $IMAGE_TAG)&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">$IMAGE_TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">fi</span>   </span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_TAG</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven</span></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">-p</span> <span class="number">9999</span><span class="string">:9999</span> <span class="string">$IMAGE_TAG</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="七-其他相关内容"><a class="markdownIt-Anchor" href="#七-其他相关内容"></a> 七、其他相关内容</h1><h3 id="1-api触发器-triggers"><a class="markdownIt-Anchor" href="#1-api触发器-triggers"></a> 1 API触发器 Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，<code>tag</code>或<code>commits</code>。API的使用示例可以在<code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Pipeline triggers</code>中找到。</p><p>在<code>triggers</code>文档中<a href="https://docs.gitlab.com/ce/ci/triggers/README.html">查看更多</a>。</p><h3 id="2-配置定时任务"><a class="markdownIt-Anchor" href="#2-配置定时任务"></a> 2 配置定时任务</h3><p>GitLab CI 中可以在 GitLab <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Schedules</code>中配置定时任务，点击<code>New Schedule</code>按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。</p><p>然后在需要定时执行的作业的<code>only</code>分支写上<code>schedules</code>即可。</p><h3 id="3-校验-gitlab-ciyml"><a class="markdownIt-Anchor" href="#3-校验-gitlab-ciyml"></a> 3 校验 .gitlab-ci.yml</h3><p>GitLab CI 的每个实例都有一个名为<code>Lint</code>的嵌入式调试工具。 你可以在 GitLab 实例的<code>-/ci/lint</code>下找到该链接。</p><h3 id="4-配置邮件发送"><a class="markdownIt-Anchor" href="#4-配置邮件发送"></a> 4 配置邮件发送</h3><p>如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab <code>Settings</code> -&gt; <code>Integrations</code> 中找到<code>Pipelines emails</code>，点击进去就可以配置邮件发送相关的内容了。</p><h3 id="5-gitlab-pages"><a class="markdownIt-Anchor" href="#5-gitlab-pages"></a> 5 GitLab Pages</h3><p><a href="https://gitlab.com/pages/">GitLab Pages</a>是用于托管静态文件的服务。而<code>pages</code>是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p><ul><li>任何静态内容必须放在<code>public/</code>目录下</li><li>artifacts必须定义在<code>public/</code>目录下</li></ul><p>下面的这个例子是将所有文件从项目根目录移动到<code>public/</code>目录。<code>.public</code>工作流是<code>cp</code>，并且它不会循环复制<code>public/</code>本身。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">.public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">*</span> <span class="string">.public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mv</span> <span class="string">.public</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>更多内容请查看<a href="https://docs.gitlab.com/ce/user/project/pages/index.html">GitLab Pages用户文档</a>。</p><h3 id="6-跳过-jobs"><a class="markdownIt-Anchor" href="#6-跳过-jobs"></a> 6 跳过 jobs</h3><p>如果你的<code>commit</code>信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个<code>commit</code>将会创建但是 jobs 也会跳过。</p><hr><h2 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h2><ul><li><p><a href="https://segmentfault.com/a/1190000011890710">gitlab-ci配置详解(二)</a></p></li><li><p><a href="https://blinkfox.github.io/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/">blinkfox</a></p></li></ul><ul><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html">官方文档地址</a></li><li><a href="https://segmentfault.com/a/1190000010442764#articleHeader24">segmentfault yaml配置中文翻译</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Action 入门</title>
      <link href="/2021/01/06/GitHub-Action-%E5%85%A5%E9%97%A8/"/>
      <url>/2021/01/06/GitHub-Action-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-入门"><a class="markdownIt-Anchor" href="#1-入门"></a> 1 入门</h1><h2 id="1-官方示例"><a class="markdownIt-Anchor" href="#1-官方示例"></a> 1 官方示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 流程命名</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span> </span><br><span class="line"><span class="comment"># 决定什么时候触发</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="comment"># push的时候触发</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ]</span><br><span class="line"><span class="comment"># 具体的jobs</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="comment"># 命名为build 也可以是其他的</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">  <span class="comment"># 在ubuntu-latest系统下运行，github提供了默认的几个环境运行</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># 执行具体的步骤，每一步是一个数组</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 拉代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">one-line</span> <span class="string">script</span></span><br><span class="line">        <span class="comment"># 运行单行脚本</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">multi-line</span> <span class="string">script</span></span><br><span class="line">        <span class="comment"># 运行多行脚本</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo Add other actions to build,</span></span><br><span class="line"><span class="string">          echo test, and deploy your project.</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="2-各个关键字简单解释"><a class="markdownIt-Anchor" href="#2-各个关键字简单解释"></a> 2 各个关键字简单解释</h2><ul><li><code>uses</code></li></ul><blockquote><p>run-on指定的运行环境中，已经默认安装了很多工具的版本，比如node.js 如果不指定版本，会默认使用指定运行环境中的版本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">  <span class="comment"># 指定版本</span></span><br><span class="line">    <span class="attr">node-version:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># action的名字</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">My-First-Ci</span></span><br><span class="line"><span class="comment"># on : [push]或</span></span><br><span class="line"><span class="comment"># src目录下任何文件发生改动的主分支提交代码触发流程</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">src/*</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">job1:</span></span><br><span class="line">  <span class="comment"># runs-on 是枚举类型，八种之一</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># 配置策略</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">      <span class="comment"># 配置策略分别执行测试</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 使用uses下载代码</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line">  <span class="comment"># 指定版本</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">8</span></span><br><span class="line">    <span class="comment"># 下载代码</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">xxx</span> </span><br><span class="line">    <span class="comment"># run 运行shell指令</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">job2:</span></span><br><span class="line">  <span class="comment"># job2 执行需要job1执行完成</span></span><br><span class="line">    <span class="string">needs:job1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h1 id="2-实战"><a class="markdownIt-Anchor" href="#2-实战"></a> 2 实战</h1><h2 id="1-github-action-部署前端项目到云服务docker上"><a class="markdownIt-Anchor" href="#1-github-action-部署前端项目到云服务docker上"></a> 1 GitHub Action 部署前端项目到云服务Docker上</h2><h3 id="1-准备dockerfile"><a class="markdownIt-Anchor" href="#1-准备dockerfile"></a> 1 准备DOCKERFILE</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist/ /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx/default.conf /etc/nginx/conf.d/default.conf</span></span><br></pre></td></tr></table></figure><h3 id="2-准备nginxconf"><a class="markdownIt-Anchor" href="#2-准备nginxconf"></a> 2  准备nginx.conf</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/host.access.log  main;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/error.log  <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建镜像仓库"><a class="markdownIt-Anchor" href="#3-创建镜像仓库"></a> 3 创建镜像仓库</h3><blockquote><p>在阿里云中创建Docker镜像仓库，并记录公网ip地址</p></blockquote><h3 id="4-创建secrets"><a class="markdownIt-Anchor" href="#4-创建secrets"></a> 4 创建Secrets</h3><blockquote><p>登录github进入项目仓库，依次点击settings&gt;Secrets&gt;New secret</p></blockquote><blockquote><p>点击New secret以后出来的页面有2个选项，Name和Value，Name对应上图红框所示，Value填入Name对应的值，简单解释一下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_REPOSITORY: 镜像仓库地址，也就是上一个步骤复制到的公网地址</span><br><span class="line"></span><br><span class="line">DOCKER_USERNAME：登录阿里云的账号</span><br><span class="line"></span><br><span class="line">DOCKER_PASSWORD： 登录阿里云的密码</span><br><span class="line"></span><br><span class="line">HOST：部署项目的服务器ip</span><br><span class="line"></span><br><span class="line">HOST_PORT：服务器ssh端口号(默认是22)</span><br><span class="line"></span><br><span class="line">HOST_USERNAME：服务器登录用户名（ps:非root权限账号请子u该账号所属组为docker）</span><br><span class="line"></span><br><span class="line">HOST_PASSWORD： 登录服务器的密码</span><br></pre></td></tr></table></figure><h3 id="5-准备workflowsyml文件"><a class="markdownIt-Anchor" href="#5-准备workflowsyml文件"></a> 5  准备Workflows.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Vue-Test-CI</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="comment"># 多策略的用法</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">npm</span> <span class="string">install,</span> <span class="string">build,</span> <span class="string">and</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        npm run build:prod</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;:latest</span> <span class="string">./</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">registry</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">--username=$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span> <span class="string">--password</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_PASSWORD</span> <span class="string">&#125;&#125;</span> <span class="string">registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Image</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;:latest</span></span><br><span class="line">  <span class="attr">pull-docker:</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">build</span>]</span><br><span class="line">    <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">Docker</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            docker stop $(docker ps --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125; -q)</span></span><br><span class="line"><span class="string">            docker rm -f $(docker ps -a --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest -q)</span></span><br><span class="line"><span class="string">            docker rmi -f $(docker images $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest -q)</span></span><br><span class="line"><span class="string">            docker login --username=$&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125; --password $&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="string">            docker pull $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest</span></span><br><span class="line"><span class="string">            docker run -d -p 8000:80 $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest</span></span><br></pre></td></tr></table></figure><h3 id="6-注释版"><a class="markdownIt-Anchor" href="#6-注释版"></a> 6  注释版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Docker</span> <span class="string">Image</span> <span class="string">CI/CD</span> <span class="comment"># workflow名称，可以随意改</span></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># workflow的事件钩子，告知程序说明时候出发自动部署</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">master</span> ] <span class="comment"># 在master分支有push操作的时候自动部署</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># 打包并上传docker镜像</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 依赖的环境      </span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="number">8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">npm</span> <span class="string">install,</span> <span class="string">build,</span> <span class="string">and</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      # 安装依赖</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        # 构建</span></span><br><span class="line"><span class="string">        npm run build:prod </span></span><br><span class="line"><span class="string">      - name: Build Image</span></span><br><span class="line"><span class="string">      # $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;是读取之前在Secret创建的名为DOCKER_REPOSITORY的值</span></span><br><span class="line"><span class="string">        run: docker build -t $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest ./ # 打包并docker镜像，版本为latest</span></span><br><span class="line"><span class="string">      - name: Login to Registry # 登录阿里云镜像服务器</span></span><br><span class="line"><span class="string">        run: docker login --username=$&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125; --password $&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="string">      - name: Push Image # 推送镜像，设置版本为latest</span></span><br><span class="line"><span class="string">        run: docker push $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest</span></span><br><span class="line"><span class="string"></span>  <span class="attr">pull-docker:</span> <span class="comment"># docker部署</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">build</span>]</span><br><span class="line">    <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">Docker</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器ip</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_USERNAME</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器登录用户名</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PASSWORD</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器登录密码</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PORT</span> <span class="string">&#125;&#125;</span> <span class="comment"># 服务器ssh端口</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 停止旧版容器</span></span><br><span class="line"><span class="string">            docker stop $(docker ps --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125; -q)</span></span><br><span class="line"><span class="string">            # 删除旧版容器</span></span><br><span class="line"><span class="string">            docker rm -f $(docker ps -a --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest -q)</span></span><br><span class="line"><span class="string">            # 删除旧版镜像</span></span><br><span class="line"><span class="string">            docker rmi -f $(docker images $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest -q)</span></span><br><span class="line"><span class="string">            # 登录阿里云镜像服务器</span></span><br><span class="line"><span class="string">            docker login --username=$&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125; --password $&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="string">            # 拉取最新latest版本镜像</span></span><br><span class="line"><span class="string">            docker pull $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest</span></span><br><span class="line"><span class="string">            # 运行最新latest版本镜像</span></span><br><span class="line"><span class="string">            docker run -d -p 8000:4000 $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;:latest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-github-action-部署maven项目到云服务docker上"><a class="markdownIt-Anchor" href="#2-github-action-部署maven项目到云服务docker上"></a> 2 Github Action 部署maven项目到云服务Docker上</h2><p>3 Github Action 部署前后端分离Cloud项目云服务Docker上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">auto-deploy-gatway</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拉取代码</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">准备jdk8</span> <span class="string">环境</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="number">1.8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">打包后端</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span> <span class="string">package</span> <span class="string">--file</span> <span class="string">pom.xml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./ruoyi-gateway/Dockerfile</span> <span class="string">-t</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;/ruoyi-gateway:latest</span> <span class="string">./ruoyi-gateway</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">登录到阿里云镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">--username=$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span> <span class="string">--password</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_PASSWORD</span> <span class="string">&#125;&#125;</span> <span class="string">registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;/ruoyi-gateway:latest</span></span><br><span class="line">  <span class="attr">pull-docker:</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">build</span>]</span><br><span class="line">    <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">Docker</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署后端</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            docker stop $(docker ps --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway -q)</span></span><br><span class="line"><span class="string">            docker rm -f $(docker ps -a --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest -q)</span></span><br><span class="line"><span class="string">            docker rmi -f $(docker images $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest -q)</span></span><br><span class="line"><span class="string">            docker login --username=$&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125; --password $&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="string">            docker pull $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest</span></span><br><span class="line"><span class="string">            docker run -d --name ruoyi-gateway -p 8080:8080 $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest</span></span><br></pre></td></tr></table></figure><h2 id="3-github-action-部署微服务项目到服务器docker上"><a class="markdownIt-Anchor" href="#3-github-action-部署微服务项目到服务器docker上"></a> 3 Github Action 部署微服务项目到服务器Docker上</h2><blockquote><p>整合 1 与 2</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">auto-deploy-gatway</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拉取代码</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">准备jdk8</span> <span class="string">环境</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="number">1.8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">打包后端</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span> <span class="string">package</span> <span class="string">--file</span> <span class="string">pom.xml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建网关镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./ruoyi-gateway/Dockerfile</span> <span class="string">-t</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;/ruoyi-gateway:latest</span> <span class="string">./ruoyi-gateway</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建服务镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./ruoyi-modules/ruoyi-system/Dockerfile</span> <span class="string">-t</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;/ruoyi-system:latest</span> <span class="string">./ruoyi-modules/ruoyi-system</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">登录到阿里云镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">--username=$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span> <span class="string">--password</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_PASSWORD</span> <span class="string">&#125;&#125;</span> <span class="string">registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送网关镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;/ruoyi-gateway:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送微服务镜像</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_REPOSITORY</span> <span class="string">&#125;&#125;/ruoyi-system:latest</span>      </span><br><span class="line">  <span class="attr">pull-docker:</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">build</span>]</span><br><span class="line">    <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">Docker</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署后端</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            docker stop $(docker ps --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway -q)</span></span><br><span class="line"><span class="string">            docker rm -f $(docker ps -a --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest -q)</span></span><br><span class="line"><span class="string">            docker rmi -f $(docker images $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest -q)</span></span><br><span class="line"><span class="string">            docker login --username=$&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125; --password $&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125; registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="string">            docker pull $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest</span></span><br><span class="line"><span class="string">            docker run -d --name ruoyi-gateway -p 8080:8080 $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-gateway:latest</span></span><br><span class="line"><span class="string">            docker stop $(docker ps --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-system -q)</span></span><br><span class="line"><span class="string">            docker rm -f $(docker ps -a --filter ancestor=$&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-system:latest -q)</span></span><br><span class="line"><span class="string">            docker rmi -f $(docker images $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-system:latest -q)</span></span><br><span class="line"><span class="string">            docker pull $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-system:latest</span></span><br><span class="line"><span class="string">            docker run -d --name ruoyi-system -p 9201:9201 $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;/ruoyi-system:latest</span></span><br></pre></td></tr></table></figure><h1 id="3-参阅"><a class="markdownIt-Anchor" href="#3-参阅"></a> 3 参阅</h1><p><a href="https://blog.csdn.net/alangrady/article/details/108241799">Docker参阅</a></p><p><a href="https://yuqingc.github.io/posts/2020/github-actions/">入门参阅</a></p>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git日常命令总结</title>
      <link href="/2021/01/06/Git%E6%97%A5%E5%B8%B8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2021/01/06/Git%E6%97%A5%E5%B8%B8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git-清除孤儿分支"><a class="markdownIt-Anchor" href="#1-git-清除孤儿分支"></a> 1 Git 清除孤儿分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假如你的远程版本库名是 origin,则使用如下命令先查看哪些分支需要清理：</span></span><br><span class="line">git remote prune origin --dry-run</span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">git remote prune origin</span><br><span class="line"><span class="comment"># 删除本地</span></span><br><span class="line">git branch -D feature_name1 feature_name2 feature_name3</span><br></pre></td></tr></table></figure><h1 id="2-git创建分支"><a class="markdownIt-Anchor" href="#2-git创建分支"></a> 2 Git创建分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并切换分支</span></span><br><span class="line"><span class="comment">#创建dev和跟踪origin/dev --track 不加为缺省默认值</span></span><br><span class="line">git checkout -b dev origin/dev</span><br><span class="line">git checkout --track origin/dev</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git switch dev</span><br><span class="line">git switch -c dev 0810beaed7</span><br><span class="line">git switch -c &lt;branch&gt; --track &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure><h1 id="3-git-rebase"><a class="markdownIt-Anchor" href="#3-git-rebase"></a> 3 Git Rebase</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前的commit 嫁接到新的base-commit上</span></span><br><span class="line">git rebase &lt;new base-commit&gt; </span><br><span class="line"><span class="comment"># 会先checkout到feature分支然后执行rebase master的操作</span></span><br><span class="line">git rebase master feature</span><br><span class="line">注意：rebase是会重写历史的，会导致和远端的分支分离</span><br></pre></td></tr></table></figure><h1 id="4-git-rebase-onto"><a class="markdownIt-Anchor" href="#4-git-rebase-onto"></a> 4 Git Rebase --onto</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A : 是一个分支名称（代表此分支的 HEAD）或者是一个 commit_id (此 id 不在 C 上)      </span></span><br><span class="line"><span class="comment"># B : 一个分支名称（此分支与 C 有共同的祖先 commit）或者是一个 commit_id (此 id 在 C 上)     </span></span><br><span class="line"><span class="comment"># C : 一个分支名称</span></span><br><span class="line">git rebase --onto A B C </span><br></pre></td></tr></table></figure><p><strong>命令的作用：</strong></p><ol><li><p>首先会执行 git checkout 切换到 C</p></li><li><p>将 B 到 C(HEAD) 之间所标识范围内的提交写到一个临时文件中 ，若B 为分支名称，则找到 B 与 C 共同的祖先 commit，则为此 commit 到 C(HEAD) 之间所标识范围内的提交，范围是（commit,C(HEAD)]。</p></li><li><p>将当前分支强制重置（git reset --hard）到 A</p></li><li><p>从2中临时文件的提交列表中，一个一个将提交按照顺序重新提交到重置之后的分支上</p></li></ol><p><strong>注意：</strong></p><ul><li>如果遇到提交已经在分支中包含，跳过该提交。</li><li>如果在提交过程遇到冲突，衍合过程暂停。用户解决冲突后，执行 git rebase --continue 继续变基操作。或者执行 git rebase --skip 跳过此提交。或者执行 git rebase --abort 就此终止变基操作切换到变基前的分支上。</li><li>衍合操作结束后，当前分支为 C</li></ul><h2 id="例"><a class="markdownIt-Anchor" href="#例"></a> 例</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702134539.png" alt="原图片"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210702134615.png" alt="执行后"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --onto master server client</span><br></pre></td></tr></table></figure><p><strong>解释:</strong></p><p>​       server 和 client 的共同祖先commit 为 C3，首先当前分支切换到 client ，并将其 HEAD 重置为 master，即为 C6，然后将client 分支上 C3-C9 （不包括 C3，即 C8 和 C9）提交到当前分支上，即 C6 之后。最终结果即为 client : C1-C2-C5-C6-C8-C9，C8 和 C9 是重新提交，其 commit_id 会改变。</p><p>​        $ git checkout master</p><p>​        $ git merge client</p><p>​        再进行如上两步操作，即可将 client 分支的部分功能开发内容合入 master</p><h1 id="5-git-branch"><a class="markdownIt-Anchor" href="#5-git-branch"></a> 5 Git Branch</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用git branch -f 来移动分支指针</span></span><br><span class="line">git branch -f master C2</span><br><span class="line"></span><br><span class="line">git branch -u upstream/branch branch</span><br></pre></td></tr></table></figure><h2 id="扩展"><a class="markdownIt-Anchor" href="#扩展"></a> 扩展</h2><blockquote><p>在代码库中，我们如果希望从某一 ref 开始到 HEAD保留下来，然后之前的历史删除。因为这个任务比较常见，所以可以写成一个 shell script</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git checkout --orphan temp <span class="variable">$1</span></span><br><span class="line">git commit -m <span class="string">&quot;new begin&quot;</span></span><br><span class="line">git rebase --onto temp <span class="variable">$1</span> master</span><br><span class="line">git branch -D temp</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a class="markdownIt-Anchor" href="#5-参考"></a> 5 参考</h1><p><a href="lixingcong.github.io/2019/12/04/git-rebase/">Git Rebase</a></p><p><a href="https://www.zhihu.com/question/60279937">git rebase --onto </a></p><p><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/agul_/article/details/7843182">Git学习笔记（十） 改变历史 - Present - 博客频道 - CSDN.NET</a><br><a href="https://link.zhihu.com/?target=https%3A//segmentfault.com/q/1010000002564327">如何批量删除git仓库中的提交纪录？ - SegmentFault</a></p><p><a href="http://blog.huati365.com/3qmg2N68XeAQNAK"><strong>git checkout --track原点/分支和git checkout -b分支原点/分支之间的区别</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 搭建基本环境</title>
      <link href="/2021/01/05/Docker-%E6%90%AD%E5%BB%BA%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/01/05/Docker-%E6%90%AD%E5%BB%BA%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker-安装mysql"><a class="markdownIt-Anchor" href="#1-docker-安装mysql"></a> 1 Docker 安装Mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql_ruoyi mysql:5.7</span><br><span class="line"><span class="comment"># 安装8.0</span></span><br><span class="line">docker pull mysql:8.0.20</span><br><span class="line">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456  -d mysql:8.0.20</span><br><span class="line">docker cp  mysql:/etc/mysql /home/docker/mysql8.0.20</span><br><span class="line">docker rm -f  mysql</span><br><span class="line">docker run \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--name mysql \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">-v /home/docker/mysql8.0.20/mysql:/etc/mysql \</span><br><span class="line">-v /home/docker/mysql8.0.20/logs:/logs \</span><br><span class="line">-v /home/docker/mysql8.0.20/data:/var/lib/mysql \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:8.0.20</span><br></pre></td></tr></table></figure><h1 id="2-docker安装nacos"><a class="markdownIt-Anchor" href="#2-docker安装nacos"></a> 2 Docker安装Nacos</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取</span></span><br><span class="line">docker pull nacos/nacos-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">docker cp nacos:/home/nacos /home/win10/</span><br><span class="line"><span class="comment"># 单机模式运行 </span></span><br><span class="line">docker run --name nacos -d -p 8848:8848 --privileged=<span class="literal">true</span> --restart=always -e JVM_XMS=256m -e JVM_XMX=512m -e MODE=standalone -e PREFER_HOST_MODE=hostname -v /home/nacos/logs:/home/nacos/logs -v /home/nacos/conf/:/home/nacos/conf/ -v /home/nacos/init.d:/home/nacos/init.d  nacos/nacos-server</span><br><span class="line"></span><br><span class="line">docker run -it -e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_HOST=172.17.0.1 \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_DB_NAME=nacos_config \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_PASSWORD=123456 \</span><br><span class="line">-v /home/nacos/logs:/home/nacos/logs \</span><br><span class="line">--restart=always \</span><br><span class="line">--name nacos -p 8848:8848 nacos/nacos-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line">docker run -it -e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.173.103 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos_conifg \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3307 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=123456 \</span><br><span class="line">-v /home/nacos/logs:/home/nacos/logs \</span><br><span class="line">--restart=always \</span><br><span class="line">--name nacos -p 8848:8848 nacos/nacos-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在浏览器访问 </span></span><br><span class="line">http://localhost:8848/nacos/index.html</span><br><span class="line">默认登录账号 nacos/nacos</span><br></pre></td></tr></table></figure><h1 id="3-docker安装redis"><a class="markdownIt-Anchor" href="#3-docker安装redis"></a> 3 Docker安装Redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull redis </span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir -p /home/docker/redis/conf</span><br><span class="line">mkdir -p /home/docker/redis/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /home/redis/conf</span><br><span class="line">vim redis.conf</span><br><span class="line">-----------------</span><br><span class="line"><span class="comment"># 开启远程访问</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1 </span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="comment"># 开启数据持久化</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># 设置访问密码</span></span><br><span class="line">requirepass 123456 </span><br><span class="line">------------------</span><br><span class="line"><span class="comment"># 创建容器并启动</span></span><br><span class="line">docker run --name redis -p 6379:6379 -v /home/redis/data:/data -v /home/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure><h1 id="4-docker部署java项目"><a class="markdownIt-Anchor" href="#4-docker部署java项目"></a> 4 Docker部署Java项目</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Curiosity</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./target/ruoyi-modules-system-2.4.0.jar ruoyi-modules-system.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9201</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;ruoyi-modules-system.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h1 id="5-docker-部署vue项目"><a class="markdownIt-Anchor" href="#5-docker-部署vue项目"></a> 5 Docker 部署Vue项目</h1><h2 id="1-nginx-配置文件"><a class="markdownIt-Anchor" href="#1-nginx-配置文件"></a> 1 Nginx 配置文件</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  root root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">4</span>;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>; </span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">0001</span> <span class="number">0010</span> <span class="number">0100</span> <span class="number">1000</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span> logs/nginx.pid; </span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  access  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  logs/access.log  access;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>      <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>      <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>; </span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">4k</span>; </span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">8</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">300m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;  </span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; </span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  yzypc;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /dist/;</span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">100m</span>; </span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">300</span>;          </span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">16</span> <span class="number">64k</span>; </span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;         </span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;  </span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;          </span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&quot;GET, POST, OPTIONS&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="attribute">location</span> /prod-api &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://42.193.118.181:8080/;</span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">100m</span>; </span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">300</span>;          </span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">16</span> <span class="number">64k</span>; </span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;         </span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;  </span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;          </span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&quot;GET, POST, OPTIONS&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">location</span> /favicon.ico &#123;  </span><br><span class="line">             <span class="attribute">root</span> html;  </span><br><span class="line">        &#125;       </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-dockerfile"><a class="markdownIt-Anchor" href="#2-dockerfile"></a> 2 Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">MAINTAINER</span> Curiosity</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /etc/nginx/logs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /dist</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist /dist</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell美化oh-my-zsh</title>
      <link href="/2020/12/28/shell%E7%BE%8E%E5%8C%96oh-my-zsh/"/>
      <url>/2020/12/28/shell%E7%BE%8E%E5%8C%96oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="shell美化"><a class="markdownIt-Anchor" href="#shell美化"></a> Shell美化</h1><h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 安装</h2><ol><li>安装Git</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><ol start="2"><li>安装zsh</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh</span><br></pre></td></tr></table></figure><ol start="3"><li>执行脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script should be run via curl:</span></span><br><span class="line"><span class="comment">#   sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span><br><span class="line"><span class="comment"># or via wget:</span></span><br><span class="line"><span class="comment">#   sh -c &quot;$(wget -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span><br><span class="line"><span class="comment"># or via fetch:</span></span><br><span class="line"><span class="comment">#   sh -c &quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># As an alternative, you can first download the install script and run it afterwards:</span></span><br><span class="line"><span class="comment">#   wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</span></span><br><span class="line"><span class="comment">#   sh install.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can tweak the install behavior by setting variables when running the script. For</span></span><br><span class="line"><span class="comment"># example, to change the path to the Oh My Zsh repository:</span></span><br><span class="line"><span class="comment">#   ZSH=~/.zsh sh install.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Respects the following environment variables:</span></span><br><span class="line"><span class="comment">#   ZSH     - path to the Oh My Zsh repository folder (default: $HOME/.oh-my-zsh)</span></span><br><span class="line"><span class="comment">#   REPO    - name of the GitHub repo to install from (default: ohmyzsh/ohmyzsh)</span></span><br><span class="line"><span class="comment">#   REMOTE  - full remote URL of the git repo to install (default: GitHub via HTTPS)</span></span><br><span class="line"><span class="comment">#   BRANCH  - branch to check out immediately after install (default: master)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Other options:</span></span><br><span class="line"><span class="comment">#   CHSH       - &#x27;no&#x27; means the installer will not change the default shell (default: yes)</span></span><br><span class="line"><span class="comment">#   RUNZSH     - &#x27;no&#x27; means the installer will not run zsh after the install (default: yes)</span></span><br><span class="line"><span class="comment">#   KEEP_ZSHRC - &#x27;yes&#x27; means the installer will not replace an existing .zshrc (default: no)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can also pass some arguments to the install script to set some these options:</span></span><br><span class="line"><span class="comment">#   --skip-chsh: has the same behavior as setting CHSH to &#x27;no&#x27;</span></span><br><span class="line"><span class="comment">#   --unattended: sets both CHSH and RUNZSH to &#x27;no&#x27;</span></span><br><span class="line"><span class="comment">#   --keep-zshrc: sets KEEP_ZSHRC to &#x27;yes&#x27;</span></span><br><span class="line"><span class="comment"># For example:</span></span><br><span class="line"><span class="comment">#   sh install.sh --unattended</span></span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line"><span class="comment">#   sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; &quot;&quot; --unattended</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># Track if $ZSH was provided</span></span><br><span class="line">custom_zsh=<span class="variable">$&#123;ZSH:+yes&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default settings</span></span><br><span class="line">ZSH=<span class="variable">$&#123;ZSH:-~/.oh-my-zsh&#125;</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line">BRANCH=<span class="variable">$&#123;BRANCH:-master&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Other options</span></span><br><span class="line">CHSH=<span class="variable">$&#123;CHSH:-yes&#125;</span></span><br><span class="line">RUNZSH=<span class="variable">$&#123;RUNZSH:-yes&#125;</span></span><br><span class="line">KEEP_ZSHRC=<span class="variable">$&#123;KEEP_ZSHRC:-no&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command_exists</span></span>() &#123;</span><br><span class="line"><span class="built_in">command</span> -v <span class="string">&quot;<span class="variable">$@</span>&quot;</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fmt_error</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;RED&#125;</span><span class="string">&quot;Error: <span class="variable">$@</span>&quot;</span><span class="variable">$&#123;RESET&#125;</span> &gt;&amp;2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fmt_underline</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(printf &#x27;\033[4m&#x27;)</span>$@<span class="subst">$(printf &#x27;\033[24m&#x27;)</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fmt_code</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;\`<span class="subst">$(printf &#x27;\033[38;5;247m&#x27;)</span>$@<span class="variable">$&#123;RESET&#125;</span>\`&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_color</span></span>() &#123;</span><br><span class="line"><span class="comment"># Only use colors if connected to a terminal</span></span><br><span class="line"><span class="keyword">if</span> [ -t 1 ]; <span class="keyword">then</span></span><br><span class="line">RED=$(<span class="built_in">printf</span> <span class="string">&#x27;\033[31m&#x27;</span>)</span><br><span class="line">GREEN=$(<span class="built_in">printf</span> <span class="string">&#x27;\033[32m&#x27;</span>)</span><br><span class="line">YELLOW=$(<span class="built_in">printf</span> <span class="string">&#x27;\033[33m&#x27;</span>)</span><br><span class="line">BLUE=$(<span class="built_in">printf</span> <span class="string">&#x27;\033[34m&#x27;</span>)</span><br><span class="line">BOLD=$(<span class="built_in">printf</span> <span class="string">&#x27;\033[1m&#x27;</span>)</span><br><span class="line">RESET=$(<span class="built_in">printf</span> <span class="string">&#x27;\033[m&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">RED=<span class="string">&quot;&quot;</span></span><br><span class="line">GREEN=<span class="string">&quot;&quot;</span></span><br><span class="line">YELLOW=<span class="string">&quot;&quot;</span></span><br><span class="line">BLUE=<span class="string">&quot;&quot;</span></span><br><span class="line">BOLD=<span class="string">&quot;&quot;</span></span><br><span class="line">RESET=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_ohmyzsh</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Prevent the cloned repository from having insecure permissions. Failing to do</span></span><br><span class="line">  <span class="comment"># so causes compinit() calls to fail with &quot;command not found: compdef&quot; errors</span></span><br><span class="line">  <span class="comment"># for users with insecure umasks (e.g., &quot;002&quot;, allowing group writability). Note</span></span><br><span class="line">  <span class="comment"># that this will be ignored under Cygwin by default, as Windows ACLs take</span></span><br><span class="line">  <span class="comment"># precedence over umasks except for filesystems mounted with option &quot;noacl&quot;.</span></span><br><span class="line">  <span class="built_in">umask</span> g-w,o-w</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>Cloning Oh My Zsh...<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  command_exists git || &#123;</span><br><span class="line">    fmt_error <span class="string">&quot;git is not installed&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$OSTYPE</span>&quot;</span> = cygwin ] &amp;&amp; git --version | grep -q msysgit; <span class="keyword">then</span></span><br><span class="line">    fmt_error <span class="string">&quot;Windows/MSYS Git is not supported on Cygwin&quot;</span></span><br><span class="line">    fmt_error <span class="string">&quot;Make sure the Cygwin git package is installed and is first on the \$PATH&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  git <span class="built_in">clone</span> -c core.eol=lf -c core.autocrlf=<span class="literal">false</span> \</span><br><span class="line">    -c fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">    -c fetch.fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">    -c receive.fsck.zeroPaddedFilemode=ignore \</span><br><span class="line">    --depth=1 --branch <span class="string">&quot;<span class="variable">$BRANCH</span>&quot;</span> <span class="string">&quot;<span class="variable">$REMOTE</span>&quot;</span> <span class="string">&quot;<span class="variable">$ZSH</span>&quot;</span> || &#123;</span><br><span class="line">    fmt_error <span class="string">&quot;git clone of oh-my-zsh repo failed&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_zshrc</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Keep most recent old .zshrc at .zshrc.pre-oh-my-zsh, and older ones</span></span><br><span class="line">  <span class="comment"># with datestamp of installation that moved them aside, so we never actually</span></span><br><span class="line">  <span class="comment"># destroy a user&#x27;s original zshrc</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>Looking for an existing zsh config...<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Must use this exact name so uninstall.sh can find it</span></span><br><span class="line">  OLD_ZSHRC=~/.zshrc.pre-oh-my-zsh</span><br><span class="line">  <span class="keyword">if</span> [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Skip this if the user doesn&#x27;t want to replace an existing .zshrc</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$KEEP_ZSHRC</span> = yes ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>Found ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span> <span class="variable">$&#123;GREEN&#125;</span>Keeping...<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$OLD_ZSHRC</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      OLD_OLD_ZSHRC=<span class="string">&quot;<span class="variable">$&#123;OLD_ZSHRC&#125;</span>-<span class="subst">$(date +%Y-%m-%d_%H-%M-%S)</span>&quot;</span></span><br><span class="line">      <span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$OLD_OLD_ZSHRC</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        fmt_error <span class="string">&quot;<span class="variable">$OLD_OLD_ZSHRC</span> exists. Can&#x27;t back up <span class="variable">$&#123;OLD_ZSHRC&#125;</span>&quot;</span></span><br><span class="line">        fmt_error <span class="string">&quot;re-run the installer again in a couple of seconds&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">      mv <span class="string">&quot;<span class="variable">$OLD_ZSHRC</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;OLD_OLD_ZSHRC&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>Found old ~/.zshrc.pre-oh-my-zsh.&quot;</span> \</span><br><span class="line">        <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>Backing up to <span class="variable">$&#123;OLD_OLD_ZSHRC&#125;</span><span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>Found ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span> <span class="variable">$&#123;GREEN&#125;</span>Backing up to <span class="variable">$&#123;OLD_ZSHRC&#125;</span><span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line">    mv ~/.zshrc <span class="string">&quot;<span class="variable">$OLD_ZSHRC</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>Using the Oh My Zsh template file and adding it to ~/.zshrc.<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  sed <span class="string">&quot;/^export ZSH=/ c\\</span></span><br><span class="line"><span class="string">export ZSH=\&quot;<span class="variable">$ZSH</span>\&quot;</span></span><br><span class="line"><span class="string">&quot;</span> <span class="string">&quot;<span class="variable">$ZSH</span>/templates/zshrc.zsh-template&quot;</span> &gt; ~/.zshrc-omztemp</span><br><span class="line">mv -f ~/.zshrc-omztemp ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_shell</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Skip setup if the user wants or stdin is closed (not running interactively).</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$CHSH</span> = no ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If this user&#x27;s login shell is already &quot;zsh&quot;, do not attempt to switch.</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(basename -- <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span>)</span>&quot;</span> = <span class="string">&quot;zsh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If this platform doesn&#x27;t provide a &quot;chsh&quot; command, bail out.</span></span><br><span class="line">  <span class="keyword">if</span> ! command_exists chsh; <span class="keyword">then</span></span><br><span class="line">    cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">I can&#x27;t change your shell automatically because this system does not have chsh.</span></span><br><span class="line"><span class="string">$&#123;BLUE&#125;Please manually change your default shell to zsh$&#123;RESET&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;BLUE&#125;</span>Time to change your default shell to zsh:<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Prompt for user choice on changing the default login shell</span></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>Do you want to change your default shell to zsh? [Y/n]<span class="variable">$&#123;RESET&#125;</span> &quot;</span></span><br><span class="line">  <span class="built_in">read</span> opt</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    y*|Y*|<span class="string">&quot;&quot;</span>) <span class="built_in">echo</span> <span class="string">&quot;Changing the shell...&quot;</span> ;;</span><br><span class="line">    n*|N*) <span class="built_in">echo</span> <span class="string">&quot;Shell change skipped.&quot;</span>; <span class="built_in">return</span> ;;</span><br><span class="line">    *) <span class="built_in">echo</span> <span class="string">&quot;Invalid choice. Shell change skipped.&quot;</span>; <span class="built_in">return</span> ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check if we&#x27;re running on Termux</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$PREFIX</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    *com.termux*) termux=<span class="literal">true</span>; zsh=zsh ;;</span><br><span class="line">    *) termux=<span class="literal">false</span> ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$termux</span>&quot;</span> != <span class="literal">true</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Test for the right location of the &quot;shells&quot; file</span></span><br><span class="line">    <span class="keyword">if</span> [ -f /etc/shells ]; <span class="keyword">then</span></span><br><span class="line">      shells_file=/etc/shells</span><br><span class="line">    <span class="keyword">elif</span> [ -f /usr/share/defaults/etc/shells ]; <span class="keyword">then</span> <span class="comment"># Solus OS</span></span><br><span class="line">      shells_file=/usr/share/defaults/etc/shells</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      fmt_error <span class="string">&quot;could not find /etc/shells file. Change your default shell manually.&quot;</span></span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the path to the right zsh binary</span></span><br><span class="line">    <span class="comment"># 1. Use the most preceding one based on $PATH, then check that it&#x27;s in the shells file</span></span><br><span class="line">    <span class="comment"># 2. If that fails, get a zsh path from the shells file, then check it actually exists</span></span><br><span class="line">    <span class="keyword">if</span> ! zsh=$(<span class="built_in">which</span> zsh) || ! grep -qx <span class="string">&quot;<span class="variable">$zsh</span>&quot;</span> <span class="string">&quot;<span class="variable">$shells_file</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> ! zsh=$(grep <span class="string">&#x27;^/.*/zsh$&#x27;</span> <span class="string">&quot;<span class="variable">$shells_file</span>&quot;</span> | tail -1) || [ ! -f <span class="string">&quot;<span class="variable">$zsh</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        fmt_error <span class="string">&quot;no zsh binary found or not present in &#x27;<span class="variable">$shells_file</span>&#x27;&quot;</span></span><br><span class="line">        fmt_error <span class="string">&quot;change your default shell manually.&quot;</span></span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># We&#x27;re going to change the default shell, so back up the current one</span></span><br><span class="line">  <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$SHELL</span> &gt; ~/.shell.pre-oh-my-zsh</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    grep <span class="string">&quot;^<span class="variable">$USER</span>:&quot;</span> /etc/passwd | awk -F: <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> &gt; ~/.shell.pre-oh-my-zsh</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Actually change the default shell to zsh</span></span><br><span class="line">  <span class="keyword">if</span> ! chsh -s <span class="string">&quot;<span class="variable">$zsh</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    fmt_error <span class="string">&quot;chsh command unsuccessful. Change your default shell manually.&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> SHELL=<span class="string">&quot;<span class="variable">$zsh</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;GREEN&#125;</span>Shell successfully changed to &#x27;<span class="variable">$zsh</span>&#x27;.<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Run as unattended if stdin is not a tty</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -t 0 ]; <span class="keyword">then</span></span><br><span class="line">    RUNZSH=no</span><br><span class="line">    CHSH=no</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Parse arguments</span></span><br><span class="line">  <span class="keyword">while</span> [ <span class="variable">$#</span> -gt 0 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">      --unattended) RUNZSH=no; CHSH=no ;;</span><br><span class="line">      --skip-chsh) CHSH=no ;;</span><br><span class="line">      --keep-zshrc) KEEP_ZSHRC=yes ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  setup_color</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ! command_exists zsh; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>Zsh is not installed.<span class="variable">$&#123;RESET&#125;</span> Please install zsh first.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$ZSH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>The \$ZSH folder already exists (<span class="variable">$ZSH</span>).<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$custom_zsh</span>&quot;</span> = yes ]; <span class="keyword">then</span></span><br><span class="line">      cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You ran the installer with the \$ZSH setting or the \$ZSH variable is</span></span><br><span class="line"><span class="string">exported. You have 3 options:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. Unset the ZSH variable when calling the installer:</span></span><br><span class="line"><span class="string">   $(fmt_code &quot;ZSH= sh install.sh&quot;)</span></span><br><span class="line"><span class="string">2. Install Oh My Zsh to a directory that doesn&#x27;t exist yet:</span></span><br><span class="line"><span class="string">   $(fmt_code &quot;ZSH=path/to/new/ohmyzsh/folder sh install.sh&quot;)</span></span><br><span class="line"><span class="string">3. (Caution) If the folder doesn&#x27;t contain important information,</span></span><br><span class="line"><span class="string">   you can just remove it with $(fmt_code &quot;rm -r $ZSH&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;You&#x27;ll need to remove it if you want to reinstall.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  setup_ohmyzsh</span><br><span class="line">  setup_zshrc</span><br><span class="line">  setup_shell</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$GREEN</span>&quot;</span></span><br><span class="line">  cat &lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">         __                                     __</span><br><span class="line">  ____  / /_     ____ ___  __  __   ____  _____/ /_</span><br><span class="line"> / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</span><br><span class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span><br><span class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</span><br><span class="line">                        /____/                       ....is now installed!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">  cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">Before you scream Oh My Zsh! please look over the ~/.zshrc file to select plugins, themes, and options.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">• Follow us on Twitter: $(fmt_underline https://twitter.com/ohmyzsh)</span></span><br><span class="line"><span class="string">• Join our Discord server: $(fmt_underline https://discord.gg/ohmyzsh)</span></span><br><span class="line"><span class="string">• Get stickers, shirts, coffee mugs and other swag: $(fmt_underline https://shop.planetargon.com/collections/oh-my-zsh)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$RESET</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$RUNZSH</span> = no ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;YELLOW&#125;</span>Run zsh to try it out.<span class="variable">$&#123;RESET&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">exec</span> zsh -l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure><p>2 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础入门</title>
      <link href="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-基础入门"><a class="markdownIt-Anchor" href="#redis-基础入门"></a> Redis 基础入门</h1><h2 id="1-什么是nosql"><a class="markdownIt-Anchor" href="#1-什么是nosql"></a> 1 什么是NoSQL</h2><blockquote><p>Not Only SQL</p></blockquote><p><strong>特点</strong></p><ul><li>解耦（数据之间不存在关系）</li><li>方便扩展</li><li>大数据量高性能(一秒写八万，读取11万，细颗粒缓存，性能较高)</li><li>数据类型是多样性的，不需要事先设计数据库，随取随用</li></ul><p><strong>3V+3高</strong></p><ul><li>大数据时代的3V，主要描述问题<ul><li>海量Volume</li><li>多样Variety</li><li>实时Velocity</li></ul></li><li>大数据时代的3高，主要是对程序的要求<ul><li>高并发</li><li>高可扩</li><li>高性能</li></ul></li></ul><p><strong>为什么单线程还这么快</strong></p><blockquote><p>核心：redis是将所有的数据全部放到内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换会耗时）对于内存系统来说，如果没有上下文切换效率就是最高，多次读写在一个CPU上</p></blockquote><h2 id="2-nosql的四大分类"><a class="markdownIt-Anchor" href="#2-nosql的四大分类"></a> 2 NoSQL的四大分类</h2><p><strong>KV键值对</strong></p><p><strong>文档型数据库（bson格式）</strong></p><ul><li>NongoDB<ul><li>基于分布式文件存储的数据库，C++编写，主要处理大量文档</li><li>是关系型数据库和非关系型数据库的中间产品，MongoDB是非关系型数据库功能最丰富，最像关系型数据库的</li></ul></li><li>ConthDB</li></ul><p><strong>列存储数据库</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图关系数据库</strong></p><ul><li>存放关系，如社交网络，广告推荐</li><li>Neo4j，InfoGrid</li></ul><h2 id="3-redis"><a class="markdownIt-Anchor" href="#3-redis"></a> 3 Redis</h2><h3 id="1-概述"><a class="markdownIt-Anchor" href="#1-概述"></a> 1 概述</h3><p><strong>Redis是什么</strong></p><blockquote><p>Redis是远程字典服务，key-value数据库，并提供多种语言的API,</p><p>Redis是单线程的！Redis基于内存操作，CPU不是Redis性能瓶颈，Redis瓶颈是根据机器的内存和网络带宽，</p></blockquote><p><strong>Redis的功能</strong></p><ul><li>内存存储、持久化（rdb,aof）</li><li>效率高，可以高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器，计数器（微信微博，浏览量）</li></ul><p><strong>Redis的特性</strong></p><ul><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事物</li></ul><h3 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2 安装</h3><h4 id="1-linux-安装"><a class="markdownIt-Anchor" href="#1-linux-安装"></a> 1 Linux 安装</h4><p>略</p><h4 id="2-docker-安装"><a class="markdownIt-Anchor" href="#2-docker-安装"></a> 2 Docker 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull redis </span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir -p /home/docker/redis/conf</span><br><span class="line">mkdir -p /home/docker/redis/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /home/docker/redis/conf</span><br><span class="line">vim redis.conf</span><br><span class="line">-----------------</span><br><span class="line"><span class="comment"># 开启远程访问</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1 </span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="comment"># 开启数据持久化</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># 设置访问密码</span></span><br><span class="line">requirepass 123456 </span><br><span class="line">------------------</span><br><span class="line"><span class="comment"># 创建容器并启动</span></span><br><span class="line">docker run --name redis -p 6379:6379 -v /home/docker/redis/data:/data -v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-redis-benchmark性能测试"><a class="markdownIt-Anchor" href="#3-redis-benchmark性能测试"></a> 3 redis-benchmark性能测试</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201226220537474.png" alt="图片来自菜鸟教程"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接 100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 1000000</span><br></pre></td></tr></table></figure><h3 id="4-基础"><a class="markdownIt-Anchor" href="#4-基础"></a> 4 基础</h3><blockquote><p>redis默认16个数据库（配置文件配置），默认使用第一个数据库可以通过select 切换数据库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">127.0.0.1:6379&gt; select 2</span><br><span class="line"><span class="comment"># 查看大小</span></span><br><span class="line">127.0.0.1:6379[2]&gt; DBSIZE</span><br><span class="line"><span class="comment"># 查看所有的key</span></span><br><span class="line">127.0.0.1:6379[2]&gt; keys *</span><br><span class="line"><span class="comment"># 清空数据库</span></span><br><span class="line">127.0.0.1:6379[2]&gt; flushdb</span><br><span class="line"><span class="comment"># 清除所有数据库</span></span><br><span class="line">127.0.0.1:6379[2]&gt; flush moall</span><br><span class="line"><span class="comment"># 判断是否存在</span></span><br><span class="line">EXISTS &lt;key&gt;</span><br><span class="line"><span class="comment"># 移除</span></span><br><span class="line">move &lt;key&gt; 1 (1代表当前数据库)</span><br><span class="line"><span class="comment"># 设置过期时间</span></span><br><span class="line">EXPIRE &lt;key&gt; &lt;seconds&gt;</span><br><span class="line"><span class="comment"># 查看当前key的剩余时间</span></span><br><span class="line">ttl &lt;key&gt;</span><br><span class="line"><span class="comment"># 查看当前key的类型</span></span><br><span class="line"><span class="built_in">type</span> &lt;key&gt;</span><br></pre></td></tr></table></figure><h3 id="5-数据类型"><a class="markdownIt-Anchor" href="#5-数据类型"></a> 5 数据类型</h3><h4 id="1-string"><a class="markdownIt-Anchor" href="#1-string"></a> 1 String</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 追加字符串,如果当前key不存在就创建key</span></span><br><span class="line">APPPEND &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 查看长度</span></span><br><span class="line">STRLEN &lt;key&gt;</span><br><span class="line"><span class="comment"># 自增命令 自增 1</span></span><br><span class="line">incr &lt;key&gt; </span><br><span class="line"><span class="comment"># 自减命令 自减 1</span></span><br><span class="line">decr &lt;key&gt;</span><br><span class="line"><span class="comment"># 自增设置步长</span></span><br><span class="line">INCRBY &lt;key&gt; &lt;increment&gt;</span><br><span class="line"><span class="comment"># 自减设置步长</span></span><br><span class="line">DECRBY &lt;key&gt; &lt;increment&gt;</span><br><span class="line"><span class="comment"># 截取字符串 </span></span><br><span class="line">GETRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt;</span><br><span class="line"><span class="comment"># 截取 Hello world 字符串</span></span><br><span class="line">GETRANGE a 0 4 Hell</span><br><span class="line"><span class="comment"># 获取全部字符</span></span><br><span class="line">GETRANGE a 0 -1</span><br><span class="line"><span class="comment"># 替换指定位置开始的字符串</span></span><br><span class="line">SETRANGE &lt;key&gt; &lt;start&gt; &lt;str&gt;</span><br><span class="line"><span class="comment"># setex &lt;&gt; (set with expire ) 设置过期时间</span></span><br><span class="line">setex </span><br><span class="line"><span class="comment"># setnx (set if not exist) 不存在就设置 (分布式锁中会常常使用)</span></span><br><span class="line">setnx &lt;k&gt; &lt;v&gt;</span><br><span class="line"><span class="comment"># 批量 set (原子性操作)</span></span><br><span class="line">mset &lt;key&gt; &lt;v1&gt; &lt;k2&gt; &lt;v2&gt;</span><br><span class="line"><span class="comment"># 批量 get</span></span><br><span class="line">mget &lt;k1&gt; &lt;k2&gt; &lt;k3&gt;</span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="built_in">set</span> user:1 &#123;name:1,age:3&#125; <span class="comment"># 设置user对象值位json</span></span><br><span class="line"><span class="comment"># 巧妙的使用mset替换对象对应的字符串</span></span><br><span class="line">mset user:1:name 1 user:1:age 3</span><br><span class="line">mget user:1:name user:1:age </span><br><span class="line"><span class="comment"># getset 命令 如果存在就返回旧的值,设置新的值,不存在就返回null,设置新的值</span></span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存</li></ul><h4 id="2-list"><a class="markdownIt-Anchor" href="#2-list"></a> 2 List</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将一个值,或者多个值,插入到表头</span></span><br><span class="line">LPUSH &lt;key&gt; 1 2 3 </span><br><span class="line"><span class="comment"># 将一个值或多个值插入表尾</span></span><br><span class="line">RPUSH &lt;key&gt; 4 5 6</span><br><span class="line"><span class="comment"># 查询所有的值</span></span><br><span class="line">LRANGE &lt;key&gt; 0 -1</span><br><span class="line"><span class="comment"># 左边移除第一个元素</span></span><br><span class="line">LPOP &lt;key&gt;</span><br><span class="line"><span class="comment"># 移除最后一个元素</span></span><br><span class="line">RPOP &lt;key&gt;</span><br><span class="line"><span class="comment"># 根据数组下标获取指定的值</span></span><br><span class="line">LINDEX &lt;key&gt; &lt;index&gt;</span><br><span class="line"><span class="comment"># 获取list长度</span></span><br><span class="line">LLEN &lt;key&gt;</span><br><span class="line"><span class="comment"># 移除指定的值</span></span><br><span class="line">LREM list &lt;移除个数&gt; &lt;对应value&gt;</span><br><span class="line">LREM list 1 one</span><br><span class="line"><span class="comment"># 截取指定返回的list</span></span><br><span class="line">LTRIM &lt;key&gt; &lt;start&gt; &lt;end&gt;</span><br><span class="line"><span class="comment"># 例如 a,b,c,d 截取 2,3 则为 a bs</span></span><br><span class="line"><span class="comment"># 移除并添加命令 从一个list 转移到另一个list</span></span><br><span class="line">rpoplpush &lt;<span class="built_in">source</span>&gt; &lt;dest&gt;</span><br><span class="line"><span class="comment"># 将列表中指定下标的值替换为新的值,如果不存在key就会报错，存在就没有问题</span></span><br><span class="line">lset &lt;key&gt; &lt;newVlue&gt;</span><br><span class="line"><span class="comment"># 将某一个具体的value，插入list中某个value的前面或者后面</span></span><br><span class="line">linsert &lt;key&gt; &lt;before|after&gt; &lt;value&gt; &lt;new value&gt;</span><br></pre></td></tr></table></figure><h4 id="3-set"><a class="markdownIt-Anchor" href="#3-set"></a> 3 Set</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set集合添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看set的成员</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定value在不在set集合中</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除set中指定的元素</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机抽选中一个或多个 元素</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 1</span><br><span class="line">1) <span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 1</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 1</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 随机删除set集合中的元素</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="comment"># 将一个指定的值移动到另一个结合中</span></span><br><span class="line">smove myset myset2 <span class="string">&quot;111&quot;</span></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">sinter &lt;key1&gt; &lt;key2&gt;</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">sdiff &lt;key1&gt; &lt;key2&gt;</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">sunion &lt;key1&gt; &lt;key2&gt; <span class="comment"># 共同好友</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><ul><li>共同爱好，共同关注，推荐好友</li></ul><h4 id="4-hash"><a class="markdownIt-Anchor" href="#4-hash"></a> 4 Hash</h4><blockquote><p>Map集合</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash f1 111 f2 222 f3 333 </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个字段值 </span></span><br><span class="line">127.0.0.1:6379&gt; hget myhash f1</span><br><span class="line"><span class="string">&quot;111&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置多个字段值</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash f4 444</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取全部字段值</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;f1&quot;</span></span><br><span class="line">2) <span class="string">&quot;111&quot;</span></span><br><span class="line">3) <span class="string">&quot;f2&quot;</span></span><br><span class="line">4) <span class="string">&quot;222&quot;</span></span><br><span class="line">5) <span class="string">&quot;f3&quot;</span></span><br><span class="line">6) <span class="string">&quot;333&quot;</span></span><br><span class="line">7) <span class="string">&quot;f4&quot;</span></span><br><span class="line">8) <span class="string">&quot;444&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个字段值</span></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash f1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;f2&quot;</span></span><br><span class="line">2) <span class="string">&quot;222&quot;</span></span><br><span class="line">3) <span class="string">&quot;f3&quot;</span></span><br><span class="line">4) <span class="string">&quot;333&quot;</span></span><br><span class="line">5) <span class="string">&quot;f4&quot;</span></span><br><span class="line">6) <span class="string">&quot;444&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取hash的字段数量</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断hash中的key是否存在</span></span><br><span class="line">127.0.0.1:6379&gt; hexists myhash f1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只获取所有的filed字段</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash</span><br><span class="line">1) <span class="string">&quot;f2&quot;</span></span><br><span class="line">2) <span class="string">&quot;f3&quot;</span></span><br><span class="line">3) <span class="string">&quot;f4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只获取所有的value字段</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash</span><br><span class="line">1) <span class="string">&quot;222&quot;</span></span><br><span class="line">2) <span class="string">&quot;333&quot;</span></span><br><span class="line">3) <span class="string">&quot;444&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定增量</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash f2 1</span><br><span class="line">(<span class="built_in">integer</span>) 223</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果存在就设置</span></span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash f4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><ul><li>用户信息保存</li><li>适合对象存储</li></ul><h4 id="5-zset"><a class="markdownIt-Anchor" href="#5-zset"></a> 5 Zset</h4><blockquote><p>有序的set</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加值 </span></span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 显示全部的数据 可以指定范围</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myzset -inf +inf </span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示小于100的数据</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myzset -inf 100 </span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrem myzhash f1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取有序集合中的个数</span></span><br><span class="line">127.0.0.1:6379&gt; zcard myzhash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从大到小排序</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange myzhash 0 -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得指定区间的成员数量</span></span><br><span class="line">127.0.0.1:6379&gt; zcpunt myzhash 0 3</span><br></pre></td></tr></table></figure><p><strong>场景</strong></p><ul><li>消息，带权重判断</li><li>排行榜</li><li>TOP N</li></ul><h4 id="6-geospatial"><a class="markdownIt-Anchor" href="#6-geospatial"></a> 6 geospatial</h4><blockquote><p>地理位置，附近的人</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.40 beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing</span><br><span class="line">   1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.40000099577971326&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位距离(千米)</span></span><br><span class="line">geodist china:city beijing shanghai km</span><br><span class="line"></span><br><span class="line"><span class="comment"># “附近的人” 以给定的经纬度为圆心找到附近的</span></span><br><span class="line"><span class="comment"># 查询110 30 为圆心 半径1000km的key</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km</span><br><span class="line">1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">2) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line"><span class="comment"># 附加直线距离信息</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km withdist</span><br><span class="line">1) 1) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">   2) <span class="string">&quot;977.5143&quot;</span></span><br><span class="line"><span class="comment"># 附加经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km withcoord</span><br><span class="line"><span class="comment"># 限制数量</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km withcoord count 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#  找出指定元素的其他元素</span></span><br><span class="line">georadiusbymember china：city beijing 1000 km</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二维经纬度转化为一位的hash，字符串越接近，距离越近</span></span><br><span class="line">genhash china:city beijing chongqing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Zset操作geo</span></span><br><span class="line">zrange china:city 0 -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素</span></span><br><span class="line">zrem china:city beijing</span><br></pre></td></tr></table></figure><h4 id="7-hyperloglog"><a class="markdownIt-Anchor" href="#7-hyperloglog"></a> 7 Hyperloglog</h4><blockquote><p>基数统计。内存小，2^64不同的元素，需要12kb内存，有0.81%的错误率</p></blockquote><p><strong>什么是基数？</strong></p><blockquote><p>不重复的元素</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建第一组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey2 1  3  5  7  9 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 统计基数数量</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line"><span class="comment"># 合并两组</span></span><br><span class="line">127.0.0.1:6379&gt; pfmerge mykey3 mykey1 mykey2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey3</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><h4 id="8-bitmaps"><a class="markdownIt-Anchor" href="#8-bitmaps"></a> 8 Bitmaps</h4><blockquote><p>位存储，数据结构，操作二进制来进行记录，只有0和1两种状态</p></blockquote><p><strong>应用</strong></p><ul><li>统计用户信息，活跃，不活跃</li><li>登录，未登录</li><li>两个状态的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记录打卡状态</span></span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 查看某一天打卡没</span></span><br><span class="line">127.0.0.1:6379&gt; getbit sign 2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 统计打卡记录</span></span><br><span class="line">127.0.0.1:6379&gt; bitcount sign</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h3 id="6-事务"><a class="markdownIt-Anchor" href="#6-事务"></a> 6 事务</h3><blockquote><p>Redis单条命令是保存原子性的，但是事物不保证原子性</p><p>Redis事物的本质是一组命令的集合，一个事物中的所有命令都会被序列化，按照顺序执行</p><p>一次性、顺序性、排他行</p><p>Redis事物没有隔离级别的概念</p></blockquote><p><strong>redis事务</strong></p><ul><li>开启事务（multi）</li><li>命令入队(…)</li><li>执行事务(exec)</li></ul><h4 id="1-执行事务"><a class="markdownIt-Anchor" href="#1-执行事务"></a> 1 执行事务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi 开启事物</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 1 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 2 2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 3 3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> 执行事物</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br></pre></td></tr></table></figure><h4 id="2-取消事务"><a class="markdownIt-Anchor" href="#2-取消事务"></a> 2 取消事务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DISCARD 事务中的队列都不会执行</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 4 4 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 5 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard</span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-命令有错事务中所有的命令都不会被执行"><a class="markdownIt-Anchor" href="#3-命令有错事务中所有的命令都不会被执行"></a> 3 命令有错，事务中所有的命令都不会被执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 1 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 2 2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 3 3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset 8</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 5 5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-事务存在语法性执行命令的时候其他命令是可以正常执行的错误的命令会抛出异常"><a class="markdownIt-Anchor" href="#4-事务存在语法性执行命令的时候其他命令是可以正常执行的错误的命令会抛出异常"></a> 4 事务存在语法性，执行命令的时候，其他命令是可以正常执行的，错误的命令会抛出异常</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 1 <span class="string">&quot;adasd&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr 1 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 2 2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-乐观锁"><a class="markdownIt-Anchor" href="#7-乐观锁"></a> 7 乐观锁</h3><blockquote><ul><li>乐观，认为什么时候都不会出现问题，所以不会上锁，更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul></blockquote><p><strong>正常情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><p>多线程修改值之后，监视失败，使用watch可以当做redis的乐观锁操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unwatch  <span class="comment"># 如果事物执行失败就先解锁</span></span><br><span class="line">watch money <span class="comment"># 获取最新的值进行监视</span></span><br></pre></td></tr></table></figure><h3 id="8-jedis"><a class="markdownIt-Anchor" href="#8-jedis"></a> 8 Jedis</h3><blockquote><p>官网推荐的Java连接工具</p></blockquote><h4 id="1-事物"><a class="markdownIt-Anchor" href="#1-事物"></a> 1 事物</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;42.193.118.181&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jedis.set(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行事物</span></span><br><span class="line">    multi.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// 放弃事物</span></span><br><span class="line">    multi.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="9-springboot整合"><a class="markdownIt-Anchor" href="#9-springboot整合"></a> 9 SpringBoot整合</h3><blockquote><p>SpringBoot 2.X之后，jedis被替换了为lettuce</p><p>jedis采用直连，多个线程操作的话是不安全的，如果想要避免不安全，使用jedispoolianjiechi1，bio</p><p>lettuce：采用netty，实例可以再多个线程中共享，不存在线程不安全的情况，可以减少线程数据NIO</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>源码配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>序列化</strong></p><blockquote><p>如果对象不实现Serializable接口直接写入会报错</p></blockquote><h4 id="1-自定义redistemplate"><a class="markdownIt-Anchor" href="#1-自定义redistemplate"></a> 1 自定义RedisTemplate</h4><p><strong>略</strong></p><h3 id="10-redisconf详解"><a class="markdownIt-Anchor" href="#10-redisconf详解"></a> 10 redis.conf详解</h3><h4 id="1-设置密码"><a class="markdownIt-Anchor" href="#1-设置密码"></a> 1 设置密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取密码</span></span><br><span class="line">config get requirepass</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">auth 123456</span><br></pre></td></tr></table></figure><blockquote><p>redis配置文件对大小写不敏感</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同redis server可以使用同一个模版配置作为主配置，并引用其它配置文件用于本server的个性# 化设置</span></span><br><span class="line"><span class="comment"># include并不会被CONFIG REWRITE命令覆盖。但是主配置文件的选项会被覆盖。</span></span><br><span class="line"><span class="comment"># 想故意覆盖主配置的话就把include放文件前面，否则最好放末尾</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 网络 #########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定bind的话redis将会监听所有网络接口。这个配置是肯定需要指定的。</span></span><br><span class="line"><span class="comment"># Examples:</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1</span></span><br><span class="line"><span class="comment"># 下面这个配置是只允许本地客户端访问。</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启保护模式。默认开启，如果没有设置bind项的ip和redis密码的话，服务将只允许本地访 问。</span></span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口设置，默认为 6379</span></span><br><span class="line"><span class="comment"># 如果port设置为0 redis将不会监听tcp socket</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在高并发环境下需要一个高backlog值来避免慢客户端连接问题。注意Linux内核默默将这个值减小到/proc/sys/net/core/somaxconn的值，所以需要确认增大somaxconn和tcp_max_syn_backlog 两个值来达到需要的效果。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定用来监听Unix套套接字的路径。没有默认值，没有指定的情况下Redis不会监听Unix socket</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端空闲多少秒后关闭连接（0为不关闭）timeout 0# tcp-keepalive设置。如果非零，则设置SO_KEEPALIVE选项来向空闲连接的客户端发送ACK，用途如下：</span></span><br><span class="line"><span class="comment"># 1）能够检测无响应的对端</span></span><br><span class="line"><span class="comment"># 2）让该连接中间的网络设备知道这个连接还存活</span></span><br><span class="line"><span class="comment"># 在Linux上，这个指定的值(单位秒)就是发送ACK的时间间隔。</span></span><br><span class="line"><span class="comment"># 注意：要关闭这个连接需要两倍的这个时间值。</span></span><br><span class="line"><span class="comment"># 在其他内核上这个时间间隔由内核配置决定# 从redis3.2.1开始默认值为300秒</span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 通用 #########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否将Redis作为守护进程运行。如果需要的话配置成&#x27;yes&#x27;</span></span><br><span class="line"><span class="comment"># 注意配置成守护进程后Redis会将进程号写入文件/var/run/redis.pid</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否通过upstart或systemd管理守护进程。默认no没有服务监控，其它选项有upstart, systemd, auto</span></span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line"><span class="comment"># pid文件在redis启动时创建，退出时删除。最佳实践为配置该项。</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志级别。选项有debug, verbose, notice, warning</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志名称。空字符串表示标准输出。注意如果redis配置为后台进程，标准输出中信息会发送到/dev/null</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启动系统日志记录。</span></span><br><span class="line"><span class="comment"># syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定系统日志身份。</span></span><br><span class="line"><span class="comment"># syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定syslog设备。必须是user或LOCAL0 ~ LOCAL7之一。</span></span><br><span class="line"><span class="comment"># syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库个数。默认数据库是 DB 0</span></span><br><span class="line"><span class="comment"># 可以通过SELECT where dbid is a number between 0 and &#x27;databases&#x27;-1为每个连接使用不同的数据库。</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示log</span></span><br><span class="line">always-show-logo yes</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 备份  #########################</span></span><br><span class="line"><span class="comment"># 持久化设置:</span></span><br><span class="line"><span class="comment"># 下面的例子将会进行把数据写入磁盘的操作:</span></span><br><span class="line"><span class="comment">#  900秒（15分钟）之后，且至少1次变更 进行持久化操作</span></span><br><span class="line"><span class="comment">#  300秒（5分钟）之后，且至少10次变更 进行持久化操作</span></span><br><span class="line"><span class="comment">#  60秒之后，且至少10000次变更 进行持久化操作</span></span><br><span class="line"><span class="comment"># 不写磁盘的话就把所有 &quot;save&quot; 设置注释掉就行了。</span></span><br><span class="line"><span class="comment"># 通过添加一条带空字符串参数的save指令也能移除之前所有配置的save指令，如: save &quot;&quot;</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下如果上面配置的RDB模式开启且最后一次的保存失败，redis 将停止接受写操作，让用户知道问题的发生。</span></span><br><span class="line"><span class="comment"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。如果有其它监控方式也可关闭。</span></span><br><span class="line"><span class="comment"># 持久化操作出错了,是否需要继续工作</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在备份.rdb文件时是否用LZF压缩字符串，默认设置为yes。如果想节约cpu资源可以把它设置为no。</span></span><br><span class="line"><span class="comment"># 是否压缩rdb文件</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为版本5的RDB有一个CRC64算法的校验和放在了文件的末尾。这将使文件格式更加可靠,</span></span><br><span class="line"><span class="comment"># 但在生产和加载RDB文件时，这有一个性能消耗(大约10%)，可以关掉它来获取最好的性能。</span></span><br><span class="line"><span class="comment"># 生成的关闭校验的RDB文件有一个0的校验和，它将告诉加载代码跳过检查rdbchecksum yes</span></span><br><span class="line"><span class="comment"># rdb文件名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存rdb文件的时候,进行校验检查</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份文件目录，文件名就是上面的 &quot;dbfilename&quot; 的值。累加文件也放这里。</span></span><br><span class="line"><span class="comment"># 注意你这里指定的必须是目录，不是文件名。</span></span><br><span class="line">dir /Users/wuji/redis_data/</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 主从同步 #########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从同步配置。</span></span><br><span class="line"><span class="comment"># 1) redis主从同步是异步的，但是可以配置在没有指定slave连接的情况下使master停止写入数据。</span></span><br><span class="line"><span class="comment"># 2) 连接中断一定时间内，slave可以执行部分数据重新同步。</span></span><br><span class="line"><span class="comment"># 3) 同步是自动的，slave可以自动重连且同步数据。</span></span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master连接密码</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当一个slave失去和master的连接，或者同步正在进行中，slave的行为有两种可能：</span></span><br><span class="line"><span class="comment"># 1) 如果 slave-serve-stale-data 设置为 &quot;yes&quot; (默认值)，slave会继续响应客户端请求，可能是正常数据，也可能是还没获得值的空数据。</span></span><br><span class="line"><span class="comment"># 2) 如果 slave-serve-stale-data 设置为 &quot;no&quot;，slave会回复&quot;正在从master同步（SYNC with master in progress）&quot;来处理各种请求，除了 INFO 和 SLAVEOF 命令。</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以配置salve实例是否接受写操作。可写的slave实例可能对存储临时数据比较有用(因为写入salve# 的数据在同master同步之后将很容被删除)，但是如果客户端由于配置错误在写入时也可能产生一些问题。</span></span><br><span class="line"><span class="comment"># 从Redis2.6默认所有的slave为只读</span></span><br><span class="line"><span class="comment"># 注意:只读的slave不是为了暴露给互联网上不可信的客户端而设计的。它只是一个防止实例误用的保护层。</span></span><br><span class="line"><span class="comment"># 一个只读的slave支持所有的管理命令比如config,debug等。为了限制你可以用&#x27;rename-command&#x27;来隐藏所有的管理和危险命令来增强只读slave的安全性。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步策略: 磁盘或socket，默认磁盘方式</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果非磁盘同步方式开启，可以配置同步延迟时间，以等待master产生子进程通过socket传输RDB数据给slave。</span></span><br><span class="line"><span class="comment"># 默认值为5秒，设置为0秒则每次传输无延迟。</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave根据指定的时间间隔向master发送ping请求。默认10秒。</span></span><br><span class="line"><span class="comment"># repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步的超时时间</span></span><br><span class="line"><span class="comment"># 1）slave在与master SYNC期间有大量数据传输，造成超时</span></span><br><span class="line"><span class="comment"># 2）在slave角度，master超时，包括数据、ping等</span></span><br><span class="line"><span class="comment"># 3）在master角度，slave超时，当master发送REPLCONF ACK pings# 确保这个值大于指定的repl-ping-slave-period，否则在主从间流量不高时每次都会检测到超时</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在slave套接字发送SYNC之后禁用 TCP_NODELAY</span></span><br><span class="line"><span class="comment"># 如果选择yes，Redis将使用更少的TCP包和带宽来向slaves发送数据。但是这将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒。</span></span><br><span class="line"><span class="comment"># 如果选择no，数据传输到salve的延迟将会减少但要使用更多的带宽。</span></span><br><span class="line"><span class="comment"># 默认我们会为低延迟做优化，但高流量情况或主从之间的跳数过多时，可以设置为“yes”。</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据备份的backlog大小。backlog是一个slave在一段时间内断开连接时记录salve数据的缓冲，所以一个slave在重新连接时，不必要全量的同步，而是一个增量同步就足够了，将在断开连接的这段# 时间内把slave丢失的部分数据传送给它。</span></span><br><span class="line"><span class="comment"># 同步的backlog越大，slave能够进行增量同步并且允许断开连接的时间就越长。</span></span><br><span class="line"><span class="comment"># backlog只分配一次并且至少需要一个slave连接。</span></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当master在一段时间内不再与任何slave连接，backlog将会释放。以下选项配置了从最后一个</span></span><br><span class="line"><span class="comment"># slave断开开始计时多少秒后，backlog缓冲将会释放。</span></span><br><span class="line"><span class="comment"># 0表示永不释放backlog</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slave的优先级是一个整数展示在Redis的Info输出中。如果master不再正常工作了，sentinel将用它来选择一个slave提升为master。</span></span><br><span class="line"><span class="comment"># 优先级数字小的salve会优先考虑提升为master，所以例如有三个slave优先级分别为10，100，25，sentinel将挑选优先级最小数字为10的slave。</span></span><br><span class="line"><span class="comment"># 0作为一个特殊的优先级，标识这个slave不能作为master，所以一个优先级为0的slave永远不会被# sentinel挑选提升为master。</span></span><br><span class="line"><span class="comment"># 默认优先级为100</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果master少于N个延时小于等于M秒的已连接slave，就可以停止接收写操作。</span></span><br><span class="line"><span class="comment"># N个slave需要是“oneline”状态。</span></span><br><span class="line"><span class="comment"># 延时是以秒为单位，并且必须小于等于指定值，是从最后一个从slave接收到的ping（通常每秒发送）开始计数。</span></span><br><span class="line"><span class="comment"># 该选项不保证N个slave正确同步写操作，但是限制数据丢失的窗口期。</span></span><br><span class="line"><span class="comment"># 例如至少需要3个延时小于等于10秒的slave用下面的指令：</span></span><br><span class="line"><span class="comment"># min-slaves-to-write 3</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两者之一设置为0将禁用这个功能。</span></span><br><span class="line"><span class="comment"># 默认 min-slaves-to-write 值是0（该功能禁用）并且 min-slaves-max-lag 值是10。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 安全 #########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求客户端在处理任何命令时都要验证身份和密码。</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令重命名</span></span><br><span class="line"><span class="comment"># 在共享环境下，可以为危险命令改变名字。比如，你可以为 CONFIG 改个其他不太容易猜到的名字，这样内部的工具仍然可以使用。</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="comment"># 也可以通过改名为空字符串来完全禁用一个命令</span></span><br><span class="line"><span class="comment"># rename-command CONFIG &quot;&quot;</span></span><br><span class="line"><span class="comment"># 请注意：改变命令名字被记录到AOF文件或被传送到从服务器可能产生问题。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 限制 客户端#########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最多同时连接的客户端数量。默认这个限制是10000个客户端，然而如果Redis服务器不能配置</span></span><br><span class="line"><span class="comment"># 处理文件的限制数来满足指定的值，那么最大的客户端连接数就被设置成当前文件限制数减32（因为Redis服务器保留了一些文件描述符作为内部使用）</span></span><br><span class="line"><span class="comment"># 一旦达到这个限制，Redis会关闭所有新连接并发送错误&#x27;max number of clients reached&#x27;</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要使用比设置的上限更多的内存。一旦内存使用达到上限，Redis会根据选定的回收策略（参见：maxmemmory-policy）删除key。</span></span><br><span class="line"><span class="comment"># 如果因为删除策略Redis无法删除key，或者策略设置为 &quot;noeviction&quot;，Redis会回复需要更多内存的错误信息给命令。例如，SET,LPUSH等等，但是会继续响应像Get这样的只读命令。</span></span><br><span class="line"><span class="comment"># 在使用Redis作为LRU缓存，或者为实例设置了硬性内存限制的时候（使用 &quot;noeviction&quot; 策略）</span></span><br><span class="line">的时候，这个选项通常事很有用的。</span><br><span class="line"><span class="comment"># 警告：当有多个slave连上达到内存上限时，master为同步slave的输出缓冲区所需内存不计算在使用内存中。这样当移除key时，就不会因网络问题 / 重新同步事件触发移除key的循环，反过来slaves的输出缓冲区充满了key被移除的DEL命令，这将触发删除更多的key，直到这个数据库完全被清空为止。</span></span><br><span class="line"><span class="comment"># 总之，如果你需要附加多个slave，建议你设置一个稍小maxmemory限制，这样系统就会有空闲的内存作为slave的输出缓存区(但是如果最大内存策略设置为&quot;noeviction&quot;的话就没必要了)</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大内存策略：如果达到内存限制了，Redis如何选择删除key。</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; 根据LRU算法删除设置过期时间的key</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; 根据LRU算法删除任何key</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; 随机移除设置过过期时间的key</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; 随机移除任何key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; 移除即将过期的key(minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; 不移除任何key，只返回一个写错误</span></span><br><span class="line"><span class="comment"># 注意：对所有策略来说，如果Redis找不到合适的可以删除的key都会在写操作时返回一个错误。# 目前为止涉及的命令：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment"># 默认策略:</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LRU和最小TTL算法的实现都不是很精确，但是很接近（为了省内存），所以你可以用样本量做检测。 例如：默认Redis会检查3个key然后取最旧的那个，你可以通过下面的配置指令来设置样本的个数。</span></span><br><span class="line"><span class="comment"># 默认值为5，数字越大结果越精确但是会消耗更多CPU。</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################### APPEND ONLY MODE ######################### aof</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，Redis是异步的把数据导出到磁盘上。这种模式在很多应用里已经足够好，但Redis进程出问题或断电时可能造成一段时间的写操作丢失(这取决于配置的save指令)。</span></span><br><span class="line"><span class="comment"># AOF是一种提供了更可靠的替代持久化模式，例如使用默认的数据写入文件策略（参见后面的配置）。</span></span><br><span class="line"><span class="comment"># 在遇到像服务器断电或单写情况下Redis自身进程出问题但操作系统仍正常运行等突发事件时，Redis能只丢失1秒的写操作。</span></span><br><span class="line"><span class="comment"># AOF和RDB持久化能同时启动并且不会有问题。</span></span><br><span class="line"><span class="comment"># 如果AOF开启，那么在启动时Redis将加载AOF文件，它更能保证数据的可靠性。</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF文件名（默认：&quot;appendonly.aof&quot;）</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fsync() 系统调用告诉操作系统把数据写到磁盘上，而不是等更多的数据进入输出缓冲区。</span></span><br><span class="line"><span class="comment"># 有些操作系统会真的把数据马上刷到磁盘上；有些则会尽快去尝试这么做。</span></span><br><span class="line"><span class="comment"># Redis支持三种不同的模式：</span></span><br><span class="line"><span class="comment"># no：不要立刻刷，只有在操作系统需要刷的时候再刷。比较快。</span></span><br><span class="line"><span class="comment"># always：每次写操作都立刻写入到aof文件。慢，但是最安全。</span></span><br><span class="line"><span class="comment"># everysec：每秒写一次。折中方案。</span></span><br><span class="line"><span class="comment"># 默认的 &quot;everysec&quot; 通常来说能在速度和数据安全性之间取得比较好的平衡。</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果AOF的同步策略设置成 &quot;always&quot; 或者 &quot;everysec&quot;，并且后台的存储进程（后台存储或写入AOF 日志）会产生很多磁盘I/O开销。某些Linux的配置下会使Redis因为 fsync()系统调用而阻塞很久。</span></span><br><span class="line"><span class="comment"># 注意，目前对这个情况还没有完美修正，甚至不同线程的 fsync() 会阻塞我们同步的write(2)调用。</span></span><br><span class="line"><span class="comment"># 为了缓解这个问题，可以用下面这个选项。它可以在 BGSAVE 或 BGREWRITEAOF 处理时阻止fsync()。</span></span><br><span class="line"><span class="comment"># 这就意味着如果有子进程在进行保存操作，那么Redis就处于&quot;不可同步&quot;的状态。</span></span><br><span class="line"><span class="comment"># 这实际上是说，在最差的情况下可能会丢掉30秒钟的日志数据。（默认Linux设定）</span></span><br><span class="line"><span class="comment"># 如果把这个设置成&quot;yes&quot;带来了延迟问题，就保持&quot;no&quot;，这是保存持久数据的最安全的方式。</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动重写AOF文件。如果AOF日志文件增大到指定百分比，Redis能够通过 BGREWRITEAOF 自动重写AOF日志文件。# 工作原理：Redis记住上次重写时AOF文件的大小（如果重启后还没有写操作，就直接用启动时的AOF大小）</span></span><br><span class="line"><span class="comment"># 这个基准大小和当前大小做比较。如果当前大小超过指定比例，就会触发重写操作。你还需要指定被重写日志的最小尺寸，这样避免了达到指定百分比但尺寸仍然很小的情况还要重写。</span></span><br><span class="line"><span class="comment"># 指定百分比为0会禁用AOF自动重写特性。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设置为yes，如果一个因异常被截断的AOF文件被redis启动时加载进内存，redis将会发送日志通知用户。如果设置为no，erdis将会拒绝启动。此时需要用&quot;redis-check-aof&quot;工具修复文件。</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 集群 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有开启了以下选项，redis才能成为集群服务的一部分</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置redis自动生成的集群配置文件名。确保同一系统中运行的各redis实例该配置文件不要重名。</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群节点超时毫秒数。超时的节点将被视为不可用状态。</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果数据太旧，集群中的不可用master的slave节点会避免成为备用master。如果slave和master失联时间超过:</span></span><br><span class="line"> (node-timeout * slave-validity-factor) + repl-ping-slave-period</span><br><span class="line">则不会被提升为master。</span><br><span class="line"><span class="comment"># 如node-timeout为30秒，slave-validity-factor为10, 默认default repl-ping-slave-period为10秒,失联时间超过310秒slave就不会成为master。</span></span><br><span class="line"><span class="comment"># 较大的slave-validity-factor值可能允许包含过旧数据的slave成为master，同时较小的值可能会阻止集群选举出新master。</span></span><br><span class="line"><span class="comment">#为了达到最大限度的高可用性，可以设置为0，即slave不管和master失联多久都可以提升为master</span></span><br><span class="line"><span class="comment"># cluster-slave-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有在之前master有其它指定数量的工作状态下的slave节点时，slave节点才能提升为master。默认为1（即该集群至少有3个节点，1 master＋2 slaves，master宕机，仍有另外1个slave的情况下其中1个slave可以提升）</span></span><br><span class="line"><span class="comment"># 测试环境可设置为0，生成环境中至少设置为1</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下如果redis集群如果检测到至少有1个hash slot不可用，集群将停止查询数据。</span></span><br><span class="line"><span class="comment"># 如果所有slot恢复则集群自动恢复。</span></span><br><span class="line"><span class="comment"># 如果需要集群部分可用情况下仍可提供查询服务，设置为no。</span></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################### 慢查询日志 #########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢查询日志，记录超过多少微秒的查询命令。查询的执行时间不包括客户端的IO执行和网络通信时间，只是查询命令执行时间。</span></span><br><span class="line"><span class="comment"># 1000000等于1秒，设置为0则记录所有命令</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录大小，可通过SLOWLOG RESET命令重置</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="11-redis-持久化"><a class="markdownIt-Anchor" href="#11-redis-持久化"></a> 11 Redis 持久化</h3><h4 id="1-rdb"><a class="markdownIt-Anchor" href="#1-rdb"></a> 1 RDB</h4><p>生产环境备份rdb</p><p><img src= "/img/loading.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/10939682-807dfdd5195f9d20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="图片来源简书"></p><blockquote><p>在指定的时间间隔中,将内存中的数据集快照写入磁盘,恢复的时候,将快照文件直接读取到内存中</p><p>Redis会单独创建(fork)一个子进程来进行持久化,会线将数据写入到一个临时文件中,待持久化过程都结束了,再用这个临时文件替换上次持久化好的文件,整个过程中,主进程是不做任何IO操作的,这就确保了极高的性能,如果需要进行大规模的数据恢复,且对于数据恢复的完整性不是非常敏感,那RDB的方式要比AOF的方式更加高效,RDB的缺点是最后一次持久化数据可能会丢失</p></blockquote><p><strong>触发机制</strong></p><ul><li>save 的规则满足的情况下,自动出发rdb规则</li><li>执行flushall 命令,也会出发rdb规则</li><li>退出redis也会生成rdb文件</li></ul><p><strong>恢复rdb文件</strong></p><ul><li>只要将rdb文件放在redis的启动目录就可以,redis启动的时候会自动检查dump.rdb恢复其中的数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配文件的位置</span></span><br><span class="line">config get dir</span><br><span class="line"><span class="comment"># 如果在dir目录下存在rdb文件,那么在启动的时候会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ol><li>适合大规模数据恢复</li><li>如果对数据的完整性要求不高</li></ol><p><strong>缺点:</strong></p><ol><li><p>需要一定的时间间隔进程操作,如果redis宕机了,这个最后一次修改的数据就没了</p></li><li><p>fork进程的时候,会占用一定的内容空间</p></li></ol><h4 id="2-aofappend-only-file"><a class="markdownIt-Anchor" href="#2-aofappend-only-file"></a> 2 AOF(Append Only File)</h4><p>将我们的所有命令都记录下来,history,恢复的时候就把这个文件全部执行一遍</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227183918572.png" alt="image-20201227183918572"></p><blockquote><p>以日志的形式记录每个写操作,将Redis执行过的命令记录写来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p></blockquote><p><code>AOF保存的是 appendonly.aof</code></p><p>默认不开启，需要手动配置，将配置文件appendonly改为yes就开启了aof</p><p>如果这个apf文件有错位，redis会启动失败，我们需要修复这个文件</p><p>redis给我们体用了一个工具 <code>redis-check-aof --fix appendonly.aof</code></p><p>如果文件正常，重启就可以恢复</p><blockquote><p>重写规则，如果AOF文件大于64m，太大了，fork一个新的进程来进行文件的重写</p></blockquote><p><strong>优点：</strong></p><ol><li>每一次修改都同步，文件的完整性会更好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率是最高的</li></ol><p><strong>缺点：</strong></p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度也比rdb慢</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h3 id="12-redis订阅发布"><a class="markdownIt-Anchor" href="#12-redis订阅发布"></a> 12 Redis订阅发布</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227201729862.png" alt="image-20201227201729862"></p><blockquote><p>发布订阅（pub/sub）是一种消息通信模式，发送者（pub）发送消息，订阅者（sub）接收消息，微博，微信，Redis客户端可以订阅任意数量的频道</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227202915634.png" alt="image-20201227202915634"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 订阅</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe 1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span> <span class="comment"># 消息频道</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span> </span><br><span class="line">2) <span class="string">&quot;1&quot;</span>  <span class="comment"># 消息频道</span></span><br><span class="line">3) <span class="string">&quot;111&quot;</span><span class="comment"># 具体内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">127.0.0.1:6379&gt; publish 1 111</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><ul><li>聊天室</li><li>公众号</li></ul><h3 id="13-redis集群环境搭建"><a class="markdownIt-Anchor" href="#13-redis集群环境搭建"></a> 13 Redis集群环境搭建</h3><blockquote><p>主从复制，是指将一台 Redis服务器的数据，复制到其他的 Redist服务器。前者称为主节点( master/leader),后者称为从节点<br>( slave/ allowed);数据的复制是单向的，只能由主节点到从节点， Master以写为主， Slave以读为主<br>默认情况下，每台 Redis服务器都是主节点：且一个主节点可以有多个从节点（或没有从节点，但一个从节点只能有一个主节点。</p></blockquote><p><strong>主从复制的作用</strong></p><ul><li>数据冗余: 主从复制实现了数据的热备份,是持久化之外的一种冗余方式</li><li>故障恢复: 当主节点出现问题时,可以由从节点提供服务,实现快速的故障恢复,实际上是一种服务冗余</li><li>负载均衡: 在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis数据时应用连接主节点，读 Redis数时应用连接从节点），分担服务器负載：尤其是在写少读多的场原下，通过多个从节点分担读负载，可以大大提高 Redish服务器的并发量</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redist高可用的基础</li></ul><p>总的来说，要将 Redis运用于工程项目中，只使用一台 Redis!是万万不能的，原因如下<br>1、从结构上，单个 Redis服务器会发生单点故障。，井且一台服务器需要处理所有的请求负载，压力较大<br>2、从容量上，单个 Redis:服务器内存容量有限，就算一台 Redis:服务器内存容量为256G,也不能将所有内存用作 Redis存储内存</p><p>一般来说，单台 Redist最大使用内存不应该超过20G电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写**</p><h4 id="1-环境配置"><a class="markdownIt-Anchor" href="#1-环境配置"></a> 1 环境配置</h4><p>只配置从库,无需配置主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前库的信息</span></span><br><span class="line">127.0.0.1:6379&gt; info replication </span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 没有从机</span></span><br><span class="line">master_replid:27a8d6b5022631dd44b5eb22816560dcd2b2fc68</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line"><span class="comment"># 命令方式</span></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line"><span class="comment"># 默认启动三台机器每一台机器都是一台主机</span></span><br><span class="line"><span class="comment"># 从机输入命令 SLAVEOF ip port 认定主机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line"><span class="comment">#########################</span></span><br><span class="line">replicaof &lt;ip&gt; &lt;port&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的<br>信息！<br>如果是使用命令行来配置的主从，这个时如果重启了，就会变回<strong>主机！只要变为从机，立马就会从主机中获取值</strong></p></blockquote><p><strong>复制原理</strong><br>Slave启动成功连接到 master 后会发送一个sync同步命令，Master接到命令，启动后台的存盘进程，同时枚集所有接收到的用于修改数据集命令，在后台进程执行完毕之后， master将传送整个数据文件到ave,并完成一次完全同步<br><strong>全量复制</strong>：</p><p>​而 slave服务在接收到数据库文件数后，将其存盘井加载到内存中<br><strong>增量复制：</strong></p><p>​ Master继续将新的所有收集到的修改命令依次传给slave,完成同步<br>但是只要是重新连接 master,一次完全同步（全量复制）将被自动执行</p><h4 id="2-宕机后手动配置主机"><a class="markdownIt-Anchor" href="#2-宕机后手动配置主机"></a> 2 宕机后手动配置主机</h4><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof no one <span class="comment"># 从机变成主机命令（即便是主机回来了，变成主机的从机，仍然是主机）</span></span><br></pre></td></tr></table></figure><h4 id="3-哨兵模式"><a class="markdownIt-Anchor" href="#3-哨兵模式"></a> 3 哨兵模式</h4><blockquote><p>当主机挂掉之后，自动推选出一个主机</p></blockquote><blockquote><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切換为主服务器，这就需要人工千预，费事费力，还会造成段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p><p>Redis从2.8开始正式提供了 Sentinel(哨兵）架构来解决这个问题<br>能够后台监控主机是否故障，如果故了根据投票数自动将从库转换为主库。</p><p>消兵模式是一种特殊的模式，首先 Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行，其原理是哨兵通<br>过发送命令，等待 Redis!服务器响应，从而监控运行的多个 Redis实例</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227211940620.png" alt="image-20201227211940620"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227212001656.png" alt="image-20201227212001656"></p><p><strong>这里的哨兵有两个作用</strong><br>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。当哨兵监测到 master宕机，会自动将 slave切換成 master,然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。<br>然而一个哨兵进程对 Redish服务器进行监控，可能会出现问题，为 此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监<br>控，这样就形成了多哨兵模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim sentinel.conf</span><br><span class="line">-------------</span><br><span class="line"><span class="comment"># 配置哨兵配置文件</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;名称&gt;  &lt;ip&gt; &lt;port&gt;  &lt;主机挂机，从机投票，看谁来接替主机，票数最多的成为主机&gt;</span></span><br><span class="line">sentinel nonitor myredis 127.0.0.1 6379 1</span><br><span class="line">-------------</span><br><span class="line"><span class="comment"># 启动哨兵</span></span><br><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure><p>如果主机恢复了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则</p><p><strong>优点：</strong></p><ol><li><p>哨兵集群，基于主从复制模式，具备所有的主从配置优点</p></li><li><p>主从可以切换，故障可以转移，系统的可用性为编号</p></li><li><p>哨兵模式就是主从赋值的升级，手动到自动，更加健壮</p></li></ol><p><strong>缺点</strong>：</p><ol><li>Redis不好在线扩容，集群数量一旦达到上限，在线扩容比较困难</li><li>实现哨兵模式的配置很麻烦，有很多选择</li></ol><h3 id="14-缓存穿透与缓存雪崩"><a class="markdownIt-Anchor" href="#14-缓存穿透与缓存雪崩"></a> 14 缓存穿透与缓存雪崩</h3><p>​Redis缓存的使用，极大的提升了应用程序的性能和效率。，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的<br>问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓， 另外的一些典型问题就是，缓存穿透、缓存雪和线存击穿。目前，业界也都有比较流行的解决方案。</p><h4 id="1-缓存穿透"><a class="markdownIt-Anchor" href="#1-缓存穿透"></a> 1 缓存穿透</h4><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227213614378.png" alt="image-20201227213614378"></p><p>缓存穿透的概念很简单，用户想要查询一个数据，发现 redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次直询失败，当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><h5 id="1-布过滤器"><a class="markdownIt-Anchor" href="#1-布过滤器"></a> 1 布过滤器</h5><p>布过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存<br>储系统的查询压力</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227213657749.png" alt="image-20201227213657749"></p><h5 id="2-缓存空对象"><a class="markdownIt-Anchor" href="#2-缓存空对象"></a> 2  缓存空对象</h5><p>当存储层不命中后，即使返回的空对象也将具缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/26/Redis%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201227213813078.png" alt="image-20201227213813078"></p><p>但是这种方法会存在两个问题<br>1、如果空值能够被存起来，这就意味着缓存要更多的空间存储更多的键，因为这当中可能会有很多的空值的健<br>2、即使对空值设置了过期时间，还是会存在援存层和存储层的数据会有一段时间园口的不一致，这对于需要保持一致性的业务会有影响</p><h4 id="2-缓存击穿"><a class="markdownIt-Anchor" href="#2-缓存击穿"></a> 2 缓存击穿</h4><p>这里需要注意和缓存穿透的区別，缓存击穿，是指一个key非常热点，在不停的扛着大井发，大井发集中对这一个点进行访问，当 这个key在失效的瞬间，持续的大井发就穿破缓存，直接请求数起库，就像在一个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，井且回写缓存，会导致数据库瞬间压力过大</p><h5 id="1-设置热点数据永不过期"><a class="markdownIt-Anchor" href="#1-设置热点数据永不过期"></a> 1 设置热点数据永不过期</h5><p>从缓存层面来看，没有设置过期时间，所以不会出现key过期后产生的问题</p><h5 id="2-加互斥锁"><a class="markdownIt-Anchor" href="#2-加互斥锁"></a> 2 加互斥锁</h5><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后服务，其他线程没有获得分布式的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式，因此对分布式模的考验很大。</p><h4 id="3-缓存雪崩"><a class="markdownIt-Anchor" href="#3-缓存雪崩"></a> 3 缓存雪崩</h4><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效， Redis宕机</p><p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设援存一个小时。那么到了凌晨一点钟的时候，这批商品的援存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴増，造成存储层也会挂掉的情况</p><h5 id="1-redis高可用"><a class="markdownIt-Anchor" href="#1-redis高可用"></a> 1 Redis高可用</h5><p>这个思想的含义是，既然 tredis?有可能挂掉，那我多增设几台 redis,这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群(异地多活！)</p><h5 id="2-限流降级"><a class="markdownIt-Anchor" href="#2-限流降级"></a> 2 限流降级</h5><p>这个解决方案的思想是，在缓存失效后，通过加或者队列来控制读数据库写缓存的线程数量，比如对某个key只允许一个线程查询数据和写缓存，其他线程等待</p><h5 id="3-数据预热"><a class="markdownIt-Anchor" href="#3-数据预热"></a> 3 数据预热</h5><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大井发访问前手动触发加加载缓存存不同的key,设置不同的过期时间，让缓存失效的时间点，尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA集成Docker与远程Debug</title>
      <link href="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/"/>
      <url>/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用dockerfile运行"><a class="markdownIt-Anchor" href="#1-使用dockerfile运行"></a> 1 使用Dockerfile运行</h1><h2 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h2><ul><li><strong>IDEA 2020.1</strong></li><li><strong>Docker服务器 Centos 7</strong></li><li><strong>Docker版本 20.10.1</strong></li><li><strong>JDK 8</strong></li></ul><h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><p>开启Docker远程访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 编辑文件</span></span><br><span class="line">vi /usr/lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># 2 找到 ExecStart 修改为</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class="line"><span class="comment"># 3 使用telnet &lt;ip&gt; &lt;port&gt; 进行测试</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225235204060.png" alt="配置成功图"></p><h2 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225233449444.png" alt="添加Docker"></p><h2 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225233557768.png" alt="选择DockerFile"></p><h2 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225233804019.png" alt="进行配置"></p><h2 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步</h2><p>配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package -U -DskipTest</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225233936031.png" alt="添加"></p><h2 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步</h2><blockquote><p>在根目录创建并写好Dockerfile</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 基础镜像，使用alpine操作系统，openjkd使用8u201</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>u201-jdk-alpine3.<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> LJZ</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统编码</span></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span> LC_ALL=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明一个挂载点，容器内此路径会对应宿主机的某个文件夹</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#应用构建成功后的jar文件被复制到镜像内，名字也改成了app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/demo-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露8080端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-远程调试容器程序"><a class="markdownIt-Anchor" href="#2-远程调试容器程序"></a> 2 远程调试容器程序</h1><blockquote><p>在上一步的基础上进行远程调试</p></blockquote><h2 id="第一步-2"><a class="markdownIt-Anchor" href="#第一步-2"></a> 第一步</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225234307920.png" alt="添加远程调试"></p><h2 id="第二步-2"><a class="markdownIt-Anchor" href="#第二步-2"></a> 第二步</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225234612668.png" alt="配置远程访问"></p><h2 id="第三步-2"><a class="markdownIt-Anchor" href="#第三步-2"></a> 第三步</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/23/Idea-%E9%9B%86%E6%88%90Docker/image-20201225234743281.png" alt="修改配置信息"></p><h2 id="第四步-2"><a class="markdownIt-Anchor" href="#第四步-2"></a> 第四步</h2><p>目前Docker文件配置</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker image for springboot application</span></span><br><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># Author: bolingcavalry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 基础镜像，使用alpine操作系统，openjkd使用8u201</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>u201-jdk-alpine3.<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> LJZ</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统编码</span></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span> LC_ALL=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明一个挂载点，容器内此路径会对应宿主机的某个文件夹</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#应用构建成功后的jar文件被复制到镜像内，名字也改成了app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/demo-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露8080端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器时的进程</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8080&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 入门</title>
      <link href="/2020/12/21/nginx-%E5%85%A5%E9%97%A8/"/>
      <url>/2020/12/21/nginx-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebFlux</title>
      <link href="/2020/12/15/WebFlux/"/>
      <url>/2020/12/15/WebFlux/</url>
      
        <content type="html"><![CDATA[<h1 id="webflux"><a class="markdownIt-Anchor" href="#webflux"></a> WebFlux</h1><p>GitHub Demo</p><h1 id="1-servlet异步"><a class="markdownIt-Anchor" href="#1-servlet异步"></a> 1 Servlet异步</h1><p><strong>1 为什么要使用异步Servlet,Servlet阻塞了什么</strong></p><blockquote><p>增加吞吐量，tomcat容器的servlet线程</p></blockquote><p><strong>2 异步Servlet如何进行工作</strong></p><blockquote></blockquote><h1 id="2-webflux基础"><a class="markdownIt-Anchor" href="#2-webflux基础"></a> 2 WebFlux基础</h1><blockquote><p>reactor=jdk8 stream +jdk9 reactive stream</p></blockquote><h2 id="1-mono"><a class="markdownIt-Anchor" href="#1-mono"></a> 1 Mono</h2><blockquote><p>0-1 个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">testMono</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="string">&quot;Hello Mono&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-flux"><a class="markdownIt-Anchor" href="#2-flux"></a> 2 Flux</h2><blockquote><p>0-N个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义订阅者</span></span><br><span class="line">Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存订阅关系</span></span><br><span class="line">        <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">        <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接受到的数据为&quot;</span> + integer);</span><br><span class="line">        <span class="comment">// 继续请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 或者告诉发布者不再接受数据</span></span><br><span class="line">        <span class="comment">//                this.subscription.cancel();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">        <span class="comment">// 或者告诉发布者不再接受数据</span></span><br><span class="line">        <span class="comment">//                this.subscription.cancel();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;数据处理完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">String[] strs = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">Flux.fromArray(strs).map(Integer::parseInt).subscribe(subscriber);</span><br></pre></td></tr></table></figure><h2 id="3-样例"><a class="markdownIt-Anchor" href="#3-样例"></a> 3 样例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/2&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Flux&lt;String&gt; <span class="title">testFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Flux&lt;String&gt; flux = Flux.fromStream(IntStream.range(<span class="number">1</span>, <span class="number">5</span>).mapToObj(value -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world &quot;</span> + value;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">return</span> flux;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-sseserver-send-events"><a class="markdownIt-Anchor" href="#3-sseserver-send-events"></a> 3 SSE(server-send events)</h1><blockquote><p>H5的SSE,用于服务器向前台推送数据的场景,聊天室等</p></blockquote><h2 id="1-服务端"><a class="markdownIt-Anchor" href="#1-服务端"></a> 1 服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/event-stream&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ; i++) &#123;</span><br><span class="line">        <span class="comment">// 指定事件标志</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;event:me\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 格式 data + 数据 +两个回车</span></span><br><span class="line">response.getWriter().write(<span class="string">&quot;data:&quot;</span>+i+<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-客户端"><a class="markdownIt-Anchor" href="#2-客户端"></a> 2 客户端</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 初始化参数为URL</span></span><br><span class="line">    <span class="comment">// 依赖H5</span></span><br><span class="line">    <span class="keyword">var</span> sse = <span class="keyword">new</span> EventSource(<span class="string">&quot;SSE&quot;</span>);</span><br><span class="line">sse.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;message:&quot;</span>,e.data,e);</span><br><span class="line">    &#125;;</span><br><span class="line">sse.addEvnetListener(<span class="string">&quot;me&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;event:&quot;</span>,e.data);</span><br><span class="line">        <span class="keyword">if</span>(e.data==<span class="number">3</span>)&#123;</span><br><span class="line">            sse.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;   </span><br></pre></td></tr></table></figure><h1 id="4-crud示例"><a class="markdownIt-Anchor" href="#4-crud示例"></a> 4  CRUD示例</h1><h3 id="1-repository"><a class="markdownIt-Anchor" href="#1-repository"></a> 1 Repository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/12/19 17:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ReactiveMongoRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Flux&lt;User&gt; <span class="title">findByAgeBetween</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-controller"><a class="markdownIt-Anchor" href="#2-controller"></a> 2 Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/stream&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">streamFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/&quot;, consumes = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Spring Data Jpa 里面 新增和修改都是 save id为空是新增,id不为空是修改</span></span><br><span class="line">        <span class="comment">// 设置id为空</span></span><br><span class="line">        user.setId(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Void&gt;&gt; deleteUserById(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id) &#123;</span><br><span class="line">        <span class="comment">// 不能判断是否存在</span></span><br><span class="line">        <span class="comment">//        userRepository.deleteById(id);</span></span><br><span class="line">        <span class="comment">// 当你要操作数据,并返回一个Mono,这个时候使用flatMap,如果不操作数据而是转换数据这个时候使用map</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.findById(id).flatMap(user -&gt; userRepository.delete(user)).then(Mono.just(<span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.OK)))</span><br><span class="line">                .defaultIfEmpty(<span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.NOT_FOUND));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;User&gt;&gt; updateUser(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.findById(id).flatMap(u -&gt; &#123;</span><br><span class="line">            u.setAge(user.getAge());</span><br><span class="line">            u.setName(user.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.save(u);</span><br><span class="line">        &#125;).map(u -&gt; <span class="keyword">new</span> ResponseEntity&lt;&gt;(u, HttpStatus.OK)).defaultIfEmpty(<span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/age/&#123;start&#125;/&#123;end&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">findByAge</span><span class="params">(<span class="meta">@PathVariable(&quot;start&quot;)</span> Integer start, <span class="meta">@PathVariable(&quot;end&quot;)</span> Integer end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.findByAgeBetween(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/stream/age/&#123;start&#125;/&#123;end&#125;&quot;,produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">streamFindByAge</span><span class="params">(<span class="meta">@PathVariable(&quot;start&quot;)</span> Integer start, <span class="meta">@PathVariable(&quot;end&quot;)</span> Integer end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.findByAgeBetween(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-routerfunction-模式"><a class="markdownIt-Anchor" href="#5-routerfunction-模式"></a> 5 RouterFunction 模式</h1><blockquote><ol><li>ServerRequest  &lt;-&gt; HttpServletRequest</li><li>ServerResponse  &lt;-&gt; HttpServletResponse</li></ol><p>开发过程</p><p>HandlerFunction（输入ServerRequest返回ServerResponse）</p><ol><li><p>RouterFunction（请求URL和HandlerFunction对应起来）</p></li><li><p>包装成HttpHandler</p></li><li><p>Server处理</p></li></ol></blockquote><h2 id="1-样例"><a class="markdownIt-Anchor" href="#1-样例"></a> 1 样例</h2><h3 id="1-handler"><a class="markdownIt-Anchor" href="#1-handler"></a> 1 Handler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/12/19 21:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">getAllUsers</span><span class="params">(ServerRequest serverRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ok().contentType(MediaType.APPLICATION_JSON).</span><br><span class="line">                body(<span class="keyword">this</span>.userRepository.findAll(), User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">createUser</span><span class="params">(ServerRequest serverRequest)</span> </span>&#123;</span><br><span class="line">        Mono&lt;User&gt; userMono = serverRequest.bodyToMono(User.class);</span><br><span class="line">        <span class="comment">// 注意这里我们不用对Mono进行消费,并且任何时候都不能进行消费,需要Spring框架进行消费</span></span><br><span class="line">        <span class="keyword">return</span> userMono.flatMap(u -&gt; &#123;</span><br><span class="line">            <span class="comment">// 校验代码</span></span><br><span class="line">            CheckUtil.checkName(u.getName());</span><br><span class="line">            <span class="keyword">return</span> ok().contentType(MediaType.APPLICATION_JSON).</span><br><span class="line">                    body(<span class="keyword">this</span>.userRepository.save(u), User.class);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">deleteUserByUserId</span><span class="params">(ServerRequest serverRequest)</span> </span>&#123;</span><br><span class="line">        String id = serverRequest.pathVariable(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userRepository.findById(id).flatMap(u -&gt;</span><br><span class="line">                <span class="keyword">this</span>.userRepository.delete(u).then(ok().build()).switchIfEmpty(notFound().build())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-router"><a class="markdownIt-Anchor" href="#2-router"></a> 2 Router</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/12/19 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllRouters</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RouterFunction&lt;ServerResponse&gt; <span class="title">userRouter</span><span class="params">(UserHandler userHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nest(</span><br><span class="line">                <span class="comment">// 相当于RequestMapping的注释</span></span><br><span class="line">                path(<span class="string">&quot;/user/router&quot;</span>),</span><br><span class="line">                <span class="comment">// 相当于GetMapping等</span></span><br><span class="line">                route(GET(<span class="string">&quot;/&quot;</span>), userHandler::getAllUsers)).</span><br><span class="line">                andRoute(RequestPredicates.POST(<span class="string">&quot;/&quot;</span>), userHandler::createUser).</span><br><span class="line">                andRoute(RequestPredicates.DELETE(<span class="string">&quot;/&quot;</span>), userHandler::deleteUserByUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-参数校验"><a class="markdownIt-Anchor" href="#2-参数校验"></a> 2 参数校验</h2><h3 id="1-handler-2"><a class="markdownIt-Anchor" href="#1-handler-2"></a> 1 Handler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/12/19 22:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 因为有很多默认实现的Handler所以需要调高优先级,让我们的Handler生效</span></span><br><span class="line"><span class="meta">@Order(-2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title">WebExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">handle</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        ServerHttpResponse response = serverWebExchange.getResponse();</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setStatusCode(HttpStatus.BAD_REQUEST);</span><br><span class="line">        <span class="comment">//  设置享应类型</span></span><br><span class="line">        response.getHeaders().setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        String str = toStr(throwable);</span><br><span class="line">        DataBuffer db = response.bufferFactory().wrap(str.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(db));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">toStr</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 已知异常</span></span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 未知异常答应堆栈信息</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发生了异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-client设计"><a class="markdownIt-Anchor" href="#6-client设计"></a> 6 Client设计</h1><h2 id="1-设计思想"><a class="markdownIt-Anchor" href="#1-设计思想"></a> 1 设计思想</h2><blockquote><p>大佬的思想:</p><ol><li><p>程序 = 数据结构+ 算法</p></li><li><p>设计最重要的是解耦，而实现解耦最关键的是设计自己的数据机构 + 抽象接口</p></li></ol></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/15/WebFlux/image-20201219222924014.png" alt="图"></p><h2 id="2-demo"><a class="markdownIt-Anchor" href="#2-demo"></a> 2 demo</h2>]]></content>
      
      
      <categories>
          
          <category> SpringMVC - 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC - WebFlux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 异步模式</title>
      <link href="/2020/12/13/SpringMVC-%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/12/13/SpringMVC-%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-springmvc异步模式"><a class="markdownIt-Anchor" href="#1-springmvc异步模式"></a> 1 SpringMVC异步模式</h1><blockquote><p>Spring的异步请求模式是Spring3.2就推出了，它是基于Servlet3.0规范实现的，而此规范是2011年推出的。</p></blockquote><h2 id="1-springmvc的同步模式"><a class="markdownIt-Anchor" href="#1-springmvc的同步模式"></a> 1 SpringMVC的同步模式</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/SpringMVC-%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/image-20201213174021230.png" alt="image-20201213174021230"></p><blockquote><p>此处需要明晰一个概念：比如tomcat，它既是一个web服务器，同时它也是个servlet后端容器（调ava后端服务），所以要区分清楚这两个概念。请求处理线程是有限的，宝贵的资源~（注意它和处理线程的区别）</p></blockquote><h2 id="2-callable案例"><a class="markdownIt-Anchor" href="#2-callable案例"></a> 2 <strong>Callable</strong>案例</h2><p>1 请求处理线程：处理线程属于Web服务器线程，负责处理用户请求，采用线程池管理</p><p>2 异步线程：异步线程属于用户自定义线程，可采用线程池管理</p><h4 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Callable&lt;Object&gt; <span class="title">testCallable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">    Callable&lt;Object&gt; callable = <span class="keyword">new</span> Callable&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 子线程开始&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 子线程结束&quot;</span>);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ken&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;35&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;local&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> callable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h4><blockquote><p>前端等待5秒后拿到数据，注意：异步模式对前端来说，是无感知的，这是后端的一种技术。所以这个和我们自己开启一个线程处理，立马返回给前端是有非常大的不同的，需要注意~</p></blockquote><p>由此我们可以看出，主线程早早就结束了（需要注意，<strong>此时还并没有把response返回的，此处一定要注意</strong>），真正干事的是子线程（交给<code>TaskExecutor</code>去处理的，后续分析过程中可以看到），它的大致的一个处理流程图可以如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/SpringMVC-%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/image-20201213174039201.png" alt="image-20201213174039201"></p><p>这里能够很直接的看出：我们很大程度上提高了我们<code>请求处理线程</code>的利用率，从而肯定就提高了我们系统的吞吐量。</p><h4 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h4><blockquote><p>当Controller返回值是Callable的时候，Spring就会将Callable交给TaskExecutor去处理（一个隔离的线程池），与此同时将DispatcherServlet里的拦截器、Filter等等都马上退出线程，但是response仍然保持打开的状态，Callable线程处理完成后，Spring MVC讲请求重新派发给容器**（注意这里的重新派发，和拦截器密切相关）**。根据Callabel返回结果，继续处理（比如参数绑定、视图解析等等就和之前一样了）</p></blockquote><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-async-callable">Spring文档介绍</a></p><h2 id="3-webasynctask"><a class="markdownIt-Anchor" href="#3-webasynctask"></a> 3 <strong>WebAsyncTask</strong></h2><blockquote><p>Note that you can also set the default timeout value on a <code>DeferredResult</code>, a <code>ResponseBodyEmitter</code>, and an <code>SseEmitter</code>. For a <code>Callable</code>, you can use <code>WebAsyncTask</code> to provide a timeout value.</p><p>如果我们需要超时处理的回调或者错误处理的回调，我们可以使用<code>WebAsyncTask</code>代替Callable</p></blockquote><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/webasync&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebAsyncTask&lt;Object&gt; <span class="title">testWebAsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">    Callable&lt;Object&gt; callable = <span class="keyword">new</span> Callable&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 子线程开始&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 子线程结束&quot;</span>);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ken&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;35&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;local&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">    WebAsyncTask&lt;Object&gt; webAsyncTask = <span class="keyword">new</span> WebAsyncTask&lt;&gt;(<span class="number">6000</span>, callable);</span><br><span class="line">    <span class="comment">// 注意：onCompletion表示完成，不管你是否超时、是否抛出异常，这个函数都会执行的</span></span><br><span class="line">    webAsyncTask.onCompletion(() -&gt; System.out.println(<span class="string">&quot;程序执行完成&quot;</span>));</span><br><span class="line">    <span class="comment">// 这两个返回的内容，最终都会放进response里面去===========</span></span><br><span class="line">    webAsyncTask.onTimeout(() -&gt; <span class="string">&quot;程序[超时]的回调&quot;</span>);</span><br><span class="line">    <span class="comment">// 备注：这个是Spring5新增的</span></span><br><span class="line">    webAsyncTask.onError(() -&gt; <span class="string">&quot;程序[出现异常]的回调&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> webAsyncTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.context.request.async;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.task.AsyncTaskExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Holder for a &#123;<span class="doctag">@link</span> Callable&#125;, a timeout value, and a task executor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; the value type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAsyncTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 正常执行的函数（通过WebAsyncTask的构造函数可以传进来）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Callable&lt;V&gt; callable;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 处理超时时间（ms），可通过构造函数指定，也可以不指定（不会有超时处理）</span></span><br><span class="line">    <span class="keyword">private</span> Long timeout;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 执行任务的执行器。可以构造函数设置进来，手动指定。</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTaskExecutor executor;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 若设置了，会根据此名称去IoC容器里找这个Bean （和上面二选一）  </span></span><br><span class="line"><span class="comment">// 若传了executorName,请务必调用set方法设置beanFactory</span></span><br><span class="line">    <span class="keyword">private</span> String executorName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"><span class="comment">// 超时的回调</span></span><br><span class="line">    <span class="keyword">private</span> Callable&lt;V&gt; timeoutCallback;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 发生错误的回调</span></span><br><span class="line">    <span class="keyword">private</span> Callable&lt;V&gt; errorCallback;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 完成的回调（不管超时还是错误都会执行）</span></span><br><span class="line">    <span class="keyword">private</span> Runnable completionCallback;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> WebAsyncTask&#125; wrapping the given &#123;<span class="doctag">@link</span> Callable&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable the callable for concurrent handling</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebAsyncTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(callable, <span class="string">&quot;Callable must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> WebAsyncTask&#125; with a timeout value and a &#123;<span class="doctag">@link</span> Callable&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout a timeout value in milliseconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable the callable for concurrent handling</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebAsyncTask</span><span class="params">(<span class="keyword">long</span> timeout, Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(callable);</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> WebAsyncTask&#125; with a timeout value, an executor name, and a &#123;<span class="doctag">@link</span> Callable&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout the timeout value in milliseconds; ignored if &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> executorName the name of an executor bean to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable the callable for concurrent handling</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebAsyncTask</span><span class="params">(<span class="meta">@Nullable</span> Long timeout, String executorName, Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(callable);</span><br><span class="line">        Assert.notNull(executorName, <span class="string">&quot;Executor name must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.executorName = executorName;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> WebAsyncTask&#125; with a timeout value, an executor instance, and a Callable.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeout the timeout value in milliseconds; ignored if &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> executor the executor to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable the callable for concurrent handling</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebAsyncTask</span><span class="params">(<span class="meta">@Nullable</span> Long timeout, AsyncTaskExecutor executor, Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(callable);</span><br><span class="line">        Assert.notNull(executor, <span class="string">&quot;Executor must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.executor = executor;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> Callable&#125; to use for concurrent handling (never &#123;<span class="doctag">@code</span> null&#125;).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> Callable&lt;?&gt; getCallable() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.callable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the timeout value in milliseconds, or &#123;<span class="doctag">@code</span> null&#125; if no timeout is set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A &#123;<span class="doctag">@link</span> BeanFactory&#125; to use for resolving an executor name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This factory reference will automatically be set when</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> WebAsyncTask&#125; is used within a Spring MVC controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the AsyncTaskExecutor to use for concurrent handling,</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> null&#125; if none specified.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncTaskExecutor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.executor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.executorName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Assert.state(<span class="keyword">this</span>.beanFactory != <span class="keyword">null</span>, <span class="string">&quot;BeanFactory is required to look up an executor bean by name&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory.getBean(<span class="keyword">this</span>.executorName, AsyncTaskExecutor.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register code to invoke when the async request times out.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is called from a container thread when an async request times</span></span><br><span class="line"><span class="comment"> * out before the &#123;<span class="doctag">@code</span> Callable&#125; has completed. The callback is executed in</span></span><br><span class="line"><span class="comment"> * the same thread and therefore should return without blocking. It may return</span></span><br><span class="line"><span class="comment"> * an alternative value to use, including an &#123;<span class="doctag">@link</span> Exception&#125; or return</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> CallableProcessingInterceptor#RESULT_NONE RESULT_NONE&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(Callable&lt;V&gt; callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeoutCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register code to invoke for an error during async request processing.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is called from a container thread when an error occurred</span></span><br><span class="line"><span class="comment"> * while processing an async request before the &#123;<span class="doctag">@code</span> Callable&#125; has</span></span><br><span class="line"><span class="comment"> * completed. The callback is executed in the same thread and therefore</span></span><br><span class="line"><span class="comment"> * should return without blocking. It may return an alternative value to</span></span><br><span class="line"><span class="comment"> * use, including an &#123;<span class="doctag">@link</span> Exception&#125; or return</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> CallableProcessingInterceptor#RESULT_NONE RESULT_NONE&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Callable&lt;V&gt; callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register code to invoke when the async request completes.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is called from a container thread when an async request</span></span><br><span class="line"><span class="comment"> * completed for any reason, including timeout and network error.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(Runnable callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.completionCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">CallableProcessingInterceptor <span class="title">getInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CallableProcessingInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;T&gt; <span class="function">Object <span class="title">handleTimeout</span><span class="params">(NativeWebRequest request, Callable&lt;T&gt; task)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (timeoutCallback != <span class="keyword">null</span> ? timeoutCallback.call() : CallableProcessingInterceptor.RESULT_NONE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;T&gt; <span class="function">Object <span class="title">handleError</span><span class="params">(NativeWebRequest request, Callable&lt;T&gt; task, Throwable t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (errorCallback != <span class="keyword">null</span> ? errorCallback.call() : CallableProcessingInterceptor.RESULT_NONE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(NativeWebRequest request, Callable&lt;T&gt; task)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (completionCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    completionCallback.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>WebAsyncTask 的异步编程 API。相比于 @Async 注解，WebAsyncTask 提供更加健全的 超时处理 和 异常处理 支持。但是@Async也有更优秀的地方，就是他不仅仅能用于controller中~~~~（任意地方）</p></blockquote><h2 id="4-deferredresult"><a class="markdownIt-Anchor" href="#4-deferredresult"></a> <strong>4 DeferredResult</strong></h2><blockquote><p><code>DeferredResult</code>使用方式与Callable类似，但在返回结果上不一样，<strong>它返回的时候实际结果可能没有生成</strong>，实际的结果可能会在<strong>另外的线程</strong>里面设置到<code>DeferredResult</code>中去。</p></blockquote><h3 id="官方demo"><a class="markdownIt-Anchor" href="#官方demo"></a> 官方Demo</h3><blockquote><p>The controller can produce the return value asynchronously, from a different thread — for example, in response to an external event (JMS message), a scheduled task, or other event.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/quotes&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">quotes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;String&gt;();</span><br><span class="line">    <span class="comment">// Save the deferredResult somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// From some other thread...</span></span><br><span class="line">deferredResult.setResult(result);</span><br></pre></td></tr></table></figure><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><blockquote><p>我们第一个请求<code>/hello</code>，会先<code>deferredResult</code>存起来，然后前端页面是一直等待（转圈状态）的。知道我发第二个请求：<code>setHelloToAll</code>，所有的相关页面才会有响应~~</p></blockquote><ol><li>controller 返回一个<code>DeferredResult</code>，我们把它保存到内存里或者List里面（供后续访问）</li><li>Spring MVC调用<code>request.startAsync()</code>，开启异步处理</li><li>与此同时将<code>DispatcherServlet</code>里的拦截器、Filter等等都马上退出主线程，<strong>但是response仍然保持打开的状态</strong></li><li>应用通过另外一个线程（可能是MQ消息、定时任务等）给<code>DeferredResult</code> set值。然后<code>Spring MVC</code>会把这个请求再次派发给servlet容器</li><li><code>DispatcherServlet</code>再次被调用，然后处理后续的标准流程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/deferred&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">helloGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先存起来，等待触发</span></span><br><span class="line">    deferredResultList.add(deferredResult);</span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/deferred&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 让所有hold住的请求给与响应</span></span><br><span class="line">    deferredResultList.forEach(d -&gt; d.setResult(<span class="string">&quot;say hello to all&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码-2"><a class="markdownIt-Anchor" href="#源码-2"></a> 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeferredResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object RESULT_NONE = <span class="keyword">new</span> Object()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超时时间（ms） 可以不配置</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Long timeout;</span><br><span class="line"><span class="comment">// 相当于超时的话的，传给回调函数的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object timeoutResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这三种回调也都是支持的</span></span><br><span class="line"><span class="keyword">private</span> Runnable timeoutCallback;</span><br><span class="line"><span class="keyword">private</span> Consumer&lt;Throwable&gt; errorCallback;</span><br><span class="line"><span class="keyword">private</span> Runnable completionCallback;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个比较强大，就是能把我们结果再交给这个自定义的函数处理了 他是个@FunctionalInterface</span></span><br><span class="line"><span class="keyword">private</span> DeferredResultHandler resultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Object result = RESULT_NONE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> expired = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断这个DeferredResult是否已经被set过了（被set过的对象，就可以移除了嘛）</span></span><br><span class="line"><span class="comment">// 如果expired表示已经过期了你还没set，也是返回false的</span></span><br><span class="line"><span class="comment">// Spring4.0之后提供的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isSetOrExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.result != RESULT_NONE || <span class="keyword">this</span>.expired);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有isSetOrExpired 强大，建议使用上面那个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.result != RESULT_NONE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以获得set进去的结果</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object resultToCheck = <span class="keyword">this</span>.result;</span><br><span class="line"><span class="keyword">return</span> (resultToCheck != RESULT_NONE ? resultToCheck : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(Runnable callback)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.timeoutCallback = callback;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Consumer&lt;Throwable&gt; callback)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.errorCallback = callback;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(Runnable callback)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.completionCallback = callback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你的result还需要处理，可以这是一个resultHandler，会对你设置进去的结果进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setResultHandler</span><span class="params">(DeferredResultHandler resultHandler)</span> </span>&#123;</span><br><span class="line">Assert.notNull(resultHandler, <span class="string">&quot;DeferredResultHandler is required&quot;</span>);</span><br><span class="line"><span class="comment">// Immediate expiration check outside of the result lock</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.expired) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Object resultToHandle;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">// Got the lock in the meantime: double-check expiration status</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.expired) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">resultToHandle = <span class="keyword">this</span>.result;</span><br><span class="line"><span class="keyword">if</span> (resultToHandle == RESULT_NONE) &#123;</span><br><span class="line"><span class="comment">// No result yet: store handler for processing once it comes in</span></span><br><span class="line"><span class="keyword">this</span>.resultHandler = resultHandler;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resultHandler.handleResult(resultToHandle);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Failed to handle existing result&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们发现，这里调用是private方法setResultInternal，我们设置进来的结果result，会经过它的处理</span></span><br><span class="line"><span class="comment">// 而它的处理逻辑也很简单，如果我们提供了resultHandler，它会把这个值进一步的交给我们的resultHandler处理</span></span><br><span class="line"><span class="comment">// 若我们没有提供此resultHandler，那就保存下这个result即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setResult</span><span class="params">(T result)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> setResultInternal(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setResultInternal</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Immediate expiration check outside of the result lock</span></span><br><span class="line"><span class="keyword">if</span> (isSetOrExpired()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">DeferredResultHandler resultHandlerToUse;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">// Got the lock in the meantime: double-check expiration status</span></span><br><span class="line"><span class="keyword">if</span> (isSetOrExpired()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// At this point, we got a new result to process</span></span><br><span class="line"><span class="keyword">this</span>.result = result;</span><br><span class="line">resultHandlerToUse = <span class="keyword">this</span>.resultHandler;</span><br><span class="line"><span class="keyword">if</span> (resultHandlerToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.resultHandler = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resultHandlerToUse.handleResult(result);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生错误了，也可以设置一个值。这个result会被记下来，当作result</span></span><br><span class="line"><span class="comment">// 注意这个和setResult的唯一区别，这里入参是Object类型，而setResult只能set规定的指定类型</span></span><br><span class="line"><span class="comment">// 定义成Obj是有原因的：因为我们一般会把Exception等异常对象放进来。。。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setErrorResult</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> setResultInternal(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截器 注意最终finally里面，都可能会调用我们的自己的处理器resultHandler(若存在的话)</span></span><br><span class="line"><span class="comment">// afterCompletion不会调用resultHandler~~~~~~~~~~~~~</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> DeferredResultProcessingInterceptor <span class="title">getInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DeferredResultProcessingInterceptor() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;S&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">handleTimeout</span><span class="params">(NativeWebRequest request, DeferredResult&lt;S&gt; deferredResult)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> continueProcessing = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (timeoutCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">timeoutCallback.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (timeoutResult != RESULT_NONE) &#123;</span><br><span class="line">continueProcessing = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">setResultInternal(timeoutResult);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Failed to handle timeout result&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> continueProcessing;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;S&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">handleError</span><span class="params">(NativeWebRequest request, DeferredResult&lt;S&gt; deferredResult, Throwable t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (errorCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">errorCallback.accept(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">setResultInternal(t);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Failed to handle error result&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;S&gt; <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(NativeWebRequest request, DeferredResult&lt;S&gt; deferredResult)</span> </span>&#123;</span><br><span class="line">expired = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (completionCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">completionCallback.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部函数式接口 DeferredResultHandler</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeferredResultHandler</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(Object result)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>DeferredResult</code>的超时处理，采用委托机制，也就是在实例<code>DeferredResult</code>时给予一个超时时长（毫秒），同时在<code>onTimeout</code>中委托（传入）一个新的处理线程（<strong>我们可以认为是超时线程</strong>）；当超时时间到来，<code>DeferredResult</code>启动超时线程，超时线程处理业务，封装返回数据，给<code>DeferredResult</code>赋值（正确返回的或错误返回的）</p></blockquote><h3 id="高级使用"><a class="markdownIt-Anchor" href="#高级使用"></a> 高级使用</h3><h4 id="1-长轮询服务端推送消息long-polling"><a class="markdownIt-Anchor" href="#1-长轮询服务端推送消息long-polling"></a> 1 长轮询服务端推送消息（long polling）</h4><p>在<code>WebSocket</code>协议之前(它是2011年发布的)，有三种实现双向通信的方式：<strong>轮询（polling）</strong>、<strong>长轮询（long-polling）**和**iframe流（streaming）</strong>。</p><ul><li><strong>轮询（polling）</strong>：这个不解释了。优点是实现简单粗暴，后台处理简单。缺点也是大大的，耗流量、耗CPU</li><li><strong>长轮询（long-polling）</strong>：长轮询是对轮询的改进版。客户端发送HTTP给服务器之后，看有没有新消息，如果没有新消息，就一直等待（而不是一直去请求了）。当有新消息的时候，才会返回给客户端。 优点是对轮询做了优化，时效性也较好。<strong>缺点是：保持连接会消耗资源; 服务器没有返回有效数据，程序超时</strong></li><li><strong>iframe流（streaming）</strong>：是在页面中插入一个<code>隐藏的iframe</code>，利用其src属性在服务器和客户端之间创建一条长连接，服务器向iframe传输数据（通常是HTML，内有负责插入信息的javascript），来实时更新页面。</li><li><strong>WebSocket</strong>：WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。它将TCP的Socket（套接字）应用在了webpage上。 它的有点一大把：支持双向通信，实时性更强；可发送二进制文件；非常节省流量。 但也是有缺点的：<code>浏览器支持程度不一致</code>，不支持断开重连 .目前主流</li></ul><p><code>apollo配置中心</code>的实现原理，apollo的发布配置推送变更消息就是用<code>DeferredResult</code>实现的。它的大概实现步骤如下：</p><ol><li>apollo客户端会像服务端发送<code>长轮询http请求</code>，超时时间60秒</li><li>当超时后返回客户端一个304 httpstatus,表明配置没有变更，客户端<code>继续这个步骤重复发起请求</code></li><li>当有发布配置的时候，服务端会调用<code>DeferredResult.setResult</code>返回200状态码。客户端收到响应结果后，<strong>会发起请求获取变更后的配置信息</strong>（注意这里是另外一个请求）</li></ol><h4 id="2-demo"><a class="markdownIt-Anchor" href="#2-demo"></a> 2 Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 超时时间设置为60s</span></span><br><span class="line">        configurer.setDefaultTimeout(TimeUnit.SECONDS.toMillis(<span class="number">60</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>服务端简单代码模拟如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApolloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 值为List，因为监视同一个名称空间的长轮询可能有N个（毕竟可能有多个客户端用同一份配置嘛）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;DeferredResult&lt;String&gt;&gt;&gt; watchRequests = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/all/watchrequests&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getWatchRequests</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> watchRequests;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟长轮询：apollo客户端来监听配置文件的变更~  可以指定namespace 监视指定的NameSpace</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/watch/&#123;namespace&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">watch</span><span class="params">(<span class="meta">@PathVariable(&quot;namespace&quot;)</span> String namespace)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Request received,namespace is&quot;</span> + namespace + <span class="string">&quot;,当前时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当deferredResult完成时（不论是超时还是异常还是正常完成），都应该移除watchRequests中相应的watch key</span></span><br><span class="line">        deferredResult.onCompletion(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;onCompletion，移除对namespace：&quot;</span> + namespace + <span class="string">&quot;的监视~&quot;</span>);</span><br><span class="line">            List&lt;DeferredResult&lt;String&gt;&gt; list = watchRequests.get(namespace);</span><br><span class="line">            list.remove(deferredResult);</span><br><span class="line">            <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">                watchRequests.remove(namespace);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;DeferredResult&lt;String&gt;&gt; list = watchRequests.computeIfAbsent(namespace, (k) -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        list.add(deferredResult);</span><br><span class="line">        <span class="keyword">return</span> deferredResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟发布namespace配置：修改配置</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/publish/&#123;namespace&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishConfig</span><span class="params">(<span class="meta">@PathVariable(&quot;namespace&quot;)</span> String namespace)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do Something for update config</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (watchRequests.containsKey(namespace)) &#123;</span><br><span class="line">            List&lt;DeferredResult&lt;String&gt;&gt; deferredResults = watchRequests.get(namespace);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通知所有watch这个namespace变更的长轮训配置变更结果</span></span><br><span class="line">            <span class="keyword">for</span> (DeferredResult&lt;String&gt; deferredResult : deferredResults) &#123;</span><br><span class="line">                deferredResult.setResult(namespace + <span class="string">&quot; changed，时间为&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>apollo处理超时时候会抛出一个异常<code>AsyncRequestTimeoutException</code>，因此我们全局处理一下就成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalControllerExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.NOT_MODIFIED)</span><span class="comment">//返回304状态码  效果同HttpServletResponse#sendError(int) 但这样更优雅</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(AsyncRequestTimeoutException.class)</span> <span class="comment">//捕获特定异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAsyncRequestTimeoutException</span><span class="params">(AsyncRequestTimeoutException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handleAsyncRequestTimeoutException&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用<code>Ajax</code>模拟Client端的伪代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//长轮询：一直去监听指定namespace的配置文件</span></span><br><span class="line"><span class="function">function <span class="title">watchConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">&quot;http://localhost:8080/demo_war/watch/classroomconfig&quot;</span>,</span><br><span class="line">        method:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">        success:function(response,status)&#123;</span><br><span class="line">            <span class="keyword">if</span>(status == <span class="number">304</span>)&#123;</span><br><span class="line">                watchConfig(); <span class="comment">//超时，没有更改，那就继续去监听</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(status == <span class="number">200</span>)&#123;</span><br><span class="line">                getNewConfig(); <span class="comment">//监听到更改后，立马去获取最新的配置文件内容回来做事</span></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">                    watchConfig(); <span class="comment">// 昨晚事后又去监听着</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用去监听获取配置文件的函数</span></span><br><span class="line">watchConfig();</span><br></pre></td></tr></table></figure><h2 id="5-responsebodyemitter与sseemitter"><a class="markdownIt-Anchor" href="#5-responsebodyemitter与sseemitter"></a> 5 ResponseBodyEmitter与SseEmitter</h2><blockquote><p><code>Callback</code>和<code>DeferredResult</code>用于设置单个结果，如果有多个结果需要set返回给客户端时，可以使用<code>SseEmitter以及ResponseBodyEmitter</code>，each object is written with a compatible <code>HttpMessageConverter</code>。返回值可以直接写他们本身，也可以放在<code>ResponseEntity</code>里面</p><p>它俩都是Spring4.2之后提供的类。由<code>ResponseBodyEmitterReturnValueHandler</code>负责处理。 这个和Spring5提供的webFlux技术已经很像<br>Emitter：发射器</p></blockquote><p>它们的使用方式几乎同：<code>DeferredResult</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/events&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseBodyEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseBodyEmitter emitter = <span class="keyword">new</span> ResponseBodyEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">&quot;Hello once&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">&quot;Hello again&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure><p><code>SseEmitter</code>是<code>ResponseBodyEmitter</code>的子类,它提供<code>Server-Sent Events（Sse）</code>.服务器事件发送是”HTTP Streaming”的另一个变种技术.只是从服务器发送的事件按照<code>W3C Server-Sent Events</code>规范来的（推荐使用） 它的使用方式上，完全同上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(path=&quot;/events&quot;, produces=MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SseEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SseEmitter emitter = <span class="keyword">new</span> SseEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">&quot;Hello once&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">&quot;Hello again&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure><p><code>Server-Sent Events</code>这个规范能够来用于它们的预期使用目的：就是从server发送events到clients（服务器推）.在Spring MVC中可以很容易的实现.仅仅需要返回一个<code>SseEmitter</code>类型的值.</p><blockquote><p>向这种场景在在线游戏、在线协作、金融领域等等都有很好的应用。当然，如果你对稳定性什么的要求都非常高，官方也推荐最好是使用<code>WebSocket</code>来实现~</p></blockquote><p><code>ResponseBodyEmitter</code>允许通过<code>HttpMessageConverter</code>把发送的events写到对象到response中.这可能是最常见的情况。<strong>例如写JSON</strong></p><h2 id="6-streamingresponsebody"><a class="markdownIt-Anchor" href="#6-streamingresponsebody"></a> 6 StreamingResponseBody</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;StreamingResponseBody&gt; <span class="title">downLoad</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    MediaType mediaType = MediaTypeFactory</span><br><span class="line">        .getMediaType(fileName)</span><br><span class="line">        .orElse(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(mediaType);</span><br><span class="line">    ContentDisposition disposition = ContentDisposition.builder(<span class="string">&quot;attachment&quot;</span>)</span><br><span class="line">        .filename(<span class="keyword">new</span> String(fileName.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">    headers.setContentDisposition(disposition);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;StreamingResponseBody&gt;(outputStream -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedOutputStream stream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">             BufferedInputStream inputStream = <span class="keyword">new</span> BufferedInputStream(ftpUtils.downFile(fileName));) &#123;</span><br><span class="line">            StreamUtils.copy(inputStream, stream);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.ftpUtils.ftpClient.completePendingCommand();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, headers, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-异步优化"><a class="markdownIt-Anchor" href="#8-异步优化"></a> 8 异步优化</h2><p>Spring内部默认不使用线程池处理的（通过源码分析后面我们是能看到的）,为了提高处理的效率，我们可以自己优化，建议自己在配置里注入一个线程池供给使用，参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提供一个mvc里专用的线程池。。。  这是全局的方式~~~~</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">mvcTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最优解决方案不是像上面一样配置通用的，而是配置一个单独的专用的，如下~~~~</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置异步支持~~~~</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置一个用于异步执行的执行器~~~AsyncTaskExecutor</span></span><br><span class="line">        configurer.setTaskExecutor(mvcTaskExecutor());</span><br><span class="line">        configurer.setDefaultTimeout(<span class="number">60000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-filter与handlerinterceptor"><a class="markdownIt-Anchor" href="#2-filter与handlerinterceptor"></a> 2 Filter与HandlerInterceptor</h1><h3 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意，这里必须开启异步支持asyncSupported = true，否则报错：Async support must be enabled on a servlet and for all filters involved in async request processing</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;, asyncSupported = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter初始化...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="handlerinterceptor"><a class="markdownIt-Anchor" href="#handlerinterceptor"></a> <strong>HandlerInterceptor</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---preHandle--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---postHandle--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---postHandle--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册拦截器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// /**拦截所有请求</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> HelloInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>从上面可以看出，如果我们就是普通的Spring MVC的拦截器，preHandler会执行两次，这也符合我们上面分析的处理步骤。<strong>所以我们在书写preHandler的时候，一定要特别的注意，要让preHandler即使执行多次，也不要受到影响（幂等）</strong></p></blockquote><h3 id="异步拦截器"><a class="markdownIt-Anchor" href="#异步拦截器"></a> 异步拦截器</h3><blockquote><p>Spring MVC给提供了异步拦截器，能让我们更深入的参与进去异步request的生命周期里面去。其中最为常用的为：</p></blockquote><h4 id="asynchandlerinterceptor"><a class="markdownIt-Anchor" href="#asynchandlerinterceptor"></a> <code>AsyncHandlerInterceptor</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncHelloInterceptor</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是Spring3.2提供的方法，专门拦截异步请求的方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---afterConcurrentHandlingStarted--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---preHandle--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---postHandle--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---afterCompletion--&gt;&quot;</span> + request.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>AsyncHandlerInterceptor</code>提供了一个<code>afterConcurrentHandlingStarted()</code>方法, 这个方法会在<code>Controller</code>方法异步执行时开始执行, 而<code>Interceptor的postHandle</code>方法则是需要等到<code>Controller</code>的异步执行完才能执行</p><p><strong>（比如我们用<code>DeferredResult</code>的话，<code>afterConcurrentHandlingStarted</code>是在return的之后执行，而<code>postHandle()</code>是执行<code>.setResult()</code>之后执行）</strong></p><p>需要说明的是：如果我们不是异步请求，<code>afterConcurrentHandlingStarted</code>是不会执行的。所以我们可以把它当做加强版的<code>HandlerInterceptor</code>来用。平时我们若要使用拦截器，建议使用它。（Spring5，JDK8以后，很多的<code>xxxAdapter</code>都没啥用了，直接implements接口就成~）</p></blockquote><p>同样可以注册<code>CallableProcessingInterceptor</code>或者一个<code>DeferredResultProcessingInterceptor</code>用于更深度的集成异步request的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册异步的拦截器、默认的超时时间、任务处理器TaskExecutor等等</span></span><br><span class="line">    <span class="comment">//configurer.registerCallableInterceptors();</span></span><br><span class="line">    <span class="comment">//configurer.registerDeferredResultInterceptors();</span></span><br><span class="line">    <span class="comment">//configurer.setDefaultTimeout();</span></span><br><span class="line">    <span class="comment">//configurer.setTaskExecutor();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-async注解"><a class="markdownIt-Anchor" href="#3-async注解"></a> 3  @Async注解</h1><blockquote><p>在开发过程中，我们会遇到很多使用线程池的业务场景，例如异步短信通知、异步记录操作日志。大多数使用线程池的场景，就是会将一些可以进行异步操作的业务放在线程池中去完成。</p><p>例如在生成订单的时候给用户发送短信，生成订单的结果不应该被发送短信的成功与否所左右，也就是说生成订单这个主操作是不依赖于发送短信这个操作，所以我们就可以把发送短信这个操作置为异步操作。</p></blockquote><p>Spring中用<code>@Async</code>注解标记的方法，称为异步方法，它会在调用方的当前线程之外的独立的线程中执行，其实就相当于我们自己<code>new Thread(()-&gt; System.out.println(&quot;hello world !&quot;))</code>这样在另一个线程中去执行相应的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Async 若把注解放在类上或者接口上，那么他所有的方法都会异步执行了~~~~（包括私有方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span> <span class="comment">// 注意此处加上了此注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后只需要在配置里，开启对异步的支持即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步注解的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="async注解使用细节"><a class="markdownIt-Anchor" href="#async注解使用细节"></a> @Async注解使用细节</h4><ol><li><code>@Async</code>注解一般用在方法上，如果用在类上，那么这个类<strong>所有的方法</strong>都是异步执行的；</li><li><code>@Async</code>可以放在任何方法上，哪怕你是<code>private</code>的（<strong>若是同类调用</strong>，请务必注意注解失效的情况~~~）</li><li>所使用的<code>@Async</code>注解方法的类对象应该是Spring容器管理的bean对象</li><li><code>@Async</code>可以放在接口处（或者接口方法上）。但是只有使用的是JDK的动态代理时才有效，CGLIB会失效。因此建议：<code>统一写在实现类的方法上</code></li><li>需要注解<code>@EnableAsync</code>来开启异步注解的支持</li><li>若你希望得到<code>异步调用的返回值</code>，请你的返回值用<code>Futrue</code>变量包装起来</li><li></li></ol><h1 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4 总结</h1><blockquote><p><code>DeferredResult</code>需要<strong>自己用线程</strong>来处理结果<code>setResult</code>，而<code>Callable</code>的话不需要我们来维护一个结果处理线程。<br>总体来说，<code>Callable</code>的话更为简单，同样的也是因为简单，灵活性不够；<br>相对地，<code>DeferredResult</code>更为复杂一些，<strong>但是又极大的灵活性</strong>，所以能实现非常多个性化的、复杂的功能，可以设计高级应用。</p></blockquote><p><strong>有些较常见的场景， <code>Callable</code>也并不能解决，比如说：我们访问A接口，A接口调用三方的服务，服务<code>回调（注意此处指的回调，不是返回值）</code>B接口，这种情况就没办法使用Callable了，这个时候可以使用<code>DeferredResult</code></strong></p><p>使用原则：基本上在可以用<code>Callable</code>的时候，直接用<code>Callable</code>；而遇到<code>Callable</code>没法解决的场景的时候，可以尝试使用<code>DeferredResult</code>。</p><blockquote><p>在Reactive编程模型越来越流行的今天，多一点对异步编程模型（Spring MVC异步模式）的了解，可以更容易去接触Spring5带来的新特性—响应式编程。<br>同时，异步编程是我们高效利用系统资源，提高系统吞吐量，编写高性能应用的必备技能。</p></blockquote><h1 id="5-参阅"><a class="markdownIt-Anchor" href="#5-参阅"></a> 5 参阅</h1><p>[]: <a href="https://fangshixiang.blog.csdn.net/article/details/89430276">https://fangshixiang.blog.csdn.net/article/details/89430276</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC - 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC - 异步模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell Jar 简单启动脚本</title>
      <link href="/2020/12/13/shell-Jar-%E7%AE%80%E5%8D%95%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/12/13/shell-Jar-%E7%AE%80%E5%8D%95%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="jar启动脚本"><a class="markdownIt-Anchor" href="#jar启动脚本"></a> jar启动脚本</h1><h2 id="启动jar脚本"><a class="markdownIt-Anchor" href="#启动jar脚本"></a> 启动jar脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pid=$(netstat -nlp | grep :8094 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">nohup java -jar -Xmx512m -Xms128m -Xmn64m -Xss64m -Dfile.encoding=UTF-8 /usr/<span class="built_in">local</span>/testServer/app-operation-1.0-SNAPSHOT.jar &gt;/usr/<span class="built_in">local</span>/testServer/logs/app-operation.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动sh脚本"><a class="markdownIt-Anchor" href="#启动sh脚本"></a> 启动sh脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;调用operation&quot;</span>;</span><br><span class="line"><span class="built_in">source</span>   ./app-operation-restart.sh;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Windows Git乱码</title>
      <link href="/2020/12/13/Git-%E8%A7%A3%E5%86%B3Windows%E4%B9%B1%E7%A0%81/"/>
      <url>/2020/12/13/Git-%E8%A7%A3%E5%86%B3Windows%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="windows-git乱码"><a class="markdownIt-Anchor" href="#windows-git乱码"></a> Windows Git乱码</h1><ul><li>第一步打开Git Bash 右键</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/Git-%E8%A7%A3%E5%86%B3Windows%E4%B9%B1%E7%A0%81/image-20201213142640209.png" alt="image-20201213142640209"></p><ul><li>修改 text为UTF-8</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/Git-%E8%A7%A3%E5%86%B3Windows%E4%B9%B1%E7%A0%81/image-20201213142722688.png" alt="image-20201213142722688"></p><ul><li><p>修改WIndows环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LESSCHARSET</span><br><span class="line">utf-8</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/Git-%E8%A7%A3%E5%86%B3Windows%E4%B9%B1%E7%A0%81/image-20201213142758974.png" alt="image-20201213142758974"></p><ul><li>输入一下命令配置全局变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global gui.encoding utf-8</span><br><span class="line">git config --global i18n.commitEncoding utf-8</span><br><span class="line">git config --global i18n.logoutputEncoding utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者修改.gitConfig</span></span><br><span class="line">[gui]  </span><br><span class="line">    encoding = utf-8  </span><br><span class="line">    <span class="comment"># 代码库统一使用utf-8  </span></span><br><span class="line">[i18n]  </span><br><span class="line">    commitencoding = utf-8  </span><br><span class="line">    <span class="comment"># log编码  </span></span><br><span class="line">[svn]  </span><br><span class="line">    pathnameencoding = utf-8  </span><br><span class="line">    <span class="comment"># 支持中文路径  </span></span><br><span class="line">[core]</span><br><span class="line">quotepath = <span class="literal">false</span> </span><br><span class="line"><span class="comment"># status引用路径不再是八进制（反过来说就是允许显示中文了）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter初体验</title>
      <link href="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="jmeter初体验"><a class="markdownIt-Anchor" href="#jmeter初体验"></a> JMeter初体验</h1><h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 安装</h2><h3 id="1-安装java环境变量略"><a class="markdownIt-Anchor" href="#1-安装java环境变量略"></a> 1  安装Java环境变量（略…）</h3><h3 id="2-安装jmeter"><a class="markdownIt-Anchor" href="#2-安装jmeter"></a> 2 安装Jmeter</h3><ul><li><a href="http://jmeter.apache.org/download_jmeter.cgi">打开下载地址</a>（Windows版本下载zip（Binaries），Linux版本下载tgz（Binaries））</li><li>解压</li><li>配置环境变量<ul><li>新增JMETER_HOME变量，变量值为解压路径</li><li>编辑CLASSPATH变量加上 或者再Path中添加<code>%JMETER_HOME%\lib\ext\ApacheJMeter_core.jar;%JMETER_HOME%\lib\jorphan.jar;%JMETER_HOME%\lib\logkit-2.0.jar;</code></li><li>打开bin目录打开Jmeter.bat启动</li></ul></li></ul><h2 id="2-吞吐量测试"><a class="markdownIt-Anchor" href="#2-吞吐量测试"></a> 2 吞吐量测试</h2><p>1 创建用户组</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/image-20201213143631332.png" alt="创建用户组"></p><p>2 设置用户组参数</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/image-20201213143930228.png" alt="设置用户组参数"></p><p>3 添加HTTP请求</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/image-20201213144040565.png" alt="添加HTTP请求"></p><p>4 HTTP参数设置</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/image-20201213144317990.png" alt="HTTP参数设置"></p><p>5 HTTP的响应断言</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/image-20201213144405613.png" alt="image-20201213144405613"></p><p>6 响应断言设置</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/13/JMeter%E5%88%9D%E4%BD%93%E9%AA%8C/image-20201213163712854.png" alt="image-20201213163712854"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 - JMeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具类</title>
      <link href="/2020/12/12/Spring%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2020/12/12/Spring%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring工具"><a class="markdownIt-Anchor" href="#1-spring工具"></a> 1 Spring工具</h1><h2 id="1-idgenerator唯一键生成器-uuid"><a class="markdownIt-Anchor" href="#1-idgenerator唯一键生成器-uuid"></a> 1 IdGenerator唯一键生成器 UUID</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/12/Spring%E5%B7%A5%E5%85%B7%E7%B1%BB/image-20201212215449169.png" alt="image-20201212215449169"></p><h3 id="1-jdkidgenerator"><a class="markdownIt-Anchor" href="#1-jdkidgenerator"></a> 1 <strong>JdkIdGenerator</strong></h3><blockquote><p>JDK内置UUID生成器</p></blockquote><h3 id="2-alternativejdkidgenerator"><a class="markdownIt-Anchor" href="#2-alternativejdkidgenerator"></a> 2 <strong>AlternativeJdkIdGenerator</strong></h3><blockquote><p>Spring提供的UUID生成器，替换调用<code>UUID#randomUUID()</code>。它提供了一个更好、更高性能的表现</p></blockquote><h3 id="3-simpleidgenerator"><a class="markdownIt-Anchor" href="#3-simpleidgenerator"></a> 3 <strong>SimpleIdGenerator</strong></h3><blockquote><p>类似于自增的Id生成器。每调用一次，自增1</p></blockquote><h2 id="2-assert-断言工具类"><a class="markdownIt-Anchor" href="#2-assert-断言工具类"></a> 2 Assert 断言工具类</h2><blockquote><p>Assert断言工具类，通常用于数据合法性检查。Assert断言工具类，通常用于数据合法性检查.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.notNull(Object object, <span class="string">&quot;object is required&quot;</span>)  </span><br></pre></td></tr></table></figure><h2 id="3-pathmatcher-路径匹配器"><a class="markdownIt-Anchor" href="#3-pathmatcher-路径匹配器"></a> 3 PathMatcher 路径匹配器</h2><blockquote><p>Spring提供的实现：<code>AntPathMatcher</code>：Ant路径匹配规则</p></blockquote><p>1 AntPathMatcher可以匹配@RequestMapping，也可以用来匹配各种字符串，包括文件路径</p><h3 id="1-匹配方式"><a class="markdownIt-Anchor" href="#1-匹配方式"></a> <strong>1 匹配方式</strong></h3><ul><li><code>?</code>匹配单字符</li><li><code>*</code>匹配0或者任意数量的字符</li><li><code>**</code> 匹配0或者更多目录</li></ul><table><thead><tr><th>URL路径</th><th>说明</th></tr></thead><tbody><tr><td>/test/*.x</td><td>匹配以.x结尾的</td></tr><tr><td>/test/a??le</td><td>类似于数据库的<code>_</code></td></tr><tr><td>/test/**/</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">assertFalse(pathMatcher.match(<span class="string">&quot;test*&quot;</span>, <span class="string">&quot;test/&quot;</span>)); <span class="comment">//注意这里是false 因为路径不能用*匹配</span></span><br><span class="line">assertFalse(pathMatcher.match(<span class="string">&quot;test*&quot;</span>, <span class="string">&quot;test/t&quot;</span>)); <span class="comment">//这同理</span></span><br><span class="line"><span class="comment">//这个需要特别注意：&#123;&#125;里面的相当于Spring MVC里接受一个参数一样，所以任何东西都会匹配的</span></span><br><span class="line">assertTrue(pathMatcher.match(<span class="string">&quot;/&#123;bla&#125;.*&quot;</span>, <span class="string">&quot;/testing.html&quot;</span>));</span><br><span class="line">assertFalse(pathMatcher.match(<span class="string">&quot;/&#123;bla&#125;.htm&quot;</span>, <span class="string">&quot;/testing.html&quot;</span>)); <span class="comment">//这样就是false了</span></span><br></pre></td></tr></table></figure><p><strong>最长匹配规则（has more characters）</strong></p><blockquote><p>​即越精确的模式越会被优先匹配到。例如，URL请求/app/dir/file.jsp，现在存在两个路径匹配模式/**/<em>.jsp和/app/dir/</em>.jsp，那么会根据模式/app/dir/*.jsp来匹配。</p></blockquote><h3 id="2-匹配文件路径"><a class="markdownIt-Anchor" href="#2-匹配文件路径"></a> 2  匹配文件路径</h3><blockquote><p>​AntPathMatcher不仅可以匹配URL路径，也可以匹配文件路径。但是需要注意AntPathMacher有构造参数，传递分割参数<code>pathSeparator</code>若不传值默认为<code>/</code>，对于操作系统来说，需要根据不同的操作系统来传递文件分割符，以此来防止匹配路径错误。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AntPathMatcher matcher=<span class="keyword">new</span> AntPathMatcher(File.separator);</span><br><span class="line">AntPathMatcher matcher = <span class="keyword">new</span> AntPathMatcher(System.getProperty(<span class="string">&quot;file.separator&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="4-concurrentreferencehashmap"><a class="markdownIt-Anchor" href="#4-concurrentreferencehashmap"></a> 4 ConcurrentReferenceHashMap</h2><blockquote><p>JDK也为我们提供了<code>WeakHashMap</code>来使用。但是，但是它并不是线程安全的，因此刚好Spring给我们功提供这个工具类：<code>ConcurrentReferenceHashMap</code>满足了我们对线程安全的弱、软引用的需求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    String key = <span class="keyword">new</span> String(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    String value = <span class="keyword">new</span> String(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">8</span>, ConcurrentReferenceHashMap.ReferenceType.WEAK);</span><br><span class="line">    map.put(key, value);</span><br><span class="line">    System.out.println(map); <span class="comment">//&#123;key=val&#125;</span></span><br><span class="line">    key = <span class="keyword">null</span>;</span><br><span class="line">    System.gc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待一会 确保GC能够过来</span></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    System.out.println(map); <span class="comment">//&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们发现当我们把key设置为null后，垃圾回收器会回收掉这部分内存。这就是弱、虚引用的作用，主要用来防止OOM。</p></blockquote><h2 id="5-defaultpropertiespersister"><a class="markdownIt-Anchor" href="#5-defaultpropertiespersister"></a> 5 DefaultPropertiesPersister</h2><blockquote><p>这个类本身没有什么特别的，就是代理了JDK的Properties类而已。但写到此处是觉得Spring优秀就优秀在它强大的<code>对扩展开放的原则</code>体现。</p><p>比如如果我们需要对配置文件进行解密（比如数据库连接密码不能明文），这些操作通过复写这些扩展类的某些方法来做，将特别的优雅。</p></blockquote><p><a href="https://www.xuebuyuan.com/1924773.html">spring启动时，解密配置文件的密文</a></p><h2 id="6-digestutils"><a class="markdownIt-Anchor" href="#6-digestutils"></a> 6 DigestUtils</h2><blockquote><p>可以对字节数组、InputStream流生成摘要。10禁止或者16进制都行</p></blockquote><h2 id="7-fastbytearrayoutputstream"><a class="markdownIt-Anchor" href="#7-fastbytearrayoutputstream"></a> 7 FastByteArrayOutputStream</h2><blockquote><p>​增强版的<code>ByteArrayOutputStream</code>实底层原理是Spring采用了一个LinkedList来作为缓冲区,而<code>ByteArrayOutputStream</code>直接使用的字节数组。这样每一次扩容中分配一个数组的空间，并当该数据放入到List中。相当于批量的操作，而ByteArrayOutputStream内部实现为一个数组每一次扩容需要重新分配空间并将数据复制到新数组中。效率高下立判了~因此推荐使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The buffers used to store the content bytes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;<span class="keyword">byte</span>[]&gt; buffers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="8-filecopyutils-filesystemutils-streamutils"><a class="markdownIt-Anchor" href="#8-filecopyutils-filesystemutils-streamutils"></a> 8 FileCopyUtils、FileSystemUtils、StreamUtils</h2><blockquote><p>​都是操作文件、操作流的一些工具类。这里就不做过多的介绍了，因为还是比较简单的。</p></blockquote><h2 id="9-linkedcaseinsensitivemap-linkedmultivaluemap"><a class="markdownIt-Anchor" href="#9-linkedcaseinsensitivemap-linkedmultivaluemap"></a> 9 LinkedCaseInsensitiveMap ，LinkedMultiValueMap</h2><h3 id="1-linkedcaseinsensitivemap"><a class="markdownIt-Anchor" href="#1-linkedcaseinsensitivemap"></a> 1 LinkedCaseInsensitiveMap</h3><blockquote><p>​不区分大小写的有序map;底层代理了LinkedHashMap，因此它能保证有序。此Map的意义在于：在编写比如MaBatis这种类似的自动封装框架的时候，特备有用。</p><p>​<strong>数据库本身对大小写不敏感（例如mysql），但是创建表格的时候，数据库里面字段都会默认小写，所以MyBatis映射的时候，key也会映射成小写，可以用LinkedCaseInsensitiveMap（key值不区分大小写的LinkedMap）来处理。</strong></p></blockquote><p><strong>注意：</strong></p><blockquote><p>LinkedCaseInsensitiveMap的key一定是String</p></blockquote><h3 id="2-linkedmultivaluemap"><a class="markdownIt-Anchor" href="#2-linkedmultivaluemap"></a> 2 LinkedMultiValueMap</h3><blockquote><p>见名之意，一个key对应多个value。废话不多说，直接感受一把就知道了。没有Apache Common提供的好用。但是一般来说也足够用了~</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//用Map接的时候  请注意第二个泛型 是个List哦</span></span><br><span class="line">     <span class="comment">//Map&lt;String, List&lt;Integer&gt;&gt; map = new LinkedMultiValueMap&lt;&gt;();</span></span><br><span class="line">     LinkedMultiValueMap&lt;String, Integer&gt; map = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//此处务必注意，如果你还是用put方法  那是没有效果的 同一个key还是会覆盖</span></span><br><span class="line">     <span class="comment">//map.put(&quot;a&quot;, Arrays.asList(1));</span></span><br><span class="line">     <span class="comment">//map.put(&quot;a&quot;, Arrays.asList(1));</span></span><br><span class="line">     <span class="comment">//map.put(&quot;a&quot;, Arrays.asList(1));</span></span><br><span class="line">     <span class="comment">//System.out.println(map); //&#123;a=[1]&#125;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//请用add方法</span></span><br><span class="line">     map.add(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">     map.add(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">     map.add(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">     System.out.println(map); <span class="comment">//&#123;a=[1, 1, 1]&#125;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="10-propertyplaceholderhelper"><a class="markdownIt-Anchor" href="#10-propertyplaceholderhelper"></a> 10 PropertyPlaceholderHelper</h2><blockquote><p>​作用：将字符串里的占位符内容，用我们配置的properties里的替换。这个是一个单纯的类，没有继承没有实现，没有依赖Spring框架其他的任何类。</p><p>我们自定义支持的表达式的时候，我们也可以高大上的说，我的格式支持spel表达式<code>SpelExpressionParser</code>。更加的灵活了。</p><p>@Value注解或者其余spel表达式的东西，都得依赖于这个来做。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String a = <span class="string">&quot;&#123;name&#125;&#123;age&#125;&#123;sex&#125;&quot;</span>;</span><br><span class="line">    String b = <span class="string">&quot;&#123;name&#123;age&#125;&#123;sex&#125;&#125;&quot;</span>;</span><br><span class="line">    PropertyPlaceholderHelper propertyPlaceholderHelper = <span class="keyword">new</span> PropertyPlaceholderHelper(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\work\\remotegitcheckoutproject\\myprojects\\java\\boot2-demo1\\src\\main\\resources\\application.properties&quot;</span>)));</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============开始解析此字符串==============</span></span><br><span class="line">    System.out.println(<span class="string">&quot;替换前:&quot;</span> + a); <span class="comment">//替换前:&#123;name&#125;&#123;age&#125;&#123;sex&#125;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;替换后:&quot;</span> + propertyPlaceholderHelper.replacePlaceholders(a, properties)); <span class="comment">//替换后:wangzha18man</span></span><br><span class="line">    System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;替换前:&quot;</span> + b); <span class="comment">//替换前:&#123;name&#123;age&#125;&#123;sex&#125;&#125;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;替换后:&quot;</span> + properties); <span class="comment">//替换后:love  最后输出love，证明它是从内往外一层一层解析的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-springversion-springbootversion"><a class="markdownIt-Anchor" href="#11-springversion-springbootversion"></a> 11 SpringVersion、SpringBootVersion</h2><blockquote><p>获取当前Spring版本号</p></blockquote><h2 id="12-reflectionutils-反射工具类"><a class="markdownIt-Anchor" href="#12-reflectionutils-反射工具类"></a> 12 ReflectionUtils 反射工具类</h2><blockquote><p>反射在容器中使用是非常频繁的了，这些方法一般在Spring框架内部使用。</p></blockquote><h3 id="1-变量"><a class="markdownIt-Anchor" href="#1-变量"></a> 1 变量</h3><blockquote><p>该方法是从类里面找到字段对象(private以及父类的都会找哟，但是static的就不会）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> String name, <span class="meta">@Nullable</span> Class&lt;?&gt; type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Field field, <span class="meta">@Nullable</span> Object target, <span class="meta">@Nullable</span> Object value)</span></span>;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">&quot;fsx&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    Field field = ReflectionUtils.findField(Person.class, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>); <span class="comment">//注意，如果是private的属性，请加上这一句，否则抛出异常：can not access a member of class com.fsx.boot2demo1.bean.Person with modifiers &quot;private&quot;</span></span><br><span class="line"></span><br><span class="line">    System.out.println(ReflectionUtils.getField(field, person)); <span class="comment">//fsx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-方法"><a class="markdownIt-Anchor" href="#2-方法"></a> 2 方法</h3><blockquote><p>也是一样非常的强大。private、父类方法都能获取到。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, <span class="meta">@Nullable</span> Class&lt;?&gt;... paramTypes)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(Method method, <span class="meta">@Nullable</span> Object target)</span></span>; <span class="comment">//这个不需要自己处理异常哦</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(Method method, <span class="meta">@Nullable</span> Object target, <span class="meta">@Nullable</span> Object... args)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">&quot;fsx&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    System.out.println(ReflectionUtils.findMethod(Person.class, <span class="string">&quot;clone&quot;</span>)); <span class="comment">//protected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException</span></span><br><span class="line">    System.out.println(ReflectionUtils.findMethod(Person.class, <span class="string">&quot;getName&quot;</span>)); <span class="comment">//public java.lang.String com.fsx.boot2demo1.bean.Person.getName()</span></span><br><span class="line">    System.out.println(ReflectionUtils.findMethod(Person.class, <span class="string">&quot;setName&quot;</span>, String.class)); <span class="comment">//public void com.fsx.boot2demo1.bean.Person.setName(java.lang.String)</span></span><br><span class="line">    System.out.println(ReflectionUtils.findMethod(Person.class, <span class="string">&quot;privateMethod&quot;</span>)); <span class="comment">//private void com.fsx.boot2demo1.bean.Person.privateMethod()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-异常"><a class="markdownIt-Anchor" href="#3-异常"></a> 3 异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleReflectionException</span><span class="params">(Exception ex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rethrowRuntimeException</span><span class="params">(Throwable ex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">declaresException</span><span class="params">(Method method, Class&lt;?&gt; exceptionType)</span></span>; <span class="comment">//判断一个方法上是否声明了指定类型的异常</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPublicStaticFinal</span><span class="params">(Field field)</span></span>; <span class="comment">//判断字段是否是public static final的</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEqualsMethod</span><span class="params">(Method method)</span></span>; <span class="comment">//判断该方法是否是equals方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isHashCodeMethod</span><span class="params">(Method method)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isToStringMethod</span><span class="params">(Method method)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isObjectMethod</span><span class="params">(Method method)</span></span>; <span class="comment">//判断该方法是否是Object类上的方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Field field)</span></span>; <span class="comment">//将一个字段设置为可读写，主要针对private字段</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Method method)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>在AopUtils中也有这几个isXXX方法，是的，其实AopUtils中的isXXX方法就是调用的ReflectionUtils的这几个方法的；所以可见此工具类的强大</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">&quot;fsx&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    Method[] allDeclaredMethods = ReflectionUtils.getAllDeclaredMethods(Person.class);</span><br><span class="line">    <span class="comment">//我们发现  这个方法可以把所有的申明的方法都打印出来。包含private和父类的   备注：重复方法都会拿出来。比如此处的toString方法 子类父类的都有</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : allDeclaredMethods) &#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//针对于上面的结果过滤。只会保留一个同名的方法（保留子类的）</span></span><br><span class="line">    Method[] uniqueDeclaredMethods = ReflectionUtils.getUniqueDeclaredMethods(Person.class);</span><br><span class="line">    <span class="keyword">for</span> (Method method : uniqueDeclaredMethods) &#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 方法</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019020220230677.png" alt="在这里插入图片描述"></p><blockquote><p>针对指定类型上的所有方法，依次调用MethodCallback回调；看个源码就知道这个方法的作用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWithLocalMethods</span><span class="params">(Class&lt;?&gt; clazz, MethodCallback mc)</span> </span>&#123;</span><br><span class="line">    Method[] methods = getDeclaredMethods(clazz);</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mc.doWith(method);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>其实实现很简单，就是得到类上的所有方法，然后执行回调接口；这个方法在Spring针对bean的方法上的标签处理时大量使用，比如<code>@Init，@Resource，@Autowire</code>等标签的预处理；</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190202202739940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Y2NDEzODU3MTI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190202202655814.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190202202655814.png" alt="在这里插入图片描述"></p><h2 id="13-resourceutils"><a class="markdownIt-Anchor" href="#13-resourceutils"></a> 13 ResourceUtils</h2><blockquote><p>Spring 提供了一个 ResourceUtils 工具类，它支持“<strong>classpath:</strong>”和“<strong>file:</strong>”的地址前缀，它能够从指定的地址加载文件资源。（其实还支持“jar:和war:前缀”）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASSPATH_URL_PREFIX = <span class="string">&quot;classpath:&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_URL_PREFIX = <span class="string">&quot;file:&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JAR_URL_PREFIX = <span class="string">&quot;jar:&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WAR_URL_PREFIX = <span class="string">&quot;war:&quot;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 是否是一个URL</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUrl</span><span class="params">(<span class="meta">@Nullable</span> String resourceLocation)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (resourceLocation == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对classpath:进行了特殊的照顾</span></span><br><span class="line"><span class="keyword">if</span> (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">new</span> URL(resourceLocation);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> URL <span class="title">getURL</span><span class="params">(String resourceLocation)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(String resourceLocation)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(URL resourceUrl)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(URI resourceUri)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(URI resourceUri, String description)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFileURL</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 均是和protocol 这个协议有关的~~~</span></span><br><span class="line">String protocol = url.getProtocol();</span><br><span class="line"><span class="keyword">return</span> (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) ||</span><br><span class="line">URL_PROTOCOL_VFS.equals(protocol));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isJarURL</span><span class="params">(URL url)</span> </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// @since 4.1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isJarFileURL</span><span class="params">(URL url)</span> </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// URL和URI的转换</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> URI <span class="title">toURI</span><span class="params">(URL url)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> toURI(url.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> URI <span class="title">toURI</span><span class="params">(String location)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> URI(StringUtils.replace(location, <span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    File file = ResourceUtils.getFile(<span class="string">&quot;classpath:application.properties&quot;</span>);</span><br><span class="line">    System.out.println(file); <span class="comment">//D:\work\remotegitcheckoutproject\myprojects\java\boot2-demo1\target\classes\application.properties</span></span><br><span class="line"></span><br><span class="line">    System.out.println(ResourceUtils.isUrl(<span class="string">&quot;classpath:application.properties&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意此处输出的路径为正斜杠 ‘/’的  上面直接输出File是反斜杠的（和操作系统相关）</span></span><br><span class="line">    System.out.println(ResourceUtils.getURL(<span class="string">&quot;classpath:application.properties&quot;</span>)); <span class="comment">//file:/D:/work/remotegitcheckoutproject/myprojects/java/boot2-demo1/target/classes/application.properties</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：若你在使用过程中，发现ResourceUtils.getFile()死活都找不到文件的话，那我提供一个建议：是否是在jar包内使用了此工具类，一般不建议在jar包内使用。另外，提供一个代替方案：可解决大多数问题：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;application.properties&quot;</span>);</span><br><span class="line">    System.out.println(resource); <span class="comment">//class path resource [application.properties]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-serializationutils"><a class="markdownIt-Anchor" href="#14-serializationutils"></a> 14 SerializationUtils</h2><blockquote><p>这个工具就不做过多解释了。提供了两个方法：对象&lt;–&gt;二进制的相互转化。（基于源生JDK的序列化方式）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="meta">@Nullable</span> Object object);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="meta">@Nullable</span> <span class="keyword">byte</span>[] bytes)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15-socketutils"><a class="markdownIt-Anchor" href="#15-socketutils"></a> 15 SocketUtils</h2><blockquote><p>提供给我们去系统找可用的Tcp、Udp端口来使用。有的时候确实还蛮好用的，必进端口有时候不用写死了，提高灵活性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(SocketUtils.PORT_RANGE_MAX); <span class="comment">//65535 最大端口号</span></span><br><span class="line">    System.out.println(SocketUtils.findAvailableTcpPort()); <span class="comment">//45569 随便找一个可用的Tcp端口 每次执行值都不一样哦</span></span><br><span class="line">    System.out.println(SocketUtils.findAvailableTcpPort(<span class="number">1000</span>, <span class="number">2000</span>)); <span class="comment">//1325 从指定范围内随便找一个端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//找一堆端口出来  并且是排好序的</span></span><br><span class="line">    System.out.println(SocketUtils.findAvailableTcpPorts(<span class="number">10</span>, <span class="number">1000</span>, <span class="number">2000</span>)); <span class="comment">//[1007, 1034, 1287, 1483, 1494, 1553, 1577, 1740, 1963, 1981]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//UDP端口的找寻 同上</span></span><br><span class="line">    System.out.println(SocketUtils.findAvailableUdpPort()); <span class="comment">//12007</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其长度都是16个bit，所以端口号范围是0到(2^16-1)，即 0到 65535。其中0到1023是IANA规定的系统端口，即系统保留窗口。<strong>例如HTTP为80端口，DNS服务为53端口</strong>。下面列出常用tcp和udp重要协议端口号，供以参考</p></blockquote><h2 id="16-stringutils"><a class="markdownIt-Anchor" href="#16-stringutils"></a> 16 StringUtils</h2><h3 id="1-字符串判定"><a class="markdownIt-Anchor" href="#1-字符串判定"></a> 1 字符串判定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断类：</span></span><br><span class="line"><span class="comment">// boolean isEmpty(Object str):字符串是否为空或者空字符串：&quot;&quot;</span></span><br><span class="line"><span class="comment">// boolean hasLength(CharSequence str):字符串是否为空，或者长度为0</span></span><br><span class="line"><span class="comment">// boolean hasText(String str):字符串是否有内容（不为空，且不全为空格）</span></span><br><span class="line">assertFalse(StringUtils.hasText(<span class="string">&quot;   &quot;</span>));</span><br><span class="line"><span class="comment">// boolean containsWhitespace(String str):字符串是否包含空格</span></span><br><span class="line">assertTrue(StringUtils.containsWhitespace(<span class="string">&quot;a b&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="2-字符串头尾操作"><a class="markdownIt-Anchor" href="#2-字符串头尾操作"></a> 2 字符串头尾操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串头尾操作</span></span><br><span class="line"><span class="comment">// String trimWhitespace(String str):去掉字符串前后的空格</span></span><br><span class="line">assertEquals(<span class="string">&quot;abc&quot;</span>, StringUtils.trimWhitespace(<span class="string">&quot; abc &quot;</span>));</span><br><span class="line"><span class="comment">// String trimAllWhitespace(String str):去掉字符串中所有的空格</span></span><br><span class="line">assertEquals(<span class="string">&quot;abc&quot;</span>, StringUtils.trimAllWhitespace(<span class="string">&quot; a b c &quot;</span>));</span><br><span class="line"><span class="comment">// String trimLeadingWhitespace(String str):去掉字符串开头的空格</span></span><br><span class="line"><span class="comment">// String trimTrailingWhitespace(String str):去掉字符串结束的空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String trimLeadingCharacter(String str, char leadingCharacter):去掉字符串开头的指定字符；</span></span><br><span class="line"><span class="comment">// String trimTrailingCharacter(String str, char trailingCharacter):去掉字符串结尾的指定字符；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean startsWithIgnoreCase(String str, String prefix):</span></span><br><span class="line"><span class="comment">// 判断字符串是否以指定字符串开头，忽略大小写</span></span><br><span class="line">assertTrue(StringUtils.startsWithIgnoreCase(<span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;AB&quot;</span>));</span><br><span class="line"><span class="comment">// boolean endsWithIgnoreCase(String str, String suffix):</span></span><br><span class="line"><span class="comment">// 判断字符串是否以指定字符串结尾，忽略大小写</span></span><br></pre></td></tr></table></figure><h3 id="3-文件操作"><a class="markdownIt-Anchor" href="#3-文件操作"></a> 3 <code>文件操作</code></h3><blockquote><p>文件路径名称相关操作，是针对文件名，文件路径，文件后缀等常见文件操作中需要用到的方法进行封装；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String unqualify(String qualifiedName):</span></span><br><span class="line"><span class="comment">// 得到以.分割的最后一个值，可以非常方便的获取类似类名或者文件后缀</span></span><br><span class="line">assertEquals(<span class="string">&quot;java&quot;</span>, StringUtils.unqualify(<span class="string">&quot;cn.wolfcode.java&quot;</span>));</span><br><span class="line">assertEquals(<span class="string">&quot;java&quot;</span>, StringUtils.unqualify(<span class="string">&quot;cn/wolfcode/Hello.java&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String unqualify(String qualifiedName, char separator):</span></span><br><span class="line"><span class="comment">// 得到以给定字符分割的最后一个值，可以非常方便的获取类似文件名</span></span><br><span class="line">assertEquals(<span class="string">&quot;Hello.java&quot;</span>, StringUtils.unqualify(<span class="string">&quot;cn/wolfcode/Hello.java&quot;</span>, File.separatorChar));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String capitalize(String str):首字母大写</span></span><br><span class="line">assertEquals(<span class="string">&quot;Wolfcode&quot;</span>, StringUtils.capitalize(<span class="string">&quot;wolfcode&quot;</span>));</span><br><span class="line"><span class="comment">// String uncapitalize(String str):取消首字母大写（首字母小写）</span></span><br><span class="line">assertEquals(<span class="string">&quot;java&quot;</span>, StringUtils.uncapitalize(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String getFilename(String path):获取文件名,就不需要再使用FilenameUtils</span></span><br><span class="line">assertEquals(<span class="string">&quot;myfile.txt&quot;</span>,StringUtils.getFilename(<span class="string">&quot;mypath/myfile.txt&quot;</span>));</span><br><span class="line"><span class="comment">// String getFilenameExtension(String path):获取文件后缀名</span></span><br><span class="line">assertEquals(<span class="string">&quot;txt&quot;</span>,StringUtils.getFilenameExtension(<span class="string">&quot;mypath/myfile.txt&quot;</span>));</span><br><span class="line"><span class="comment">// String stripFilenameExtension(String path):截取掉文件路径后缀</span></span><br><span class="line">assertEquals(<span class="string">&quot;mypath/myfile&quot;</span>, StringUtils.stripFilenameExtension(<span class="string">&quot;mypath/myfile.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String applyRelativePath(String path, String relativePath):</span></span><br><span class="line"><span class="comment">// 找到给定的文件，和另一个相对路径的文件，返回第二个文件的全路径</span></span><br><span class="line"><span class="comment">// 打印：d:/java/wolfcode/other/Some.java</span></span><br><span class="line">System.out.println(StringUtils.applyRelativePath(<span class="string">&quot;d:/java/wolfcode/Test.java&quot;</span>, <span class="string">&quot;other/Some.java&quot;</span>));</span><br><span class="line"><span class="comment">// 但是不支持重新定位绝对路径和上级目录等复杂一些的相对路径写法：</span></span><br><span class="line"><span class="comment">// 仍然打印：d:/java/wolfcode/../other/Some.java</span></span><br><span class="line">System.out.println(StringUtils.applyRelativePath(<span class="string">&quot;d:/java/wolfcode/Test.java&quot;</span>, <span class="string">&quot;../other/Some.java&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String cleanPath(String path): =====这个方法非常的重要</span></span><br><span class="line"><span class="comment">// 清理文件路径,这个方法配合applyRelativePath就可以计算一些简单的相对路径了</span></span><br><span class="line"><span class="comment">// 打印:d:/java/other/Some.java</span></span><br><span class="line">System.out.println(StringUtils.cleanPath(<span class="string">&quot;d:/java/wolfcode/../other/Some.java&quot;</span>));</span><br><span class="line"><span class="comment">// 需求：获取d:/java/wolfcode/Test.java相对路径为../../other/Some.java的文件全路径：</span></span><br><span class="line"><span class="comment">// 打印：d:/other/Some.java</span></span><br><span class="line">System.out.println(StringUtils.cleanPath(StringUtils.applyRelativePath( <span class="string">&quot;d:/java/wolfcode/Test.java&quot;</span>, <span class="string">&quot;../../other/Some.java&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean pathEquals(String path1, String path2):</span></span><br><span class="line"><span class="comment">// 判断两个文件路径是否相同，会先执行cleanPath之后再比较</span></span><br><span class="line">assertTrue(StringUtils.pathEquals(<span class="string">&quot;d:/wolfcode.txt&quot;</span>,<span class="string">&quot;d:/somefile/../wolfcode.txt&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-字符串和子串的操作"><a class="markdownIt-Anchor" href="#4-字符串和子串的操作"></a> <strong>4 字符串和子串的操作</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean substringMatch(CharSequence str, int index, CharSequence</span></span><br><span class="line"><span class="comment">// substring):判断从指定索引开始，是否匹配子字符串</span></span><br><span class="line">assertTrue(StringUtils.substringMatch(<span class="string">&quot;aabbccdd&quot;</span>, <span class="number">1</span>, <span class="string">&quot;abb&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// int countOccurrencesOf(String str, String sub):判断子字符串在字符串中出现的次数</span></span><br><span class="line">assertEquals(<span class="number">4</span>, StringUtils.countOccurrencesOf(<span class="string">&quot;ababaabab&quot;</span>, <span class="string">&quot;ab&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String replace(String inString, String oldPattern, String</span></span><br><span class="line"><span class="comment">// newPattern):在字符串中使用子字符串替换</span></span><br><span class="line">assertEquals(<span class="string">&quot;cdcdacdcd&quot;</span>, StringUtils.replace(<span class="string">&quot;ababaabab&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String delete(String inString, String pattern):删除所有匹配的子字符串；</span></span><br><span class="line">assertEquals(<span class="string">&quot;a&quot;</span>, StringUtils.delete(<span class="string">&quot;ababaabab&quot;</span>, <span class="string">&quot;ab&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String deleteAny(String inString, String charsToDelete):删除子字符串中任意出现的字符</span></span><br><span class="line">assertEquals(<span class="string">&quot;&quot;</span>, StringUtils.deleteAny(<span class="string">&quot;ababaabab&quot;</span>, <span class="string">&quot;bar&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String quote(String str) :在字符串前后增加单引号,比较适合在日志时候使用；</span></span><br><span class="line">assertEquals(<span class="string">&quot;&#x27;hello&#x27;&quot;</span>, StringUtils.quote(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-和locale相关的一些字符串操作"><a class="markdownIt-Anchor" href="#5-和locale相关的一些字符串操作"></a> 5 <strong>和Locale相关的一些字符串操作</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Locale parseLocaleString(String localeString):</span></span><br><span class="line"><span class="comment">// 从本地化字符串中解析出本地化信息，相当于Locale.toString()的逆向方法</span></span><br><span class="line">assertEquals(Locale.CHINA, StringUtils.parseLocaleString(<span class="string">&quot;zh_CN&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// @deprecated as of 5.0.4, in favor of &#123;@link Locale#toLanguageTag()&#125;</span></span><br><span class="line"><span class="comment">// String toLanguageTag(Locale locale):把Locale转化成HTTP中Accept-Language能接受的本地化标准；</span></span><br><span class="line"><span class="comment">// 比如标准的本地化字符串为：zh_CN，更改为zh-CN</span></span><br><span class="line">System.out.println(StringUtils.toLanguageTag(StringUtils.parseLocaleString(<span class="string">&quot;zh_CN&quot;</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-字符串和properties"><a class="markdownIt-Anchor" href="#6-字符串和properties"></a> 6 <strong>字符串和Properties</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Properties splitArrayElementsIntoProperties(String[] array, String delimiter):</span></span><br><span class="line"><span class="comment">// 把字符串数组中的每一个字符串按照给定的分隔符装配到一个Properties中</span></span><br><span class="line">String[] strs=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;key:value&quot;</span>,<span class="string">&quot;key2:中文&quot;</span>&#125;;</span><br><span class="line">Properties ps=StringUtils.splitArrayElementsIntoProperties(strs, <span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="comment">//打印输出：&#123;key=value, key2=中文&#125;</span></span><br><span class="line">System.out.println(ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Properties splitArrayElementsIntoProperties(String[] array, String delimiter, String charsToDelete)</span></span><br><span class="line"><span class="comment">//把字符串数组中的每一个字符串按照给定的分隔符装配到一个Properties中,并删除指定字符串，比如括号之类的；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7 <strong><code>字符串和数组之间的基本操作（重要）</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String[] addStringToArray(String[] array, String str):把一个字符串添加到一个字符串数组中</span></span><br><span class="line"><span class="comment">// 打印：[a, b, c, d]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils</span><br><span class="line">        .addStringToArray(<span class="keyword">new</span> String[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span> &#125;, <span class="string">&quot;d&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// String[] concatenateStringArrays(String[] array1, String[]array2):连接两个字符串数组</span></span><br><span class="line"><span class="comment">//打印：[a, b, c, a, b, c, d]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils.concatenateStringArrays(</span><br><span class="line">        <span class="keyword">new</span> String[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> String[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span> &#125;)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] mergeStringArrays(String[] array1, String[] array2)：连接两个字符串数组，去掉重复元素</span></span><br><span class="line"><span class="comment">//打印：[a, b, c, d]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils.mergeStringArrays(</span><br><span class="line">        <span class="keyword">new</span> String[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> String[] &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span> &#125;)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] sortStringArray(String[] array):字符串数组排序</span></span><br><span class="line"><span class="comment">//打印：[a, b, c, d]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils.sortStringArray(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;d&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] toStringArray(Collection&lt;String&gt; collection):把字符串集合变成字符串数组</span></span><br><span class="line"><span class="comment">//String[] toStringArray(Enumeration&lt;String&gt; enumeration):把字符串枚举类型变成字符串数组</span></span><br><span class="line"><span class="comment">//String[] trimArrayElements(String[] array):把字符串数组中所有字符串执行trim功能；</span></span><br><span class="line"><span class="comment">//String[] removeDuplicateStrings(String[] array):去掉给定字符串数组中重复的元素，能保持原顺序；</span></span><br><span class="line"><span class="comment">//String[] split(String toSplit, String delimiter):按照指定字符串分割字符串；</span></span><br><span class="line">assertArrayEquals(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;wolfcode&quot;</span>,<span class="string">&quot;cn&quot;</span>&#125;, StringUtils.split(<span class="string">&quot;wolfcode.cn&quot;</span>, <span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="comment">//只分割第一次，打印：[www, wolfcode.cn]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils.split(<span class="string">&quot;www.wolfcode.cn&quot;</span>, <span class="string">&quot;.&quot;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] tokenizeToStringArray(String str, String delimiters)</span></span><br><span class="line"><span class="comment">//会对每一个元素执行trim操作，并去掉空字符串</span></span><br><span class="line"><span class="comment">//使用的是StringTokenizer完成，</span></span><br><span class="line"><span class="comment">//打印[b, c, d]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils.tokenizeToStringArray(<span class="string">&quot;aa,ba,ca,da&quot;</span>, <span class="string">&quot;a,&quot;</span>)));</span><br><span class="line"><span class="comment">//String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens)</span></span><br><span class="line"><span class="comment">//后面两个参数在限定是否对每一个元素执行trim操作，是否去掉空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] delimitedListToStringArray(String str, String delimiter):分割字符串，会把delimiter作为整体分隔符</span></span><br><span class="line"><span class="comment">//打印：[a, b, c, da]</span></span><br><span class="line">System.out.println(Arrays.toString(StringUtils.delimitedListToStringArray(<span class="string">&quot;aa,ba,ca,da&quot;</span>, <span class="string">&quot;a,&quot;</span>)));</span><br><span class="line"><span class="comment">//String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete)</span></span><br><span class="line"><span class="comment">//分割字符串，会把delimiter作为整体分隔符，增加一个要从分割字符串中删除的字符；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String[] commaDelimitedListToStringArray(String str):使用逗号分割字符串</span></span><br><span class="line"><span class="comment">//是delimitedListToStringArray(str, &quot;,&quot;)的简单方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set&lt;String&gt; commaDelimitedListToSet(String str)：使用逗号分割字符串，并放到set中去重</span></span><br><span class="line"><span class="comment">//使用LinkedHashSet;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String collectionToDelimitedString(Collection&lt;?&gt; coll, String delim, String prefix, String suffix)</span></span><br><span class="line"><span class="comment">//将一个集合中的元素，使用前缀，后缀，分隔符拼装一个字符串，前缀后后缀是针对每一个字符串的</span></span><br><span class="line">String[] arrs=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>&#125;;</span><br><span class="line">assertEquals(<span class="string">&quot;&#123;aa&#125;,&#123;bb&#125;,&#123;cc&#125;,&#123;dd&#125;&quot;</span>, StringUtils.collectionToDelimitedString(Arrays.asList(arrs),<span class="string">&quot;,&quot;</span>,<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//String collectionToDelimitedString(Collection&lt;?&gt; coll, String delim)：集合变成指定字符串连接的字符串；</span></span><br><span class="line"><span class="comment">//是collectionToDelimitedString(coll, delim, &quot;&quot;, &quot;&quot;)的简写；</span></span><br><span class="line"><span class="comment">//String collectionToCommaDelimitedString(Collection&lt;?&gt; coll)：集合变成逗号连接的字符串；</span></span><br><span class="line"><span class="comment">//是collectionToDelimitedString(coll, &quot;,&quot;);的简写；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String arrayToDelimitedString(Object[] arr, String delim)：数组使用指定字符串连接；</span></span><br><span class="line"><span class="comment">//String arrayToCommaDelimitedString(Object[] arr)：使用逗号连接数组，拼成字符串；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>StringUtils类中的方法其实真的还是很多，可能平时我们用的比较多的还是一些普通的方法，其实类似文件路径，文件名等相关操作，以前还会专门引入common-io的FilenameUtils等额外的工具类，原来在StringUtils中都有，而且根据其设计的这些方法，我们也能大概的猜出一些方法在Spring中哪些地方可能有用；</strong></p></blockquote><h2 id="17-systempropertyutils-占位符解析工具类"><a class="markdownIt-Anchor" href="#17-systempropertyutils-占位符解析工具类"></a> 17 SystemPropertyUtils 占位符解析工具类</h2><blockquote><p>该类依赖于上面已经说到的<code>PropertyPlaceholderHelper</code>来处理。本类只处理系统默认属性值</p><p>该工具类很简单，但是非常的使用。可以很好的利用起来，Spring内部也有非常之多的使用。</p><p>在平时的程序开发中，我们也经常会遇到一些痛点，比如规则引擎（公式）：<code>A=$&#123;B&#125;+$&#123;C&#125;+1</code>，这样我们只需要得到B和C的值，然后再放入公式计算即可</p><p>占位符在Spring、Tomcat、Maven里都有大量的使用。下面用简单的例子体验一把：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">resolvePlaceholders</span><span class="params">(String text)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果标志位为true，则没有默认值的无法解析的占位符将保留原样不被解析 默认为false</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">resolvePlaceholders</span><span class="params">(String text, <span class="keyword">boolean</span> ignoreUnresolvablePlaceholders)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(SystemPropertyUtils.resolvePlaceholders(<span class="string">&quot;$&#123;os.name&#125;/logs/app.log&quot;</span>)); <span class="comment">//Windows 10/logs/app.log</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注：这里如果不传true，如果找不到app.root这个key就会报错哦。传true后找不到也原样输出</span></span><br><span class="line">    System.out.println(SystemPropertyUtils.resolvePlaceholders(<span class="string">&quot;$&#123;app.root&#125;/logs/app.log&quot;</span>, <span class="keyword">true</span>)); <span class="comment">//$&#123;app.root&#125;/logs/app.log</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，<code>org.springframework.core.io.support.PropertiesLoaderUtils</code>也是Spring提供的加载<code>.properties</code>配置文件的重要工具类之一~</p><p><a href="https://blog.csdn.net/f641385712/article/details/89380067?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160777993819724818085193%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160777993819724818085193&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-89380067.pc_v2_rank_blog_default&amp;utm_term=%E5%B7%A5%E5%85%B7%E7%B1%BB&amp;spm=1018.2118.3001.4450">A哥Spring工具类第二篇</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring - Spring基础 - Spring工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring - Spring基础 - Spring工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis源码学习</title>
      <link href="/2020/12/09/Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/12/09/Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-架构设计"><a class="markdownIt-Anchor" href="#mybatis-架构设计"></a> Mybatis 架构设计</h1>]]></content>
      
      
      <categories>
          
          <category> Mybatis源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础入门</title>
      <link href="/2020/12/08/Docker%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/12/08/Docker%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker基础入门"><a class="markdownIt-Anchor" href="#1-docker基础入门"></a> 1 Docker基础入门</h1><p>Docker设置代理:<a href="https://docs.docker.com/config/daemon/systemd/">https://docs.docker.com/config/daemon/systemd/</a></p><h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1 安装</h2><h3 id="1-安装docker"><a class="markdownIt-Anchor" href="#1-安装docker"></a> 1 安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.卸载旧版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#默认是从国外的，不推荐</span></span><br><span class="line"><span class="comment">#推荐使用国内的</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.安装docker相关的(docker-ce 社区版 而ee是企业版)</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.使用docker version查看是否按照成功</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="2-配置阿里云镜像加速"><a class="markdownIt-Anchor" href="#2-配置阿里云镜像加速"></a> 2 配置阿里云镜像加速</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://4bj04jx5.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="2-命令"><a class="markdownIt-Anchor" href="#2-命令"></a> 2 命令</h2><h3 id="1-帮助命令"><a class="markdownIt-Anchor" href="#1-帮助命令"></a> 1 帮助命令</h3><ul><li><code>docker version</code></li><li><code>docker info</code></li><li><code>docker --help</code></li></ul><h3 id="2-镜像命令"><a class="markdownIt-Anchor" href="#2-镜像命令"></a> 2  镜像命令</h3><ul><li><p><code>docker images</code> 列出本地的镜像</p><ul><li><code>-a</code> 列出本地所有的镜像（含中间映像层）</li><li><code>-q</code> 只显示镜像ID</li><li><code>--digests</code> 显示镜像的摘要信息</li><li><code>--no-trunc</code> 显示完整的镜像信息</li></ul></li><li><p><code>docker search &lt;某个镜像的名字&gt;</code></p><ul><li><code>--no--trunc</code> 显示完整的镜像描述</li><li><code>-s</code> 列出收藏数不小于指定值的镜像</li><li><code>automated</code> 只列出automated build类型的镜像</li></ul></li><li><p><code>docker pull &lt;某个XXX镜像的名字&gt;</code></p></li><li><p><code>docker rmi &lt;某个XXX镜像名字ID&gt;</code></p></li><li><p>删除镜像</p><ul><li>删除单个 <code>docker rmi -f &lt;镜像ID&gt;</code></li><li>删除多个 <code>docker rmi -f 镜像名1:TAG 镜像名2:TAG</code></li><li>删除全部 <code>docker rmi -f $&#123;docker images -qa&#125;</code></li><li>docker ps -a -q | xargs docker rm</li></ul></li></ul><h3 id="3-容器命令"><a class="markdownIt-Anchor" href="#3-容器命令"></a> 3 容器命令</h3><ul><li><code>docker run &lt;IMAGE&gt;</code><ul><li><code>--name=&lt;容器的新名字&gt;</code></li><li><code>-d</code> 后台运行容器,并返回容器ID,启动守护式容器</li><li><code>-i</code>交互式</li><li><code>-t</code>为容器重新分配一个伪输入终端</li><li><code>-P</code> 随机端口映射</li><li><code>-p</code>指定端口映射<ul><li>ip:hostPort:containerPort</li><li>ip::containerPort</li><li>hostPort:containerPort</li><li>containerPort</li></ul></li></ul></li><li><code>docker run -it centos /bin/bash</code></li></ul><blockquote><p>#使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p></blockquote><ul><li><p><code>docker ps</code> 列出所有<strong>正在运行</strong>的容器</p><ul><li><code>-a</code> :列出当前所有正在运行的容器+历史上运行过的</li><li><code>-l</code> :显示最近创建的容器。</li><li><code>-n</code>：显示最近n个创建的容器。</li><li><code>-q</code> :静默模式，只显示容器编号。</li><li><code>--no-trunc</code> :不截断输出。</li></ul></li><li><p><code>exit</code> 容器停止推出</p></li><li><p><code>ctrk + P +Q</code> 容器不停止退出</p></li><li><p><code>docker start</code> 启动容器</p></li><li><p><code>docker stop</code>容器ID或者容器名</p></li><li><p><code>docker kill</code> 容器ID或者容器名</p></li><li><p><code>docker run -d centos /bin/sh -c &quot;while true;do echo hello zzyy;sleep 2;done&quot;</code></p></li></ul><blockquote><p>#使用镜像centos:latest以后台模式启动一个容器</p><p>docker run -d centos</p><p>问题：然后docker ps -a 进行查看, 会发现容器已经退出</p><p>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.</p><p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p><p>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如</p><p>service nginx start</p><p>但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,</p><p>这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.</p><p>所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行</p></blockquote><ul><li><code>docker logs -f -t --tail &lt;容器Id&gt;</code>查看日志</li><li><code>docker top &lt;容器Id&gt;</code> 查看容器内进程</li><li><code>docker inspect &lt;容器ID&gt;</code> 查看容器内部细节</li><li><code>docker exec -it &lt;容器ID&gt; bashShell</code></li><li><code>docker attach &lt;容器ID&gt;</code></li></ul><blockquote><p>attach 直接进入容器启动命令终端,不会启新的进程</p><p>exec 是在容器打开新的终端,并且可以启动新的进程</p></blockquote><ul><li><code>docker cp 容器ID:路径 路径</code> 从容器拷贝到主机上</li></ul><h2 id="3-docker-镜像"><a class="markdownIt-Anchor" href="#3-docker-镜像"></a> 3 Docker 镜像</h2><h2 id="4-docker数据卷"><a class="markdownIt-Anchor" href="#4-docker数据卷"></a> 4 Docker数据卷</h2><h2 id="5-dockerfile"><a class="markdownIt-Anchor" href="#5-dockerfile"></a> 5 DockerFile</h2><h3 id="1-是什么"><a class="markdownIt-Anchor" href="#1-是什么"></a> 1 是什么？</h3><blockquote><p>DockerFIle是用来构建Docker镜像的构建工具,是由一系列命令和参数构成的脚本</p></blockquote><p><strong>构建三步:</strong></p><ol><li>编写DockerFile</li><li>docker build</li><li>docker run</li></ol><h3 id="2-dockerfile构建解析"><a class="markdownIt-Anchor" href="#2-dockerfile构建解析"></a> 2 DockerFIle构建解析</h3><h4 id="1-dockerfile的内容基础"><a class="markdownIt-Anchor" href="#1-dockerfile的内容基础"></a> 1 DockerFIle的内容基础</h4><ol><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下,顺序执行</li><li># 表示注释</li><li><strong>每条指令都会创建一个新的镜像曾,并对镜像进行提交</strong></li></ol><h4 id="2-docker执行dockerfile的大致流程"><a class="markdownIt-Anchor" href="#2-docker执行dockerfile的大致流程"></a> 2 Docker执行Dockerfile的大致流程</h4><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指定并对容器做出修改</li><li>执行类似docker commit 的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行dockerfile的下一条指令知道所有指令都执行完成</li></ol><h3 id="3-docker体系结构保留字指令"><a class="markdownIt-Anchor" href="#3-docker体系结构保留字指令"></a> 3 Docker体系结构(保留字指令)</h3><ul><li><p><code>FORM</code> 基础镜像,当前镜像是基于那个镜像的</p></li><li><p><code>MAINTAINER</code> 镜像的作者与作者的邮箱</p></li><li><p><code>RUN</code> 容器构建需要执行的命令</p></li><li><p><code>EXPOSE</code>容器对外暴露的端口</p></li><li><p><code>WORKDIR</code>指定再创建容器后,终端默认登录进来的工作目录,一个落脚点</p></li><li><p><code>ENV</code>用于在构建镜像过程中设置环境变量</p></li><li><p><code>ADD</code> 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</p></li><li><p><code>COPY</code>类似于ADD 拷贝文件和目录到镜像中,将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内&lt;目标路径&gt;的位置</p></li><li><p><code>VOLUME</code>容器数据卷,用于数据保存和持久化工作</p></li><li><p><code>CMD</code> 指定一个容器启动时要运行的命令,DockerFIle中可以又多个CMD指令,但只有最后一个生效,CMD会被docker run的参数替换</p></li><li><p><code>ENTRYPOINT</code> 指定一个容器启动的时候要运行的命令,ENTRYPOINT的目的和CMD一样,都是在指定容器启动程序及参数</p></li><li><p><code>ONBUILD</code>当构建一个被继承的DockerFile时运行命令,父镜像在被子继承后,父镜像的onbuild被触发</p></li></ul><table><thead><tr><th>BUILD</th><th>Both</th><th>RUN</th></tr></thead><tbody><tr><td>FROM</td><td>WORKDIR</td><td>CMD</td></tr><tr><td>MAINTAINER</td><td>USER</td><td>ENV</td></tr><tr><td>COPY</td><td></td><td>EXPOSE</td></tr><tr><td>ADD</td><td></td><td>VOLUME</td></tr><tr><td>RUN</td><td></td><td>ENTRYPOINT</td></tr><tr><td>ONBUILD</td><td></td><td></td></tr><tr><td>.dockerignore</td><td></td><td></td></tr></tbody></table><h2 id="6-案例"><a class="markdownIt-Anchor" href="#6-案例"></a> 6 案例</h2><h3 id="1-base镜像scratch"><a class="markdownIt-Anchor" href="#1-base镜像scratch"></a> 1 BASE镜像(scratch)</h3><blockquote><p>DockerHub中 99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p></blockquote><h3 id="2-自定义镜像mycentos"><a class="markdownIt-Anchor" href="#2-自定义镜像mycentos"></a> 2 自定义镜像mycentos</h3><p><strong>需求:</strong></p><ol><li><p>登录后的默认路径</p></li><li><p>vim编辑器</p></li><li><p>查看网络配置ifconfig支持</p></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">ENV</span> mypath /tmp</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$mypath</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p><strong>构建:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># . 表示上下文环境</span></span><br><span class="line">docker build -t 新镜像名字:TAG .</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">dokcer run -it 新镜像名字:TAG</span><br><span class="line"><span class="comment"># 列出镜像的变更历史</span></span><br><span class="line">docker <span class="built_in">history</span> 镜像名</span><br></pre></td></tr></table></figure><h3 id="3-entrypoint命令"><a class="markdownIt-Anchor" href="#3-entrypoint命令"></a> 3 ENTRYPOINT命令</h3><p><strong>CMD</strong></p><blockquote><p>Dockerfile中可以有多个CMD指令,但只有最后一个生效,CMD会被Docker run 之后的参数替换</p></blockquote><p><strong>ENTRYPOINT</strong></p><blockquote><p>docker run 之后的参数会被当作参数传递给ENTRYPOINT.之后形成新的命令组合</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-java&quot;</span>,<span class="string">&quot;test.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="4-自定义镜像tomcat"><a class="markdownIt-Anchor" href="#4-自定义镜像tomcat"></a> 4 自定义镜像Tomcat</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>         centos</span><br><span class="line"><span class="keyword">MAINTAINER</span>    zzyy&lt;zzyybs@<span class="number">126</span>.com&gt;</span><br><span class="line"><span class="comment">#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> c.txt /usr/<span class="built_in">local</span>/cincontainer.txt</span></span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-9.0.8.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASE /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">8080</span></span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line"><span class="comment"># ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.8/bin/startup.sh&quot; ]</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/local/apache-tomcat-9.0.8/bin/catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/</span></span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9080:8080 --name myt9 -v /zzyyuse/mydockerfile/tomcat9/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/webapps/<span class="built_in">test</span> -v /zzyyuse/mydockerfile/tomcat9/tomcat9logs/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/logs --privileged=<span class="literal">true</span> zzyytomcat9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-docker网络"><a class="markdownIt-Anchor" href="#7-docker网络"></a> 7 Docker网络</h2><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/08/Docker%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20201222233356901.png" alt="image-20201222233356901"></p><ul><li>容器的网卡是一对一对的</li><li>evth-pair，就是一对虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连</li><li>evth-pair充当一个桥梁，连接各种虚拟网络</li></ul><blockquote><p>所有的容器不指定网络的情况下,都是docker0,docker会给容器分配一个默认的IP</p></blockquote><h2 id="8-容器互联link不推荐"><a class="markdownIt-Anchor" href="#8-容器互联link不推荐"></a> 8 容器互联–link（不推荐）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --link 连接网络,centos 可以ping通tomcat 反之不行，在host的配置中添加了tomcat的映射</span></span><br><span class="line">docker run -d -P --name centos --link tomcat</span><br></pre></td></tr></table></figure><h2 id="9-自定义网络"><a class="markdownIt-Anchor" href="#9-自定义网络"></a> 9 自定义网络</h2><ul><li>brideg 桥接（默认）自定义方式</li><li>none 不配置网络</li><li>host 和宿主机共享网络</li><li>container 容器网络连通（局限性大）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">b1641c6fe2b8        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">6e94609c9ec5        host                host                <span class="built_in">local</span></span><br><span class="line">13cba1d43999        none                null                <span class="built_in">local</span></span><br><span class="line">[root@localhost ~]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接启动的命令默认有一个 --net bridge  这个就是docker0</span></span><br><span class="line">docker run -d -P --name centos --net bridge centos</span><br><span class="line"><span class="comment"># docker0 特点，默认，域名不能访问，--link可以打通连接</span></span><br><span class="line"></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.1/16 --gateway 192.168.0.1 customnet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络</span></span><br><span class="line">docker network inspect customnet</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>自定义网络docker可以帮助维护对应关系，推荐平时使用</p><p>不同的集群可以使用不同的网络，保证集群是安全和健康的</p></blockquote><h3 id="自定义网络连通docker0或者其他网络"><a class="markdownIt-Anchor" href="#自定义网络连通docker0或者其他网络"></a> 自定义网络连通docker0或者其他网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network connect customnet centos</span><br><span class="line"><span class="comment">#连通之后就是把 centos 与customnet 打通，将centos放到了customnet网络下，也就是一个容器两个ip</span></span><br></pre></td></tr></table></figure><p>跨网络操作其他容器就需要使用docker network connect</p><h2 id="10-redis集群"><a class="markdownIt-Anchor" href="#10-redis集群"></a> 10 Redis集群</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">16</span> --gateway <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> redis</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索技巧[持续更新]</title>
      <link href="/2020/12/06/Goole%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/12/06/Goole%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="google"><a class="markdownIt-Anchor" href="#google"></a> GooGle</h1><ul><li>排除指定网站 <code>-site:blog.csdn.net</code></li><li>指定网站 <code>site:blog.csdn.net</code></li></ul><h1 id="github"><a class="markdownIt-Anchor" href="#github"></a> GitHub</h1><h2 id="指定搜索方式"><a class="markdownIt-Anchor" href="#指定搜索方式"></a> 指定搜索方式</h2><ul><li><p>&lt;content&gt; in:file 搜索文件中有content的代码</p></li><li><p>&lt;content&gt; in:path 搜索路径中有content的代码</p></li><li><p>&lt;content&gt; language:java  搜索用java写的包含content的代码</p></li><li><p>&lt;content&gt; in:fille,path  搜索路径或者是文件中有xxx的代码</p></li></ul><h2 id="通过语言搜索代码"><a class="markdownIt-Anchor" href="#通过语言搜索代码"></a> 通过语言搜索代码</h2><ul><li>language:java     搜索用java写的代码</li></ul><h2 id="通过fork的数量或者是否有父节点的方式搜索"><a class="markdownIt-Anchor" href="#通过fork的数量或者是否有父节点的方式搜索"></a> 通过fork的数量或者是否有父节点的方式搜索</h2><ul><li>boot language:java fork:true  搜索用Java写的boot关的代码并且被fork过</li></ul><h2 id="按照目录结构搜索"><a class="markdownIt-Anchor" href="#按照目录结构搜索"></a> 按照目录结构搜索</h2><ul><li>controller path:src/main language:java 在<em>src/main</em> 目录下搜索controller关键字</li></ul><h2 id="通过文件名搜索"><a class="markdownIt-Anchor" href="#通过文件名搜索"></a> 通过文件名搜索</h2><ul><li><p>filename:.vimrc commands 搜索 文件名匹配*.vimrc* 并且包含commands的代码</p></li><li><p>minitest filename:test_helper path:test language:ruby 在test目录中搜索包含minitest且文件名匹配&quot;<em>test_helper</em>&quot;的代码</p></li></ul><h2 id="根据扩展名来搜索代码"><a class="markdownIt-Anchor" href="#根据扩展名来搜索代码"></a> 根据扩展名来搜索代码</h2><ul><li>form path:cgi-bin extension:pm    搜索cgi-bin目录下以pm为扩展名的代码</li></ul><h3 id="参阅"><a class="markdownIt-Anchor" href="#参阅"></a> 参阅</h3><p><a href="https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-for-repositories">Github官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC文件下载</title>
      <link href="/2020/12/06/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/12/06/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="springmvc-文件下载"><a class="markdownIt-Anchor" href="#springmvc-文件下载"></a> SpringMVC 文件下载</h1><h1 id="1-resource同步文件下载方式"><a class="markdownIt-Anchor" href="#1-resource同步文件下载方式"></a> 1 Resource同步文件下载方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/test/download/&#123;fileName&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Resource&gt; <span class="title">downLoad</span><span class="params">(<span class="meta">@PathVariable(&quot;fileName&quot;)</span> String fileName)</span> <span class="keyword">throws</span> UnsupportedEncodingException, InterruptedException </span>&#123;</span><br><span class="line">    String filePath = <span class="string">&quot;D:\\00_aa_lijinze_java_web_stady\\&quot;</span> + fileName;</span><br><span class="line">    FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(filePath);</span><br><span class="line">    MediaType mediaType = MediaTypeFactory</span><br><span class="line">            .getMediaType(resource)</span><br><span class="line">            .orElse(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(mediaType);</span><br><span class="line">    ContentDisposition disposition = ContentDisposition.builder(<span class="string">&quot;attachment&quot;</span>)</span><br><span class="line">            .filename(<span class="keyword">new</span> String(resource.getFilename().getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    headers.setContentDisposition(disposition);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(resource, headers, HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-streamingresponsebody-异步下载方式"><a class="markdownIt-Anchor" href="#2-streamingresponsebody-异步下载方式"></a> 2 StreamingResponseBody 异步下载方式</h1><h3 id="1-配置task"><a class="markdownIt-Anchor" href="#1-配置task"></a> 1 配置Task</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfiguration</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncTaskExecutor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;Creating Async Task Executor&quot;</span>);</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAsyncUncaughtExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Configure async support for Spring MVC. */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">(<span class="meta">@Qualifier(&quot;taskExecutor&quot;)</span> AsyncTaskExecutor taskExecutor, CallableProcessingInterceptor callableProcessingInterceptor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                configurer.setDefaultTimeout(<span class="number">360000</span>).setTaskExecutor(taskExecutor);</span><br><span class="line">                configurer.registerCallableInterceptors(callableProcessingInterceptor);</span><br><span class="line">                WebMvcConfigurer.<span class="keyword">super</span>.configureAsyncSupport(configurer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CallableProcessingInterceptor <span class="title">callableProcessingInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TimeoutCallableProcessingInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;T&gt; <span class="function">Object <span class="title">handleTimeout</span><span class="params">(NativeWebRequest request, Callable&lt;T&gt; task)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.error(<span class="string">&quot;timeout!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.handleTimeout(request, task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-异步下载"><a class="markdownIt-Anchor" href="#2-异步下载"></a> 2 异步下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/test/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;StreamingResponseBody&gt; <span class="title">downLoad2</span><span class="params">()</span> <span class="keyword">throws</span> IOExceptionn </span>&#123;</span><br><span class="line">    String filePath = <span class="string">&quot;D:\\00_aa_lijinze_java_web_stady\\《Spring源码深度解析（第2版）》_郝佳- AiBooKs.Cc.pdf&quot;</span>;</span><br><span class="line">    FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(filePath);</span><br><span class="line">    MediaType mediaType = MediaTypeFactory</span><br><span class="line">            .getMediaType(resource)</span><br><span class="line">            .orElse(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();s</span><br><span class="line">    headers.setContentType(mediaType);</span><br><span class="line">    ContentDisposition disposition = ContentDisposition.builder(<span class="string">&quot;attachment&quot;</span>)</span><br><span class="line">            .filename(<span class="keyword">new</span> String(resource.getFilename().getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;ISO-8859-1&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    headers.setContentDisposition(disposition);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;StreamingResponseBody&gt;(outputStream -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedOutputStream stream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">             BufferedInputStream inputStream = <span class="keyword">new</span> BufferedInputStream(resource.getInputStream());) &#123;</span><br><span class="line">            StreamUtils.copy(inputStream, stream);</span><br><span class="line">    &#125;, headers, HttpStatus.CREATE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC - 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC - 文件下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC多块请求解析器</title>
      <link href="/2020/12/06/Spring-MVC%E5%A4%9A%E5%9D%97%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
      <url>/2020/12/06/Spring-MVC%E5%A4%9A%E5%9D%97%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-多块请求解析器"><a class="markdownIt-Anchor" href="#1-多块请求解析器"></a> 1 多块请求解析器</h1><blockquote><p>​在进入doDispatcher方法后，最先用到的组件是多块请求解析器。多块请求解析器接口 包括以下三个方法。</p></blockquote><ul><li>boolean isMultipart(HttpServletRequest request);</li></ul><blockquote><p>判断是否为多块请求</p></blockquote><ul><li><p>MultipartHttpServletRequest resolveMultipart(HttpServletRequest reuqest)</p><blockquote><p>用于解析多块请求，返回新的包装类型MultipartHttpServletRequest 封装多块请求相关方法与属性</p></blockquote></li><li><p>void cleanupMultipart(MultipartHttpServletRequest  request);</p><blockquote><p>用于在请求处理完成后对多块请求使用的资源执行清理操作</p></blockquote></li></ul><blockquote><p>默认的多块请求解析器为StandardServletMultipartResolver。在请求处理时候，先使用isMultipart判断是否为多块请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为多块请求</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断前缀</span></span><br><span class="line">    <span class="keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(), <span class="string">&quot;multipart/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-处理多块请求逻辑"><a class="markdownIt-Anchor" href="#1-处理多块请求逻辑"></a> 1 处理多块请求逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">    <span class="comment">// 对原始request进行包装</span></span><br><span class="line">    <span class="comment">//resolveLazily默认为false,表示实例创建的时候就对请求进行解析</span></span><br><span class="line">    <span class="comment">// 该配置通过spring.servlet.multipart.resolve-lazily修改</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> StandardMultipartHttpServletRequest(request, <span class="keyword">this</span>.resolveLazily);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-standardmultiparthttpservletrequest的构造逻辑"><a class="markdownIt-Anchor" href="#2-standardmultiparthttpservletrequest的构造逻辑"></a> 2 <strong>StandardMultipartHttpServletRequest的构造逻辑</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StandardMultipartHttpServletRequest</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> lazyParsing)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line"><span class="comment">// 调用父类构造器,该类型为对HttpServletRequest的包装类,装饰者模式,用于增强原始类型的功能构造器参数为要包装的对象</span></span><br><span class="line">   <span class="keyword">super</span>(request);</span><br><span class="line">    <span class="comment">// 如果不是懒加载解析,则直接解析请求</span></span><br><span class="line">   <span class="keyword">if</span> (!lazyParsing) &#123;</span><br><span class="line">       <span class="comment">//解析请求</span></span><br><span class="line">      parseRequest(request);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-解析请求的方法"><a class="markdownIt-Anchor" href="#3-解析请求的方法"></a> 3 <strong>解析请求的方法</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取多块请求原始的Part类型集合</span></span><br><span class="line">       <span class="comment">// Part结合包括请求参数与请求文件</span></span><br><span class="line">      </span><br><span class="line">      Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">       <span class="comment">// 用于保存多块请求的请求参数名称</span></span><br><span class="line">      <span class="keyword">this</span>.multipartParameterNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parts.size());</span><br><span class="line">       <span class="comment">// 用于保存多块请求的请求文件</span></span><br><span class="line">      MultiValueMap&lt;String, MultipartFile&gt; files = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;(parts.size());</span><br><span class="line">      <span class="comment">// 遍历多块数据</span></span><br><span class="line">       <span class="keyword">for</span> (Part part : parts) &#123;</span><br><span class="line">           <span class="comment">//获取当前遍历块的Content-Disposition请求头</span></span><br><span class="line">         String headerValue = part.getHeader(HttpHeaders.CONTENT_DISPOSITION);</span><br><span class="line">           <span class="comment">// 解析Content-Disposition请求头为ContentDisposition类型,其中包括请求头内容类型,文件名等信息</span></span><br><span class="line">         ContentDisposition disposition = ContentDisposition.parse(headerValue);</span><br><span class="line">           <span class="comment">// 获取块请求的文件名</span></span><br><span class="line">         String filename = disposition.getFilename();</span><br><span class="line">           <span class="comment">// 如果文件名不为空</span></span><br><span class="line">         <span class="keyword">if</span> (filename != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 如果当前块是个文件类型的块,解析文件名</span></span><br><span class="line">            <span class="keyword">if</span> (filename.startsWith(<span class="string">&quot;=?&quot;</span>) &amp;&amp; filename.endsWith(<span class="string">&quot;?=&quot;</span>)) &#123;</span><br><span class="line">               filename = MimeDelegate.decode(filename);</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="comment">// 放入文件Map,key是请求参数名称,value是封装文件块请求与文件名的StandardMultipartFile类型</span></span><br><span class="line">            files.add(part.getName(), <span class="keyword">new</span> StandardMultipartFile(part, filename));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 不是文件类型的块请求,把块名放入请求参数名集合</span></span><br><span class="line">            <span class="keyword">this</span>.multipartParameterNames.add(part.getName());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 在本实例保存多块请求文件的map,封装为不可修改的Map,防止处理过程中被篡改</span></span><br><span class="line">      setMultipartFiles(files);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">       <span class="comment">// 发生任何异常交给异常处理逻辑抛出异常</span></span><br><span class="line">      handleParseFailure(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-清理资源"><a class="markdownIt-Anchor" href="#4-清理资源"></a> 4 清理资源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(MultipartHttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 只有是多块请求,且多块请求已经解析的情况下,才执行清理</span></span><br><span class="line">   <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> AbstractMultipartHttpServletRequest) ||</span><br><span class="line">         ((AbstractMultipartHttpServletRequest) request).isResolved()) &#123;</span><br><span class="line">      <span class="comment">// To be on the safe side: explicitly delete the parts,</span></span><br><span class="line">      <span class="comment">// but only actual file parts (for Resin compatibility)</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 遍历全部块</span></span><br><span class="line">         <span class="keyword">for</span> (Part part : request.getParts()) &#123;</span><br><span class="line">             <span class="comment">//如果块中包含文件则进行删除操作,清理占用的临时资源</span></span><br><span class="line">            <span class="keyword">if</span> (request.getFile(part.getName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               part.delete();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">         LogFactory.getLog(getClass()).warn(<span class="string">&quot;Failed to perform cleanup of multipart items&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源代码 - SpringMvc源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 - SpringMvc 多块请求解析器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cacheable + redis</title>
      <link href="/2020/12/04/Spring-Cacheable-redis/"/>
      <url>/2020/12/04/Spring-Cacheable-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring整合redis缓存"><a class="markdownIt-Anchor" href="#1-spring整合redis缓存"></a> 1 Spring整合Redis缓存</h1><h2 id="1-相关注解"><a class="markdownIt-Anchor" href="#1-相关注解"></a> 1 相关注解</h2><h3 id="1-cacheable注解"><a class="markdownIt-Anchor" href="#1-cacheable注解"></a> 1 <code>@Cacheable</code>注解</h3><p><strong>作用：</strong></p><blockquote><p>主要针对方法配置，能够根据方法的请求参数对结果进行缓存</p></blockquote><table><thead><tr><th>属性</th><th>解释</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>value</td><td>缓存的名称</td><td style="text-align:left">每一个缓存名代表一个缓存对象。当一个方法填写多个缓存名称时将创建多个缓存对象。当多个方法使用同一缓存名称时相同的缓存参数会被覆盖。所以通常情况我们使用包名+类名+方法名，或者使用接口的RequestMapping作为缓存名称防止命名重复引起的问题。   <br>单缓存名称：@Cacheable（value=“myccache”）<br>多缓存名称：@Cacheable（value={“cache1”,”cache2”}）</td></tr><tr><td>key</td><td>缓存的key</td><td style="text-align:left">key标记了缓存对象下的每一条缓存，如果不指定key则系统自动按照方法的所有入参生成key，也就是说相同的入参值会返回同样的缓存结果。<br>如果指定key则要按照SpEL表达式编写使用的入参列表。如下列无论方法存在多少个入参，只要userName值一致，则会返回相同的缓存结果。<br>@Cacheable(value=“test”,key=“#username”)</td></tr><tr><td>condition</td><td>缓存的条件</td><td style="text-align:left">满足条件后结果才会被缓存。不填写则认为无条件全部缓存<br>条件使用SpEl表达式编写，返回true或者false，只有为true才进行缓存<br>如下例，只有用户名长度大于2时才会进行缓存<br>@Cacheabke(value=“test”,condition=“#username.length()&gt;2”)</td></tr></tbody></table><h3 id="2-cacheput注解"><a class="markdownIt-Anchor" href="#2-cacheput注解"></a> 2 <code>@CachePut</code>注解</h3><blockquote><p>主要针对方法配置，能够根据方法的请求参数对结果进行缓存、和<code>@Cacheable</code>不同的是，它每次都会触发真实方法调用，此注解被常用于更新缓存使用</p></blockquote><table><thead><tr><th>属性</th><th>解释</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>缓存的名称</td><td>例如：<br>@CachePut(value=”mycache”) <br>@CachePut(value={”cache1”,”cache2”}</td></tr><tr><td>key</td><td>缓存的 key</td><td>例如：<br>@CachePut(value=”testcache”,key=”#userName”)</td></tr><tr><td>condition</td><td>缓存的条件</td><td>例如：<br>@CachePut(value=”testcache”,condition=”#userName.length()&gt;2”)</td></tr></tbody></table><h3 id="3-cacheevict注解"><a class="markdownIt-Anchor" href="#3-cacheevict注解"></a> 3 <code>@CacheEvict</code>注解</h3><blockquote><p><strong>主要针对方法配置，能够根据一定的条件对缓存进行清空</strong></p></blockquote><table><thead><tr><th>属性</th><th>解释</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>缓存的名称</td><td>删除指定名称的缓存对象。必须与下面的其中一个参数配合使用例如： <br>@CacheEvict(value=”mycache”) 或者 @CacheEvict(value={”cache1”,”cache2”}</td></tr><tr><td>key</td><td>缓存的 key</td><td>删除指定key的缓存对象<br>例如： @CacheEvict(value=”testcache”,key=”#userName”)</td></tr><tr><td>condition</td><td>缓存的条件</td><td>删除指定条件的缓存对象例如： <br>@CacheEvict(value=”testcache”,condition=”#userName.length()&gt;2”)</td></tr><tr><td>allEntries</td><td>方法执行后清空所有缓存</td><td>缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存。<br>例如：<br> @CacheEvict(value=”testcache”,allEntries=true)</td></tr><tr><td>beforeInvocation</td><td>方法执行前清空所有缓存</td><td>缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，缺省情况下，如果方法执行抛出异常，则不会清空缓存。<br>例如：<br>@CacheEvict(value=”testcache”，beforeInvocation=true)<br></td></tr></tbody></table><h2 id="2-springboot中的cache"><a class="markdownIt-Anchor" href="#2-springboot中的cache"></a> 2 SpringBoot中的Cache</h2><blockquote><p>Spring Boot为我们提供了多种缓存CacheMannger配置方案。默认情况下会使用基于内存map一种缓存方案，</p><p><code>ConcurrenMapCacheManager</code>。我们可以通过配置指定 Generic、JCache (JSR-107)、EhCache 2.x、Hazelcast、Infinispan、Redis、Guava、Simple等技术进行缓存实现。</p></blockquote><h3 id="1-引入依赖"><a class="markdownIt-Anchor" href="#1-引入依赖"></a> 1 引入依赖</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-启用缓存"><a class="markdownIt-Anchor" href="#2-启用缓存"></a> 2 启用缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">//启用缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring - Cacheable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring - Cacheable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wget 设置代理</title>
      <link href="/2020/12/03/wget-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2020/12/03/wget-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久配置</span></span><br><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">vim .wgetrc</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">http_proxy = http://your_proxy:port</span><br><span class="line">https_proxy = http://your_proxy:port</span><br><span class="line">proxy_user = user</span><br><span class="line">proxy_password = password</span><br><span class="line">use_proxy = on</span><br><span class="line"><span class="built_in">wait</span> = 15</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos - wget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos - wget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql DML条件语句与多表操作</title>
      <link href="/2020/12/02/Mysql-DML%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/12/02/Mysql-DML%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-条件与多表语句"><a class="markdownIt-Anchor" href="#1-条件与多表语句"></a> 1 条件与多表语句</h1><h2 id="1-条件插入"><a class="markdownIt-Anchor" href="#1-条件插入"></a> 1 条件插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 第一种情况插入指定字段</span><br><span class="line">insert into table_name(column1,column2)values(value1,value2);</span><br><span class="line"># 第二种情况插入所有字段:前提条件是字段顺序必须与表中字段顺序一致</span><br><span class="line">insert into table_name values(value1,value2);</span><br><span class="line"># 第三种情况批量插入数据</span><br><span class="line">insert into table_name values (value1,value2),(value1,value2);</span><br><span class="line"># 也可以指定插入批量数据</span><br><span class="line">insert into table_name(column1,column2) values(value1,value2),(value1,value2);</span><br><span class="line"># 第四种情况就是当满足了指定条件时才插入数据</span><br><span class="line">insert into (column1,column2) select value1,value2 from table_name where ...</span><br><span class="line"># 也就是后面select子句中查询出来的列作为前面的值插入到表中，但是这个列的个数要和前面的字段个数一致。select子句就可以随便写了。</span><br><span class="line"># 例如</span><br><span class="line">insert into role_menu(id,menuId) select &#x27;1&#x27;,menuId from Menu where menuId=1 and isLead=&#x27;1&#x27;;</span><br></pre></td></tr></table></figure><h2 id="2-多表删除"><a class="markdownIt-Anchor" href="#2-多表删除"></a> 2  多表删除</h2><h3 id="1-基本删除"><a class="markdownIt-Anchor" href="#1-基本删除"></a> 1 基本删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 基本删除，从数据表1中删除匹配的的记录</span><br><span class="line">delete t1 </span><br><span class="line">from t1 </span><br><span class="line">inner join t2 </span><br><span class="line">on t1.id=t2.id </span><br><span class="line">where t1.name is null</span><br><span class="line"># 或者</span><br><span class="line">delete t1 </span><br><span class="line">from t1 </span><br><span class="line">inner join t2 </span><br><span class="line">using(id)</span><br><span class="line">where t1.name is null</span><br><span class="line"># 或者 这里的using 表示要删除的表</span><br><span class="line">DELETE FROM t1 USING t1，t2 WHERE t1.id=t2.id</span><br><span class="line"># order 与 limit 删除</span><br><span class="line">DELETE FROM somelog WHERE user = &#x27;jcole&#x27;</span><br><span class="line">ORDER BY timestamp_column LIMIT 1;</span><br></pre></td></tr></table></figure><p><strong>小贴士：</strong></p><blockquote><p>用using关键字进行简化。<br>**1.**查询必须是等值连接。<br><strong>2</strong>.等值连接中的列必须具有相同的名称和数据类型。</p></blockquote><h3 id="2-多表删除-2"><a class="markdownIt-Anchor" href="#2-多表删除-2"></a> 2 多表删除</h3><h5 id="1-外键约束"><a class="markdownIt-Anchor" href="#1-外键约束"></a> 1 外键约束</h5><p>给表新增约束外键并使用级联(cascade)方式对表与表之间关系进行约束。具体的SQL如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table goods_price</span><br><span class="line">add constraint FK_goods_id foreign key(goods_id)</span><br><span class="line"> references goods(id) on delete cascade on update cascade;</span><br></pre></td></tr></table></figure><p>修改完后我们后期删除主表数据，关联表数据也会被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from goods where id=5;</span><br></pre></td></tr></table></figure><h5 id="2-联合删除"><a class="markdownIt-Anchor" href="#2-联合删除"></a> 2 联合删除</h5><p>不能使用<code>ORDER BY</code>或<code>LIMIT</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1,t2 from t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t1.id=25</span><br></pre></td></tr></table></figure><p><strong>小贴士：</strong></p><blockquote><p>​对于多表删除的<code>left join</code> 、<code>inner join</code>、<code>right join</code> 和<code>select</code> 的一样，删除各个表交集的部分。</p><p>​个人理解的执行方式就是从t1表取出一条数据，关联t2表，关联的结果通过where进行筛选，最后左右两张表关联的行会被删除。。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="/2020/12/02/Mysql-DML%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/image-20201202171603690.png" alt="image-20201202171603690"></p><h2 id="3-多表更新"><a class="markdownIt-Anchor" href="#3-多表更新"></a> 3 多表更新</h2><blockquote><p>​MySQL可以在一个SQL语句中更新多张表的记录，也可以通过多个表之间的关联关系更新某个表的数据。</p><p>​假定目前有两张表<code>goods</code>和<code>goods_price</code>表，前者是保存商品的具体信息，后者是保存商品的价格，具体的表结构如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table goods (</span><br><span class="line">`id` int unsigned primary key auto_increment,</span><br><span class="line">`goods_name` varchar(30) not null default &#x27;&#x27;,</span><br><span class="line">`deleted_at` int unsigned default null</span><br><span class="line">)engine innodb charset utf8;</span><br><span class="line">create table goods_price (</span><br><span class="line">`goods_id` int unsigned not null,</span><br><span class="line">`price` decimal(8,2) not null default &#x27;0.00&#x27;</span><br><span class="line">)engine innodb charset utf8;</span><br><span class="line">insert into goods (id,goods_name) values (1,&#x27;商品1&#x27;),(2,&#x27;商品2&#x27;),(3,&#x27;商品3&#x27;),(4,&#x27;商品4&#x27;),(5,&#x27;商品5&#x27;);</span><br><span class="line">insert into goods_price values (1,&#x27;5.44&#x27;),(2,&#x27;3.22&#x27;),(3,&#x27;5.55&#x27;),(4,&#x27;0.00&#x27;),(5,&#x27;4.54&#x27;);</span><br></pre></td></tr></table></figure><h3 id="1-在update时使用逗号分割更新"><a class="markdownIt-Anchor" href="#1-在update时使用逗号分割更新"></a> 1 在update时使用逗号分割更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods as g , goods_price as p </span><br><span class="line">SET p.price = p.price*0.5 </span><br><span class="line">WHERE p.goods_id = g.id AND g.deleted_at is null;</span><br></pre></td></tr></table></figure><h3 id="2-使用inner-join更新数据"><a class="markdownIt-Anchor" href="#2-使用inner-join更新数据"></a> 2 使用inner join更新数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods g </span><br><span class="line">INNER JOIN goods_price p </span><br><span class="line">ON g.id=p.goods_id </span><br><span class="line">SET p.price=p.price*0.5 </span><br><span class="line">where g.deleted_at is null;</span><br></pre></td></tr></table></figure><h3 id="3-更新多个表"><a class="markdownIt-Anchor" href="#3-更新多个表"></a> 3 更新多个表</h3><p>上面的更新语句使用另一个表的条件，更新一张表，也可以更新多个表。具体SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE goods g </span><br><span class="line">INNER JOIN goods_price p on g.id=p.goods_id </span><br><span class="line">set p.price=p.price*0.5,g.deleted_at=unix_timestamp(now())</span><br><span class="line">where g.deleted_at is null;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql - 多表操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql - DML条件语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 基础</title>
      <link href="/2020/11/30/Git-%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/11/30/Git-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="git命令补充学习"><a class="markdownIt-Anchor" href="#git命令补充学习"></a> git命令补充学习</h1><h2 id="git更新gitignore"><a class="markdownIt-Anchor" href="#git更新gitignore"></a> git更新.gitignore</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .//清空缓存</span><br><span class="line">git add .//重新提交</span><br><span class="line">git commit -m <span class="string">&quot;update .gitignore&quot;</span></span><br><span class="line">git push</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="git设置别名"><a class="markdownIt-Anchor" href="#git设置别名"></a> git设置别名</h2><h3 id="全局"><a class="markdownIt-Anchor" href="#全局"></a> 全局</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gs=<span class="string">&quot;git status&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">&quot;git add .&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">&quot;git commit -m&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">&quot;git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset | %C(bold)%cn&#x27; --abbrev-commit --date=relative&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gck=<span class="string">&quot;git checkout&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gcb=<span class="string">&quot;git checkout -b&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">&quot;git branch&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gm=<span class="string">&quot;git merge&quot;</span></span><br><span class="line"><span class="built_in">alias</span> grb=<span class="string">&quot;git rebase&quot;</span></span><br><span class="line"><span class="built_in">alias</span> grs=<span class="string">&quot;git reset HEAD .&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gca=<span class="string">&quot;git commit --amend&quot;</span></span><br></pre></td></tr></table></figure><h3 id="非全局"><a class="markdownIt-Anchor" href="#非全局"></a> 非全局</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config  --global alias.st status</span><br></pre></td></tr></table></figure><h2 id="git-tag以及log的命令技巧"><a class="markdownIt-Anchor" href="#git-tag以及log的命令技巧"></a> git tag以及log的命令技巧</h2><h1 id="git初学"><a class="markdownIt-Anchor" href="#git初学"></a> Git初学</h1><h2 id="0-常用命令解析"><a class="markdownIt-Anchor" href="#0-常用命令解析"></a> 0 常用命令解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）</span></span><br><span class="line">git add -u</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是上面两个功能的合集（git add --all的缩写）</span></span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line">git reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="comment"># 查看本地及其远端所有分支</span></span><br><span class="line">git branch -va</span><br></pre></td></tr></table></figure><h2 id="1-使用git需要做的小配置"><a class="markdownIt-Anchor" href="#1-使用git需要做的小配置"></a> 1 使用git需要做的小配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;your_name&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;your_email&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="1-config-的三个作用域"><a class="markdownIt-Anchor" href="#1-config-的三个作用域"></a> 1. Config 的三个作用域</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只对某个仓库有效</span></span><br><span class="line">git config --<span class="built_in">local</span></span><br><span class="line"><span class="comment"># 对当前用户的所有仓库有效</span></span><br><span class="line">git config --global</span><br><span class="line"><span class="comment"># 对系统所有登录的账户有效</span></span><br><span class="line">git config --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 config 的配置， 家--list</span></span><br><span class="line">git config --list --<span class="built_in">local</span></span><br><span class="line">git config --list --global</span><br><span class="line">git config --list --system</span><br></pre></td></tr></table></figure><h2 id="2-工作区与暂存区"><a class="markdownIt-Anchor" href="#2-工作区与暂存区"></a> 2 工作区与暂存区</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102725.jpeg" alt="image-20200211143954709"></p><p><img src= "/img/loading.gif" data-lazy-src="http://ww1.sinaimg.cn/large/006vQ8sXgy1gfioj08peqj30la08ota9.jpg?ynotemdtimestamp=1606703976531" alt="image-20200211144014011"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102729.jpeg" alt="image-20200211144021875"></p><h2 id="3-给文件重命名"><a class="markdownIt-Anchor" href="#3-给文件重命名"></a> 3 给文件重命名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通方法</span></span><br><span class="line">mv readme readme.md</span><br><span class="line">git add readme.md</span><br><span class="line">git rm readme</span><br><span class="line"><span class="comment"># 简便的方法</span></span><br><span class="line">git mv readme readme.md</span><br><span class="line"><span class="comment"># 查看命令详情</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">help</span> --web</span><br><span class="line"><span class="comment"># 查看类型</span></span><br><span class="line">git cat-file -t 3d4731d</span><br><span class="line"><span class="comment"># 查看内容</span></span><br><span class="line">git cat-file -p 3d4731d</span><br></pre></td></tr></table></figure><h2 id="4-gitk-图形界面"><a class="markdownIt-Anchor" href="#4-gitk-图形界面"></a> 4 gitk 图形界面</h2><h2 id="5-分离头指针"><a class="markdownIt-Anchor" href="#5-分离头指针"></a> 5 分离头指针</h2><blockquote><p>当在checkout 一个 commit 的时候 产生分离头指针</p><p>使用场景： 做尝试性的变更使用分离头指针</p><p>分离头指针指的是：变更没基于某个branch去做 做分支切换的时候 分离头指针产生的commit 可能会被git当做垃圾清理掉，切记要和branch 绑定在一起</p></blockquote><h2 id="6-查看版本历史"><a class="markdownIt-Anchor" href="#6-查看版本历史"></a> 6 查看版本历史</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看简单的历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"><span class="comment"># 查看最近几个简单的历史</span></span><br><span class="line">git <span class="built_in">log</span> --n2 --oneline</span><br><span class="line"><span class="comment"># 图形化查看</span></span><br><span class="line">git <span class="built_in">log</span> --all --graph</span><br></pre></td></tr></table></figure><h2 id="7-head"><a class="markdownIt-Anchor" href="#7-head"></a> 7 HEAD</h2><blockquote><p>HEAD 指向commit 或者指向分离头指针的commit</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较两个commit之间的差异</span></span><br><span class="line">git diff HEAD HEAD^</span><br></pre></td></tr></table></figure><h2 id="8-git原理探秘"><a class="markdownIt-Anchor" href="#8-git原理探秘"></a> 8 git原理探秘</h2><blockquote><p>git 的对象 commit tree blob</p></blockquote><ul><li>config目录：仓库配置文件</li><li>HEAD</li><li>objects：git中只要任何文件中文件内容相同那么他就是唯一的blob</li><li>refs :引用/分支<ul><li>heads：分支 内容为 commit</li><li>tags: 标签 内容为 commit</li></ul></li><li>commit tree blob 的关系</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102735.jpeg" alt="image-20200211215858843"></p><ul><li><p>新建一个 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init  test</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102741.jpeg" alt="image-20200211221038828"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt;&gt; readme.md</span><br><span class="line"><span class="comment"># 查看 objects 文件下是否有东西</span></span><br><span class="line">find .git/objects/ -<span class="built_in">type</span> f  </span><br><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102747.jpeg" alt="image-20200211222153328"></p></li></ul><h2 id="9-删除不需要的分支"><a class="markdownIt-Anchor" href="#9-删除不需要的分支"></a> 9 删除不需要的分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br><span class="line"><span class="comment"># 小d删除不了用D</span></span><br><span class="line">git branch -D 分支名 </span><br></pre></td></tr></table></figure><h2 id="10-修改commit的message"><a class="markdownIt-Anchor" href="#10-修改commit的message"></a> 10 修改commit的message</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改最新commit的message</span></span><br><span class="line">git commit --amend</span><br><span class="line"><span class="comment"># 修改老旧的commit的message</span></span><br><span class="line"><span class="comment"># 变基要选择 被变得父亲的commit</span></span><br><span class="line">git rebase -i </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102757.jpeg" alt="image-20200212192200334"></p><blockquote><p>将变更的 第一个 7c6e74b 前面的 pick 改为 reword（或者偷懒谢一个 r） 保存 退出 git 会自己弹出另外一个 交互的界面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102805.jpeg" alt="image-20200212192418247"></p><blockquote><p>保存退出 出现successfull 就成功了</p><p>这里用到了分离头指针 然后做调整 然后 master与head 指向最新的 commit</p><p>变基的行为：已经贡献到集成的分支上 建议不要 否则会影响其他同事</p></blockquote><h2 id="11-如何将几个commit合并为一个"><a class="markdownIt-Anchor" href="#11-如何将几个commit合并为一个"></a> 11 如何将几个commit合并为一个</h2><ul><li>将连续的commit合并</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果合并前四个那么就选择 第五个的 commit</span></span><br><span class="line">git rebase -i 第五个</span><br><span class="line"><span class="comment"># 基于哪个一个合道哪一个commit上去</span></span><br></pre></td></tr></table></figure><blockquote><p>那些commit 变更的文件都要但是要把他合并到前面的commit上去</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102813.jpeg" alt="image-20200212210308978"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102816.jpeg" alt="image-20200212224256596"></p><ul><li><p>将不连续的 commit 合并</p><p>合并两个 添加readme的 commit</p><blockquote><p>将最古老的 commit</p><p>git rebase -i 最古老的</p></blockquote></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102823.jpeg" alt="image-20200212225139935"></p><blockquote><p>发现不够手动添加最古老的</p><p>pick 最古老的commit</p><p>然后调整pick ’commit‘ 的位置 吧 需要合并的挨着放</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102828.jpeg" alt="image-20200212225549125"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102834.jpeg" alt="image-20200212225725697"></p><blockquote><p>输入 git statue 然后根据提示 接着做</p><p>变基完成</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102839.jpeg" alt="image-20200212230015054"></p><blockquote><p>出现了两个 commit 没有祖先的</p><p>但是和master 无关的分支已经没啥用##了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102844.jpeg" alt="image-20200212230320205"></p><h2 id="12-如何比较暂存区和head所含文件的差异"><a class="markdownIt-Anchor" href="#12-如何比较暂存区和head所含文件的差异"></a> 12 如何比较暂存区和HEAD所含文件的差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102847.jpeg" alt="image-20200212230934332"></p><h2 id="13-如何比较工作区和暂存区的差异"><a class="markdownIt-Anchor" href="#13-如何比较工作区和暂存区的差异"></a> 13 如何比较工作区和暂存区的差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作区与暂存区所有的差别</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 工作区与暂存区 某些文件的差别 </span></span><br><span class="line">git diff -- readme style/style.css</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102850.jpeg" alt="image-20200212231543413"></p><h2 id="14-如何让暂存区恢复和head一样"><a class="markdownIt-Anchor" href="#14-如何让暂存区恢复和head一样"></a> 14 如何让暂存区恢复和HEAD一样</h2><blockquote><p>场景：不想保留暂存区</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将暂存区 恢复成和HEAD一样</span></span><br><span class="line">git reset HEAD</span><br><span class="line"><span class="comment"># 比较暂存区与HEAD 没有输出 就表示一致</span></span><br><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h2 id="15-如何将工作区回复和暂存区的状态"><a class="markdownIt-Anchor" href="#15-如何将工作区回复和暂存区的状态"></a> 15 如何将工作区回复和暂存区的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变更工作区使用checkout</span></span><br><span class="line">git checkout -- <span class="string">&#x27;文件名&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="16-如何取消暂存区部分文件的修改"><a class="markdownIt-Anchor" href="#16-如何取消暂存区部分文件的修改"></a> 16 如何取消暂存区部分文件的修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git reset HEAD -- &#x27;具体的文件可以多个&#x27;</span></span><br><span class="line">git reset HEAD -- styles/style.css readme.md</span><br></pre></td></tr></table></figure><h2 id="17-消除最近的几次提交"><a class="markdownIt-Anchor" href="#17-消除最近的几次提交"></a> 17 消除最近的几次提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存区和工作区都恢复到指定的内容了</span></span><br><span class="line">git reset --hrad ‘commit’</span><br></pre></td></tr></table></figure><h2 id="18-看看不同提交的指定文件差异"><a class="markdownIt-Anchor" href="#18-看看不同提交的指定文件差异"></a> 18 看看不同提交的指定文件差异</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分支即为指针 (显示所有)</span></span><br><span class="line">git diff temp master</span><br><span class="line"><span class="comment"># 显示感兴趣的文件</span></span><br><span class="line">git diff temp master -- <span class="string">&#x27;文件名&#x27;</span></span><br><span class="line"><span class="comment"># 也可以用 master 对应的 commit 和 temp 对应的commit</span></span><br><span class="line">git branch -av</span><br><span class="line">git diff <span class="string">&#x27;commmit&#x27;</span> <span class="string">&#x27;commit&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="19-正确删除文件的方法"><a class="markdownIt-Anchor" href="#19-正确删除文件的方法"></a> 19 正确删除文件的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通方法</span></span><br><span class="line"><span class="comment"># 工作目录下删除</span></span><br><span class="line">rm readme</span><br><span class="line"><span class="comment"># 暂存区删除</span></span><br><span class="line">git rm readme </span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单方法 </span></span><br><span class="line"><span class="comment"># 直接把删除文件放到暂存区</span></span><br><span class="line">git rm ‘file_name’</span><br></pre></td></tr></table></figure><h2 id="20-开发中临时加塞了紧急任务怎么处理"><a class="markdownIt-Anchor" href="#20-开发中临时加塞了紧急任务怎么处理"></a> 20 开发中临时加塞了紧急任务怎么处理</h2><blockquote><p>场景：正在做新功能的开发但是开发未结束，其他分支产生了bug 需要去解决</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 stash </span></span><br><span class="line">git stash </span><br><span class="line"><span class="comment"># 查看 stash 信息</span></span><br><span class="line"><span class="comment"># stash 相当于 堆栈</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="comment"># 去执行紧急任务</span></span><br><span class="line"><span class="comment"># 紧急任务修复完成</span></span><br><span class="line"><span class="comment"># 恢复 使用 apply 或者pop</span></span><br><span class="line"><span class="comment"># apply两个作用：</span></span><br><span class="line">1 把之前的内容弹出来 放入工作区</span><br><span class="line">2 stash 的信息还在可以反复使用</span><br><span class="line">git stash apply</span><br><span class="line"><span class="comment"># pop  把之前的内容弹出来 放入工作区</span></span><br><span class="line"><span class="comment"># 与栈的pop一样</span></span><br></pre></td></tr></table></figure><h2 id="21-如何制定不需要git管理的文件"><a class="markdownIt-Anchor" href="#21-如何制定不需要git管理的文件"></a> 21 如何制定不需要git管理的文件</h2><blockquote><ul><li><p>.gitignore 文件</p><p><strong>a.忽略指定文件/目录</strong></p></li><li><p>忽略指定文件</p><ul><li>HelloWrold.class</li></ul></li><li><p>忽略指定文件夹</p><ul><li>bin/</li></ul></li><li><p>bin/gen/</p><p><strong>b.通配符忽略规则</strong></p></li><li><p>忽略.class的所有文件 *.class</p></li><li><p>忽略名称中末尾为ignore的文件夹</p></li><li><p>*ignore/</p></li><li><p>忽略名称中间包含ignore的文件夹</p><ul><li><em>ignore</em>/</li></ul></li></ul></blockquote><h2 id="22-git-的备份"><a class="markdownIt-Anchor" href="#22-git-的备份"></a> 22 Git 的备份</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102859.jpeg" alt="image-20200213122814992"></p><blockquote><p><strong>直观区别：</strong> 哑协议传输进度不可见；智能传输协议可见</p><p><strong>传输速度:</strong> 智能协议比哑协议传输速度快</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆不带工作区的 裸仓库</span></span><br><span class="line">git <span class="built_in">clone</span> --bare ‘协议地址’</span><br><span class="line"><span class="comment"># 哑协议</span></span><br><span class="line">git <span class="built_in">clone</span> --bare /d/00_aa_lijinze_java_web_stady/gitsu</span><br><span class="line"><span class="comment"># 智能协议 带进度显示 并且更快</span></span><br><span class="line">git <span class="built_in">clone</span> --bare file:///d/00_aa_lijinze_java_web_stady/gitsu</span><br><span class="line"><span class="comment"># 与远端仓库同步</span></span><br><span class="line"><span class="comment"># -v 查看remote</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 删除remote</span></span><br><span class="line">git remote remove <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="comment"># 创建 remote</span></span><br><span class="line">git remote add zhineng  file:///d/00_aa_lijinze_java_web_stady/gitsu</span><br><span class="line"><span class="comment"># 格式</span></span><br><span class="line">git remote add <span class="string">&#x27;name&#x27;</span> <span class="string">&#x27;address&#x27;</span></span><br><span class="line"><span class="comment"># 更新到远端</span></span><br><span class="line">git push <span class="string">&#x27;remote_name&#x27;</span> <span class="string">&#x27;branch_name&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="23-配置公钥"><a class="markdownIt-Anchor" href="#23-配置公钥"></a> 23 配置公钥</h2><blockquote><p>在github上面的help 搜索ssh即可</p></blockquote><h2 id="24-push到github上面去"><a class="markdownIt-Anchor" href="#24-push到github上面去"></a> 24 push到GitHub上面去</h2><blockquote><p>首先复制ssh链接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地所有的分支push 到 远程去</span></span><br><span class="line">git push origin --all</span><br><span class="line"><span class="comment"># git pull</span></span><br><span class="line">1. fetch 把远端分支的内容拉下来</span><br><span class="line">2. 将本地的分支与远端的分支marge</span><br><span class="line"><span class="comment"># 将本地的 master 与远端的master合并</span></span><br><span class="line">git marge origin/master</span><br><span class="line"><span class="comment"># 由于是不想干的两个 合并查询marge做出命令改动</span></span><br><span class="line">git merge origin/master  --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h2 id="25-不同人修改了不同文件如何处理"><a class="markdownIt-Anchor" href="#25-不同人修改了不同文件如何处理"></a> 25 不同人修改了不同文件如何处理</h2><blockquote><p>**场景：**多人同时维护一个分支的时候 有一个人修改了 一个文件 另一个人修改了不同的文件 这种合并起来 是非常顺利的</p><p><strong>本地与远端的master的关系如下：</strong></p><p>**不是 Fast-Forward：**两个<master>没有共同的祖先</master></p><p>**不是 No-Fast-Forward: ** 不是基于远端的commit做变更的</p><p><strong>Fast-Forward</strong></p><p>当前分支合并到另一分支时，如果没有分歧解决，就会直接移动文件指针。这个过程叫做fastforward。</p><p>举例来说，开发一直在master分支进行，但忽然有一个新的想法，于是新建了一个develop的分支，并在其上进行一系列提交，完成时，回到 master分支，此时，master分支在创建develop分支之后并未产生任何新的commit。此时的合并就叫fast forward。</p><p>示例：</p><ol><li>新建一个work tree，在master中做几次commit</li><li>新建develop的branch，然后再做多次commits</li></ol><p>此时的分支流图如下(gitx)：</p><p><strong>正常合并</strong></p><p>(master)$ git merge develop Updating 5999848…7355122 *<strong>Fast-forward*</strong> c.txt | 1 + d.txt | 1 + 2 files changed, 2 insertions(+), 0 deletions(-) create mode 100644 c.txt create mode 100644 d.txt</p><p>可以看出这是一次fast-forward式的合并，且合并完之后的视图为扁平状，看不出develop分支开发的任何信息。</p><p><strong>使用–no-ff进行合并</strong></p><p>—no-ff (no fast foward)，使得每一次的合并都创建一个新的commit记录。即使这个commit只是fast-foward，用来避免丢失信息。</p><p>(master)$ git merge –no-ff develop <strong>Merge made by recursive.</strong> c.txt | 2 ± d.txt | 2 ± 2 files changed, 2 insertions(+), 2 deletions(-)</p><p>可以看出，使用no-ff后，会多生成一个commit 记录，并强制保留develop分支的开发记录（而fast-forward的话则是直接合并，看不出之前Branch的任何记录）。这对于以后代码进行分析特别有用，故有以下最佳实践。</p><p><strong>好的实践</strong></p><p>–no-ff，其作用是：要求git merge即使在fast forward条件下也要产生一个新的merge commit。此处，要求采用–no-ff的方式进行分支合并，其目的在于，希望保持原有“develop branches”整个提交链的完整性。Git – Fast Forward 和 no fast foward</p></blockquote><blockquote><p>ahead 1 behind 1 的意思</p><p><strong>ahead</strong> ：本地分支比远端新一个commit</p><p><strong>behind</strong> ：远端比本地多一个commit</p><p>这种问题解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1. 获取远程分支debug的修改 </span><br><span class="line">git fetch origin debug </span><br><span class="line"></span><br><span class="line"># 2.合并远程分支debug  </span><br><span class="line">git merge origin debug </span><br><span class="line"></span><br><span class="line"># 更新本地分支  </span><br><span class="line">3. git pull origin debug </span><br></pre></td></tr></table></figure></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102906.jpeg" alt="image-20200213190214751"></p><h2 id="26-不同人修改了同文件的不同区域"><a class="markdownIt-Anchor" href="#26-不同人修改了同文件的不同区域"></a> 26 不同人修改了同文件的不同区域</h2><blockquote><p>与远端同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull </span><br><span class="line"><span class="comment"># 与 25一样</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="27-两个人修改了同文件的同一区域"><a class="markdownIt-Anchor" href="#27-两个人修改了同文件的同一区域"></a> 27 两个人修改了同文件的同一区域</h2><blockquote><p>git pull 之后自己做处理</p><p>然后commit 然后 push</p></blockquote><h2 id="28-同时变更了文件名和文件内容"><a class="markdownIt-Anchor" href="#28-同时变更了文件名和文件内容"></a> 28 同时变更了文件名和文件内容</h2><blockquote><p>git pull 可以做出智能处理</p><p>然后commit 然后 push</p></blockquote><h2 id="29-多人修改同一文件名"><a class="markdownIt-Anchor" href="#29-多人修改同一文件名"></a> 29 多人修改同一文件名</h2><blockquote><p>git pull 之后自己做处理</p><p>然后commit 然后 push</p></blockquote><h2 id="30-git-继承使用禁忌"><a class="markdownIt-Anchor" href="#30-git-继承使用禁忌"></a> 30 Git 继承使用禁忌</h2><h3 id="1-禁止向集成分支执行push"><a class="markdownIt-Anchor" href="#1-禁止向集成分支执行push"></a> 1. 禁止向集成分支执行push</h3><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接干掉 强制更新</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-禁止向继承分支执行变更历史的操作"><a class="markdownIt-Anchor" href="#2-禁止向继承分支执行变更历史的操作"></a> 2. 禁止向继承分支执行变更历史的操作</h3><blockquote><p>等着别人砍你吧</p></blockquote><h2 id="31-如何在github搜索自己感兴趣的项目"><a class="markdownIt-Anchor" href="#31-如何在github搜索自己感兴趣的项目"></a> 31 如何在GitHub搜索自己感兴趣的项目</h2><blockquote><p><code>in:readme</code> <strong>在readme里面搜索</strong></p><p><code>stars:&gt;1000</code> <strong>stars大于1000的</strong></p><p><strong>Code Option：</strong></p><p>‘dsc’ filename：<filename></filename></p><p><strong>例子：</strong>‘public’ + ‘static’ filename:config.java</p></blockquote><h2 id="32-开源项目如何保质保量"><a class="markdownIt-Anchor" href="#32-开源项目如何保质保量"></a> 32 开源项目如何保质保量</h2><blockquote><p>pull request 然后 通过 review与checks</p></blockquote><h2 id="33怎样选择适合自己团队的工作流"><a class="markdownIt-Anchor" href="#33怎样选择适合自己团队的工作流"></a> 33怎样选择适合自己团队的工作流</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102911.jpeg" alt="image-20200214100653733"></p><p><img src= "/img/loading.gif" data-lazy-src="http://ww1.sinaimg.cn/large/006vQ8sXgy1gfiqam8nn1j30po0iawiw.jpg?ynotemdtimestamp=1606703976531" alt="image-20200214100726831"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102916.jpeg" alt="image-20200214100736627"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102920.jpeg" alt="image-20200214100752269"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102926.jpeg" alt="image-20200214100810162"></p><h2 id="34-如何挑选和是的分支集成策略"><a class="markdownIt-Anchor" href="#34-如何挑选和是的分支集成策略"></a> 34 如何挑选和是的分支集成策略</h2><blockquote><p>查看一些信息</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102933.jpeg" alt="image-20200214102353830"></p><blockquote><p>选择集成方式</p><p>线性方式：选择–&gt;allow rebase merging</p><p>公共集成分支不允许 push -f</p><p>第一种 产生marge commit</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102937.jpeg" alt="image-20200214102608582"></p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102709.jpeg" alt="merge commits"></p><blockquote><p>第二种 将产生的 commit 组合为一个commit 放入 master</p></blockquote><blockquote><p>第三种 将长生的commit 一个一个跳出来放入master</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102944.jpeg" alt="image-20200214121045925"></p><h2 id="35-启用issue跟踪需求和任务"><a class="markdownIt-Anchor" href="#35-启用issue跟踪需求和任务"></a> 35 启用issue跟踪需求和任务</h2><blockquote><p>利用project看板来管理issue</p></blockquote><h2 id="36-项目内部怎么实施code-review"><a class="markdownIt-Anchor" href="#36-项目内部怎么实施code-review"></a> 36 项目内部怎么实施code review</h2><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/lijinzedev/picture/main/img/20210708102948.jpeg" alt="image-20200214123352048"></p><h2 id="37团队协作时如何做多分支的集成"><a class="markdownIt-Anchor" href="#37团队协作时如何做多分支的集成"></a> 37团队协作时如何做多分支的集成</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让远端集成分支 强制回退</span></span><br><span class="line"><span class="comment"># 不建议这样做</span></span><br><span class="line">git push -f origin &lt; 要回退commit &gt; :&lt;分支名&gt;</span><br><span class="line">git push -f origin 6b231c14 : master</span><br><span class="line"><span class="comment"># 将分支回退</span></span><br><span class="line">git reset --hard origin/s</span><br><span class="line"><span class="comment"># 去了解</span></span><br><span class="line">git rerere</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装gitlab</title>
      <link href="/2020/11/29/docker%E5%AE%89%E8%A3%85gitlab/"/>
      <url>/2020/11/29/docker%E5%AE%89%E8%A3%85gitlab/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="docker安装gitlab"><a class="markdownIt-Anchor" href="#docker安装gitlab"></a> Docker安装Gitlab</h1><p>参考：</p><p><a href="https://blog.csdn.net/qq_33619378/article/details/89706222">参阅链接</a></p><p><a href="https://www.cnblogs.com/zuxing/articles/9329152.html">参阅链接</a></p><p><a href="https://segmentfault.com/a/1190000021229534">参阅链接</a></p><h2 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.卸载旧版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#默认是从国外的，不推荐</span></span><br><span class="line"><span class="comment">#推荐使用国内的</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.安装docker相关的(docker-ce 社区版 而ee是企业版)</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.使用docker version查看是否按照成功</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="配置阿里云镜像加速"><a class="markdownIt-Anchor" href="#配置阿里云镜像加速"></a> 配置阿里云镜像加速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://4bj04jx5.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="准备挂载目录bash"><a class="markdownIt-Anchor" href="#准备挂载目录bash"></a> 准备挂载目录bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通常会将 GitLab 的配置 (etc) 、 日志 (<span class="built_in">log</span>) 、数据 (data) 放到容器之外， 便于日后升级， 因此请先准备这三个目录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p /home/gitlab/etc</span><br><span class="line">mkdir -p /home/gitlab/<span class="built_in">log</span></span><br><span class="line">mkdir -p /home/gitlab/data</span><br></pre></td></tr></table></figure><h2 id="安装gitlab"><a class="markdownIt-Anchor" href="#安装gitlab"></a> 安装gitlab</h2><p>方式一、在线下载gitlab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">拉取镜像</span><br><span class="line">docker pull gitlab/gitlab-ce:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式二、离线安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在事先安装好的服务器上，打包镜像</span><br><span class="line">docker save -o E:\gitlab-ce-latest.tar gitlab/gitlab-ce:latest</span><br><span class="line"></span><br><span class="line">然后拷贝到目标服务器上，docker加载镜像：tar-&gt;image</span><br><span class="line"></span><br><span class="line">1.从tar包载入镜像：</span><br><span class="line"></span><br><span class="line">docker load -i &#123;image_name&#125;.tar</span><br><span class="line"></span><br><span class="line">2.查看载入是否成功：</span><br><span class="line"></span><br><span class="line">docker images | grep &#123;image_name&#125;</span><br><span class="line"></span><br><span class="line">3.如果看到加载的镜像没有tag和镜像名，则手动打tag:</span><br><span class="line"></span><br><span class="line">docker tag &#123;image_id&#125; &#123;image_name&#125;:&#123;image_tag&#125;</span><br><span class="line"></span><br><span class="line">4.确认镜像是否成功打上tag</span><br></pre></td></tr></table></figure><h2 id="启动容器指定端口及挂载"><a class="markdownIt-Anchor" href="#启动容器指定端口及挂载"></a> 启动容器，指定端口及挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 8002:443 \</span><br><span class="line">-p 8001:80 \</span><br><span class="line">-p 8000:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--hostname 172.16.7.110 \</span><br><span class="line">-v /home/gitlab/etc:/etc/gitlab  \</span><br><span class="line">-v /home/gitlab/logs:/var/<span class="built_in">log</span>/gitlab  \</span><br><span class="line">-v /home/gitlab/data:/var/opt/gitlab  \</span><br><span class="line">gitlab/gitlab-ce</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改gitlab配置"><a class="markdownIt-Anchor" href="#修改gitlab配置"></a> 修改gitlab配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、修改/home/gitlab/etc/gitlab.rb</span><br><span class="line"></span><br><span class="line">把external_url改成部署机器的域名或者IP地址</span><br><span class="line"></span><br><span class="line">vi /home/gitlab/etc/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置http协议所使用的访问地址</span></span><br><span class="line">external_url <span class="string">&#x27;http://172.16.7.110:8001&#x27;</span></span><br><span class="line"><span class="comment"># 配置ssh协议所使用的访和端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx 的监听端口号需要改成 80。</span></span><br><span class="line"><span class="comment"># 默认情况下 nginx 的监听端口号会从 external_url 中取，也就是 9080。</span></span><br><span class="line"><span class="comment"># 但在启动容器时，我们把宿主机 9080 端口导向了容器的 80 端口，所以容器内 nginx 服务端口应该为 80。</span></span><br><span class="line">nginx[<span class="string">&#x27;listen_port&#x27;</span>] = 80</span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;time_zone&#x27;</span>] = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">2、修改/home/gitlab/data/gitlab-rails/etc/gitlab.yml</span><br><span class="line">vi /home/gitlab/data/gitlab-rails/etc/gitlab.yml</span><br><span class="line"></span><br><span class="line">找到关键字 * <span class="comment">## Web server settings * </span></span><br><span class="line"></span><br><span class="line">将host的值改成映射的外部主机ip地址和端口，这里会显示在gitlab克隆地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重启容器"><a class="markdownIt-Anchor" href="#重启容器"></a> 重启容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">改完后，重启docker容器。先停止该容器，删掉该容器信息，重启完docke之后，重新运行GitLab容器</span><br><span class="line"></span><br><span class="line">查询容器列表</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">停止容器</span><br><span class="line">docker stop 容器id</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">doccker rm 容器id</span><br><span class="line"></span><br><span class="line">查询容器列表</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">启动gitlab</span><br><span class="line">docker run -d     --hostname 172.16.7.14     --publish 8001:443 --publish 8002:80 --publish 8000:22     --name gitlab --restart always     --volume /home/gitlab/etc:/etc/gitlab     --volume /home/gitlab/logs:/var/<span class="built_in">log</span>/gitlab     --volume /home/gitlab/data:/var/opt/gitlab 镜像id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关闭防火墙（选做）</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">如果不关闭防火墙，还可以通过暴露指定端口</span><br><span class="line">firewall-cmd --permanent --add-port=8002/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="开始访问"><a class="markdownIt-Anchor" href="#开始访问"></a> 开始访问</h2><p>Gitlab容器启动后，直接访问 <a href="http://ip">http://ip</a>  就可以进入gitlab访问页面，第一步要做的就是给root用户设置密码，设置完后，通过root + 设置的密码登录。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><blockquote><p>常用的几个Gitlab命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新应用gitlab的配置</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重启gitlab服务</span></span><br><span class="line">gitlab-ctl restart</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看gitlab运行状态</span></span><br><span class="line">gitlab-ctl status</span><br><span class="line"> </span><br><span class="line"><span class="comment">#停止gitlab服务</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看gitlab运行日志</span></span><br><span class="line">gitlab-ctl tail</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 停止相关数据连接服务</span></span><br><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sideki</span><br></pre></td></tr></table></figure><blockquote><p>修改了GitLab的ip地址一样，临时修改了GitLab的配置之后，得执行如下的命令，应用重新配好的配置并重启GitLab，然后查看GitLab的状态。</p></blockquote><p>因为是容器，所以要进入到gitlab容器中执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进入容器</span><br><span class="line">docker <span class="built_in">exec</span> -ti gitlab /bin/bash</span><br><span class="line"></span><br><span class="line">容器内部执行命令</span><br><span class="line">gitlab-ctl reconfigure  <span class="comment">#花时间比较多</span></span><br><span class="line">gitlab-ctl restart    <span class="comment">#改IP重启就可以了</span></span><br><span class="line">gitlab-ctl status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux - CentOS - gitlab - docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS配置网络</title>
      <link href="/2020/11/29/CentOS%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/11/29/CentOS%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="centos配置网络"><a class="markdownIt-Anchor" href="#centos配置网络"></a> CentOS配置网络</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet                <span class="comment"># 网卡类型：为以太网</span></span><br><span class="line">PROXY_METHOD=none            <span class="comment"># 代理方式：关闭状态</span></span><br><span class="line">BROWSER_ONLY=no                <span class="comment"># 只是浏览器：否</span></span><br><span class="line"><span class="comment"># BOOTPROTO=dhcp  # 网卡的引导协议：DHCP[中文名称: 动态主机配置协议]</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.110 <span class="comment"># 静态ip</span></span><br><span class="line">GATEWAY=192.168.0.1 <span class="comment"># 网关</span></span><br><span class="line">NETMASK=255.255.255.0 <span class="comment"># 子网掩码</span></span><br><span class="line">DNS1=192.168.1.1 <span class="comment"># dns</span></span><br><span class="line">DEFROUTE=yes                <span class="comment"># 默认路由：是, 不明白的可以百度关键词 `默认路由` </span></span><br><span class="line">IPV4_FAILURE_FATAL=no        <span class="comment"># 是不开启IPV4致命错误检测：否</span></span><br><span class="line">IPV6INIT=yes                <span class="comment"># IPV6是否自动初始化: 是[不会有任何影响, 现在还没用到IPV6]</span></span><br><span class="line">IPV6_AUTOCONF=yes            <span class="comment"># IPV6是否自动配置：是[不会有任何影响, 现在还没用到IPV6]</span></span><br><span class="line">IPV6_DEFROUTE=yes            <span class="comment"># IPV6是否可以为默认路由：是[不会有任何影响, 现在还没用到IPV6]</span></span><br><span class="line">IPV6_FAILURE_FATAL=no        <span class="comment"># 是不开启IPV6致命错误检测：否</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy            <span class="comment"># IPV6地址生成模型：stable-privacy [这只一种生成IPV6的策略]</span></span><br><span class="line">NAME=ens33                    <span class="comment"># 网卡物理设备名称</span></span><br><span class="line">UUID=f47bde51-fa78-4f79-b68f-d5dd90cfc698    <span class="comment"># 通用唯一识别码, 每一个网卡都会有, 不能重复, 否两台linux只有一台网卡可用</span></span><br><span class="line">DEVICE=ens33                    <span class="comment"># 网卡设备名称, 必须和 `NAME` 值一样</span></span><br><span class="line">ONBOOT=yes  <span class="comment"># 设置网卡启动方式为 开机启动 并且可以通过系统服务管理器 systemctl 控制网卡   </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启网络</span></span><br><span class="line">service network restart</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS常用Linux命令</title>
      <link href="/2020/11/29/CentOS%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/11/29/CentOS%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-命令行相关"><a class="markdownIt-Anchor" href="#1-命令行相关"></a> 1 命令行相关</h1><ul><li><kbd>Ctrl + a</kbd> 与<kbd>Ctrl + e</kbd> 分别代表把光标移动到最前和最后</li></ul><blockquote><p>小贴士:</p><p><code>a</code>代表单词<code>ahead</code></p></blockquote><ul><li><kbd>Ctrl + u</kbd> 与<kbd>Ctrl + k</kbd> 分别代表光标处往前和光标处往后删除</li></ul><h1 id="2-命令相关"><a class="markdownIt-Anchor" href="#2-命令相关"></a> 2 命令相关</h1><h2 id="1-进程相关"><a class="markdownIt-Anchor" href="#1-进程相关"></a> 1 进程相关</h2><p><a href="https://blog.csdn.net/sinat_27403673/article/details/84670428">linux之 grep “xxx” * | wc -l 命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据进程名找到进程Id停掉历史进程</span></span><br><span class="line">ps -aux | grep -v greo | grep <span class="variable">$&#123;serverName&#125;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line"><span class="comment"># 查看集群数量</span></span><br><span class="line">ps -ef | grep nacos | grep -v grep | wc -l</span><br><span class="line"><span class="comment"># 去除包含grep的进程行 ，避免影响最终数据的正确性 </span></span><br><span class="line">grep -v grep </span><br><span class="line"><span class="comment"># 统计行数</span></span><br><span class="line">wc -l</span><br></pre></td></tr></table></figure><h2 id="2-操作系统信息相关"><a class="markdownIt-Anchor" href="#2-操作系统信息相关"></a> 2 操作系统信息相关</h2><h3 id="1-操作系统"><a class="markdownIt-Anchor" href="#1-操作系统"></a> 1 操作系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看操作系统版本</span></span><br><span class="line">cat /etc/centos-release</span><br><span class="line"><span class="comment"># 查看操作系统内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="comment"># 查看操作系统详情</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看更多详情</span></span><br><span class="line">more /etc.*release</span><br><span class="line"><span class="comment"># 查看CPU详情</span></span><br><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><h3 id="2-磁盘"><a class="markdownIt-Anchor" href="#2-磁盘"></a> 2 磁盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df -h </span><br><span class="line"><span class="comment"># df -a 显示全部的文件系统</span></span><br><span class="line"><span class="comment"># df -i 显示innode信息</span></span><br><span class="line"><span class="comment"># df -T 显示文件系统类型</span></span><br><span class="line"><span class="comment"># du -s 指定目录大小汇总</span></span><br><span class="line"><span class="comment"># du -h 带计量单位</span></span><br><span class="line"><span class="comment"># du -a 韩文建</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 相关组件以及组件初始化</title>
      <link href="/2020/11/29/Spring-MVC-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/11/29/Spring-MVC-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-相关组件及其初始化"><a class="markdownIt-Anchor" href="#1-相关组件及其初始化"></a> 1 相关组件及其初始化</h1><h2 id="1-相关组件列表"><a class="markdownIt-Anchor" href="#1-相关组件列表"></a> 1 相关组件列表</h2><ul><li><p>WebAsyncManager（异步请求管理器）</p><blockquote><p>用于异步请求和响应提供支持</p></blockquote></li><li><p>LocaleResolver（本地化解析器）</p><blockquote><p>用于解析请求对应的Locale。可以是其子接口LocaleContextResolver本地化上下文解析器，额外添加获取时区的功能</p></blockquote></li><li><p>ThemeResovler（主题解析器）</p><blockquote><p>用于封装不同主题对应的资源包，通过主题源的getTheme方法，可以根据主题名获取对应的主题资源包</p></blockquote></li><li><p>ThemeSource（主题源）</p><blockquote><p>用于封装不同主题对应的资源包。通过主题源的getTheme方法，可以根据主题名获取对应的主题资源包</p></blockquote></li><li><p>MessageSource（消息源）</p><blockquote><p>用于对国际化提供支持，消息源封装了不同Code在不同Locale中对应的消息字符串</p></blockquote></li><li><p>FlashMapMannger（闪存管理器）</p><blockquote><p>用于提供重定向跨请求传递Model参数，其中存储内容在下次请求发生后即清空。同时该管理器还用于获取上次请求输出的FlashMap作为本地请求输入的FlashMap，把当前请求的输出FlashMap保存起来作为下一次请求的输入FlashMap</p></blockquote></li><li><p>MultipartResolver（多块请求解析器）</p><blockquote><p>用于判断请求是否为多块请求，对于多块请求进行一些预先解析</p></blockquote></li><li><p>List&lt;HandlerMapping&gt; （处理器映射列表）</p><blockquote><p>用于根据请求查找对应的处理器执行链</p></blockquote></li><li><p>List&lt;HandlerAdapter&gt; (处理器适配器列表)</p><blockquote><p>用于对处理器执行链进行适配执行</p></blockquote></li><li><p>ViewNameTranslator（视图名翻译器）</p><blockquote><p>类型为RequestToViewNameTranslator，用于通过请求获取请求对应的默认视图名</p></blockquote></li><li><p>List&lt;HandlerExceptionResolver&gt; (处理器异常解析器列表)</p><blockquote><p>用于解析整个处理过程发生的异常，把异常解析为ModelAndView的模型视图结果，并执行统一的渲染逻辑</p></blockquote></li><li><p>List&lt;ViewResolver&gt; （视图解析器列表）</p><blockquote><p>用于根据视图名解析获取对应的视图</p></blockquote></li></ul><p><strong>总结：</strong></p><blockquote><p>除了WebAsyncManager、ThemeSource、MessageSource不是在Dispatchcher中定义的之外，其他九大组件均在DispatchServlet中定义的，这就是常说的DispatchServlet的九大组件。其属性定义的源码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** MultipartResolver used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** LocaleResolver used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ThemeResolver used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerMappings used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerAdapters used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerExceptionResolvers used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** RequestToViewNameTranslator used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** FlashMapManager used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of ViewResolvers used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-组件初始化"><a class="markdownIt-Anchor" href="#2-组件初始化"></a> 2 组件初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化本类使用的多块请求解析器</span></span><br><span class="line"><span class="comment"> * 如果在ApplicationContext 中没有一个MultipartResovler类型且名称为multipartResolver的Bean被定义，则默认为空，不对多块请求进行特殊处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initMultipartResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 从application中获取name为multipartResolver，类型为MultipartResolver的Bean</span></span><br><span class="line">      <span class="keyword">this</span>.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.class);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.multipartResolver);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.multipartResolver.getClass().getSimpleName());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">      <span class="comment">// Default is no multipart resolver.</span></span><br><span class="line">       <span class="comment">//没有这种bean的时候，设置null</span></span><br><span class="line">      <span class="keyword">this</span>.multipartResolver = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;No MultipartResolver &#x27;&quot;</span> + MULTIPART_RESOLVER_BEAN_NAME + <span class="string">&quot;&#x27; declared&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​组件初始化是延迟加载，也就是第一个请求耗时比较长的原因，可以通过指定配置项<code>spring.mvc.servlet.load-on-startup</code>为任意非负数强制指定启动时执行初始化，默认为-1.</p></blockquote><p>​在HttpServeletBean的init方法中，先为当前DispatcherServlet实例绑定ServletContext，中初始化的一些属性（在Spring Boot中为空，此段逻辑不执行），接着执行initServletBean方法，该方法由DispatchServlet的父类FrameworkServlet实现。</p><p>​在FrameworkServlet的initServletBean方法，执行了本类initwebApplicationContext方法，此方法就是核心的初始化方法入口，在该方法中调用onRefresh方法，即上面DisorderServlet初始化入口方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化此Servlet的Web应用上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the WebApplicationContext instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #FrameworkServlet(WebApplicationContext)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setContextClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setContextConfigLocation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//  先尝试Servlet上下文获取已初始化的Web应用上下文作为根上文</span></span><br><span class="line">       <span class="comment">//  此处已经可以获取rootContext，设置该值的代码在第七章中提到的selfInitialize方法的prepareWebApplicationContext方法中</span></span><br><span class="line">WebApplicationContext rootContext =</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">       <span class="comment">// 定义最终要返回的Web应用上下文</span></span><br><span class="line">WebApplicationContext wac = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 如果当前Web应用上下文不为空 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 在默认情况下，在DispatcherServlet作为Bean初始化的时候，就通过setApplicationContext设置其值</span></span><br><span class="line">wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line">           <span class="comment">// 如果当前Web应用上下文是可配置的Web应用上下文</span></span><br><span class="line"><span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">      <span class="comment">// 且Web应用上下文还刷新，则执行此逻辑。默认情况下，该上下文未刷新，不执行此逻辑</span></span><br><span class="line"><span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                   <span class="comment">// 当其父上下文为空时</span></span><br><span class="line"><span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 则设置其父上下文未上面获取的根本上下文</span></span><br><span class="line">cwac.setParent(rootContext);</span><br><span class="line">&#125;</span><br><span class="line">configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果在上一逻辑未获取到Web上下文，此时执行查找逻辑获取</span></span><br><span class="line">           <span class="comment">// 该方法内部通过查找Servlet上下文中本类指定的contextAttribute属性名对应的属性值找到Web上下文</span></span><br><span class="line">wac = findWebApplicationContext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="comment">// 在上一逻辑未获取到Web上下文，则创建一个</span></span><br><span class="line">            <span class="comment">// 在Springboot中第一逻辑获取到了Web应用上下文，故不执行此逻辑</span></span><br><span class="line">wac = createWebApplicationContext(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果此时已接受过用上下文刷新事件，则不执行下面的if块逻辑</span></span><br><span class="line">       <span class="comment">// 在上下文刷新时间中，也会执行onRefresh的方法</span></span><br><span class="line">       <span class="comment">// 如果已经执行了onRefresh方法，则不再执行</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line"><span class="comment">// 执行onRefresh方法，其中执行整个Servlet中组件的初始化操作</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">onRefresh(wac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果配置发布Web应用上下文到Servlet上下文</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line"><span class="comment">// 同时把Web应用上下文添加到Servlet上下文属性中，以供整个Web应用使用</span></span><br><span class="line">String attrName = getServletContextAttributeName();</span><br><span class="line">getServletContext().setAttribute(attrName, wac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>以上便是初始化此Servlet对应的Web应用上下文的过程，在这个过程中执行了DispatcherServlet中使用到的组件初始化，因为一些初始化逻辑需要使用Web应用上下文获取组件，故需先执行此处逻辑</p></blockquote><h1 id="2-组件初始化过程"><a class="markdownIt-Anchor" href="#2-组件初始化过程"></a> 2 组件初始化过程</h1><h3 id="1-multipartresolver"><a class="markdownIt-Anchor" href="#1-multipartresolver"></a> 1 MultipartResolver</h3><blockquote><p>​对于MultipartResolver，已知是通过初始化Web应用上下文获取、</p><p>​MultipartResolver类型为StandardServletMultipartResolver，查找此类的所有使用，发现是在MultipartAutoConfiguration类中创建了此类的实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 只要是基于Servlet的Web应用，就存在这三个类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class&#125;)</span></span><br><span class="line"><span class="comment">// 在属性spring.servlet.multipart.enabled不为flase或不存在时候此配置生效</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.servlet.multipart&quot;,</span></span><br><span class="line"><span class="meta">    name = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">@当Web类型为Servlet的时候生效</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MultipartProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipartAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MultipartProperties multipartProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultipartAutoConfiguration</span><span class="params">(MultipartProperties multipartProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.multipartProperties = multipartProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean(&#123;MultipartConfigElement.class, CommonsMultipartResolver.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.multipartProperties.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;multipartResolver&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(&#123;MultipartResolver.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StandardServletMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">        StandardServletMultipartResolver multipartResolver = <span class="keyword">new</span> StandardServletMultipartResolver();</span><br><span class="line">        <span class="comment">// 根据属性源spring.servlet.multipart.resolvelazily的值，设置multipartProperties中的Resolverlazily属性值，表示对多块请求是否执行懒解析，如果为懒解析则在用多块钱请求数据的时候才对请求进行解析</span></span><br><span class="line">        multipartResolver.setResolveLazily(<span class="keyword">this</span>.multipartProperties.isResolveLazily());</span><br><span class="line">        <span class="keyword">return</span> multipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​MultipartAutoConfiguration本身是自动配置类，在该类中用@Bean的方式标记方法，返回值都会注册到当前应用上下文中，这就应用上下文该组件的来源了</p></blockquote><h3 id="2-localeresovler"><a class="markdownIt-Anchor" href="#2-localeresovler"></a> 2 LocaleResovler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocaleResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从上下文中获取</span></span><br><span class="line">        <span class="keyword">this</span>.localeResolver = (LocaleResolver)context.getBean(<span class="string">&quot;localeResolver&quot;</span>, LocaleResolver.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.localeResolver);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.localeResolver.getClass().getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchBeanDefinitionException var3) &#123;</span><br><span class="line">        <span class="comment">// 上下文中没有使用默认策略</span></span><br><span class="line">        <span class="keyword">this</span>.localeResolver = (LocaleResolver)<span class="keyword">this</span>.getDefaultStrategy(context, LocaleResolver.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">&quot;No LocaleResolver &#x27;localeResolver&#x27;: using default [&quot;</span> + <span class="keyword">this</span>.localeResolver.getClass().getSimpleName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​获取默认组件的策略是通过加载jar包中的DispatcherServlet.properties属性文件，获取其中的key:value。key为组件的类型接口全限定名，value为默认的组件类型名，初始化策略为获取组件接口属性名对应的组件类型属性值，并通过反射，作为默认组件使用。其中DispatchServlet.properties文件内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default implementation classes for DispatcherServlet&#x27;s strategy interfaces.</span></span><br><span class="line"><span class="comment"># Used as fallback when no matching beans are found in the DispatcherServlet context.</span></span><br><span class="line"><span class="comment"># Not meant to be customized by application developers.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.LocaleResolver</span>=<span class="string">org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.ThemeResolver</span>=<span class="string">org.springframework.web.servlet.theme.FixedThemeResolver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.HandlerMapping</span>=<span class="string">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.HandlerAdapter</span>=<span class="string">org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.HandlerExceptionResolver</span>=<span class="string">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.RequestToViewNameTranslator</span>=<span class="string">org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.web.servlet.FlashMapManager</span>=<span class="string">org.springframework.web.servlet.support.SessionFlashMapManager</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><blockquote><p>​上面有些key配置了用逗号隔开的多个class类名，因为有些最贱是list类型，list类型通过方法getDefaultStrategies获取</p></blockquote><p>​除此之外，在配置<code>spring.mvc.locale-resolver=FIXED</code>与<code>spring.mvc.locale-zh_CN</code>后，初始化LocaleResolver就不会通过默认策略进行初始化，而是直接通过应用上下文获取LocaleResolver类型的Bean，为FixedLocaleResolver。通过查找FixedLocaleResolver的构造器引用位置，找到了该Bean的定义位子在WebMvcAutoConfiguration自动配置类的WebMvcAutoConfigurationAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="comment">// 只有配置了spring.mvc.locale属性的时候，该Bean才会被定义</span></span><br><span class="line">        <span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">            prefix = &quot;spring.mvc&quot;,</span></span><br><span class="line"><span class="meta">            name = &#123;&quot;locale&quot;&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过MvcProperties封装spirng.mvc下的所有的配置</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">                <span class="comment">// 使用spring.mvc.locale配置的locale作为构成参数传入，即固定取此Locale</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则使用请求头Locale解析器</span></span><br><span class="line">                AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">                <span class="comment">// 并设置配置值为；localeResolver未解析到Locale时的默认值</span></span><br><span class="line">                localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">                <span class="keyword">return</span> localeResolver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-themeresolver"><a class="markdownIt-Anchor" href="#3-themeresolver"></a> 3 ThemeResolver</h3><blockquote><p>​主题解析器ThemeResolver的初始化逻辑通过方法initThemeResolver执行，该组件在默认情况下同LocaleResolver组件，在应用上下文中无此类型的Bean，最终通过执行降级的初始化方法获取该类型的默认实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initThemeResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.themeResolver = (ThemeResolver)context.getBean(<span class="string">&quot;themeResolver&quot;</span>, ThemeResolver.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.themeResolver);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.themeResolver.getClass().getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchBeanDefinitionException var3) &#123;</span><br><span class="line">        <span class="keyword">this</span>.themeResolver = (ThemeResolver)<span class="keyword">this</span>.getDefaultStrategy(context, ThemeResolver.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">&quot;No ThemeResolver &#x27;themeResolver&#x27;: using default [&quot;</span> + <span class="keyword">this</span>.themeResolver.getClass().getSimpleName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-handlermapping"><a class="markdownIt-Anchor" href="#4-handlermapping"></a> 4 HandlerMapping</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没定义HandlerMapping组件类型的Bean的时候。默认使用组件RequestMappingHandlerMapping BeanNameUrlHandlerMapping.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 是否查找当前BeanFactory与其所有父BeanFactory中HandlerMapping组件，默认为true</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line"><span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">            <span class="comment">// 查找当前以及所有祖先BeanFactory中的HandlerMapping类型的Bean，返回Map类型，key为BeanName，value为Bean实例</span></span><br><span class="line">Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class="line"><span class="comment">// We keep HandlerMappings in sorted order.</span></span><br><span class="line">                <span class="comment">// 排序</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则，只查找BeanName为handlerMapping的Bean作为唯一HandlerMapping组件使用</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore, we&#x27;ll add a default HandlerMapping later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line"><span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line">        <span class="comment">// 当Bean策略查找不到的时候使用默认策略</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;No HandlerMappings declared for servlet &#x27;&quot;</span> + getServletName() +</span><br><span class="line"><span class="string">&quot;&#x27;: using default strategies from DispatcherServlet.properties&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​在默认情况下，会通过当前BeanFactory与其祖先BeanFactory中获取所有的HandlerMapping类型的Bean作为HandlerMapping组件列表使用。默认包括以下组件</p><table><thead><tr><th style="text-align:center">Bean的名称</th><th style="text-align:center">Bean的类型</th><th style="text-align:center">作用</th><th style="text-align:center">初始化位置</th></tr></thead><tbody><tr><td style="text-align:center">faviconHandlerMapping</td><td style="text-align:center">org.springframework.<br>web.servlet.handler.<br>SimpleUrlHandlerMapping</td><td style="text-align:center">简单URl映射，处理**/favicon.ico路径请求，返回网站小图标</td><td style="text-align:center">WebMvcAutoConfiguration.<br>WebMvcAutoConfigurationAdapter.<br>FaviconConfiguration.faviconHandlerMapping</td></tr><tr><td style="text-align:center">requestMappingHandlerMapping</td><td style="text-align:center">org.springframework<br>.web.servlet.mvc.<br>method.annotation.<br>RequestMappingHandlerMapping</td><td style="text-align:center">处理@RequestMapping注解注册的请求处理器</td><td style="text-align:center">WebMvcAutoConfiguration.<br>EnableWebMvcConfiguration.<br>requestMappingHandlerMapping</td></tr><tr><td style="text-align:center">beanNameHandlerMapping</td><td style="text-align:center">org.springframework.<br>web.servlet.handler.<br>BeanNameHandlerMapping</td><td style="text-align:center">用于通过URL映射到Bean的处理器</td><td style="text-align:center">EnableWebMvcConfiguration的祖先类<br>WebMVcConfigurationSupport.<br>beanNameHandlerMappinging()</td></tr><tr><td style="text-align:center">resourceHandlerMapping</td><td style="text-align:center">org.springframework.<br>web.servlet.handler.<br>SimpleUrlHandlerMapping</td><td style="text-align:center">用于处理静态资源映射</td><td style="text-align:center">EnableWebMvcConfiguration的祖先类<br>WebMVcConfigurationSupport.<br>resourceHandlerMapping()</td></tr><tr><td style="text-align:center">WelcomePageHandlerMapping</td><td style="text-align:center">org.springframework.<br>boot.autoconfigure.web.servlet<br>WelcomePageHandlerMapping</td><td style="text-align:center">用于处理默认首页请求跳转到index.html</td><td style="text-align:center">EnableWebMvcConfiguration的祖先类<br>WebMVcConfigurationSupport.<br>weclomePageHandlerMapping()</td></tr></tbody></table><blockquote><p>​大部分组件Bean的初始化都在WebMvcAutoConfiguration类、EnableWebMvcConfiguration类及其父类WebMvcConfigurationSupport中</p><p>​在WebMvcAutoConfiguration自动配置类中，又包含WebMVCAutoConfigurationAdapter配置类，在这个配置中，通过@Import注解引入EnableWebMvcConfiguration类作为配置类，使得EnableWebMvcConfiguration配置类称为Spring Mvc 所有相关组件定义的核心配置类，在该配置类中，包括全部Mvc需要使用到组件的初始化逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration equivalent to &#123;<span class="doctag">@code</span> <span class="doctag">@EnableWebMvc</span>&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"><span class="comment">// 配置属性映射类</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> WebMvcProperties mvcProperties;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> WebMvcRegistrations mvcRegistrations;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">//....省略其他方法</span></span><br><span class="line">   <span class="comment">// 声明为Primary，当过Bean类型获取Bean时，如果有多个Bean存在，则使用标记了@primary的Bean作为结果</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Primary</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">requestMappingHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="meta">@Qualifier(&quot;mvcContentNegotiationManager&quot;)</span> ContentNegotiationManager contentNegotiationManager,</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="meta">@Qualifier(&quot;mvcConversionService&quot;)</span> FormattingConversionService conversionService,</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="meta">@Qualifier(&quot;mvcResourceUrlProvider&quot;)</span> ResourceUrlProvider resourceUrlProvider)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Must be @Primary for MvcUriComponentsBuilder to work</span></span><br><span class="line">      <span class="comment">// 标记Primary后MvcUriComponetsBuilder才能正常工作，此部分内容读者可自行了解</span></span><br><span class="line">       <span class="comment">// 调用父类方法初始化RequestMappingHandlerMapping组件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.requestMappingHandlerMapping(contentNegotiationManager, conversionService,</span><br><span class="line">            resourceUrlProvider);</span><br><span class="line">   &#125;</span><br><span class="line">/</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">         FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">      WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">            <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">            <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">      welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">      welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">      <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">      <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">(Resource resource)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> resource.exists() &amp;&amp; (resource.getURL() != <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> RequestMappingHandlerMapping <span class="title">createRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mvcRegistrations != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.mvcRegistrations.getRequestMappingHandlerMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.mvcRegistrations.getRequestMappingHandlerMapping();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.createRequestMappingHandlerMapping();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​以上代码可以看到并不是在本类中创建的RequestMappingHandlerMapping实例，而是在父类中创建的。其父类为DelegatingWebMvcConfiguration，该类中也没有此方法，所以requestmappingHandlerMapping最终调用的是，WebMvcConfigurationSupport中的方法。</p><p>​DelegatingWebMvcConfiguration类的作用是为实现通过WebMvcConfigurer类型的Bean作为配置器List，并在父类WebMvcConfigurationSupport执行组件配置方式时，遍历这个list，逐一进行组件配置。</p><pre><code>  WebMvcConfigurationSupport类的作用则是为Mvc组件定义与配置提供支持，所有组件Bean的定义都在这个类中，同时该类在定义组件前后会执行一些配置方法。Spring boot引入的配置类EnableWebMvcConfiguration作用仅仅是为了通过spring.nvc相关配置来定制其中一些组件的特性，就如上面代码中看到的RequestMappngHandlerAdapter的定义一样，这也是通过配置来定制组件特性的实现原理。</code></pre><p>​DelegatingWebMvcConfiguration实现了这些配置方法，通过其中保存的WebMvcConfigur配置器列表执行所有配置器的对应方法。</p></blockquote><h3 id="5-handleradapter"><a class="markdownIt-Anchor" href="#5-handleradapter"></a> 5 HandlerAdapter</h3><blockquote><p>​HandlerAdapter组件是处理请求的核心组件，该组件为列表。其初始化逻辑与HandlerMapping初始化逻辑相同，当BeanFactory中无HandlerAdapter组件时，使用默认组件列表：HttpRequestHandlerAdapter、SimpleControllerHandlerAdapter、RequestMappingHandlerAdapter。在SpringBoot中，默认情况是通过BeanFactory获取组件列表</p></blockquote><table><thead><tr><th>Bean名称</th><th>Bean类型</th><th>作用</th><th>初始化配置</th></tr></thead><tbody><tr><td>requestMappingHandlerAdapter</td><td>RequestMappingHandlerAdapter</td><td>处理@RequestMapping标记注解生成的处理器</td><td>WebMVcConfigurationSupport.<br>reqeustMappingHandlerAdapter()</td></tr><tr><td>httpRequestHandlerAdapter</td><td>HttpRequestHandlerAdapter</td><td>处理HttpRequestHandler类型的处理器</td><td>WebMVcConfigurationSupport.<br>httpRequestHandlerAdapter()</td></tr><tr><td>simpleControlerHandlerAdapter</td><td>impleControlerHandlerAdapter</td><td>处理Controller类型的处理器</td><td>WebMVcConfigurationSupport.<br>simpleControlerHandlerAdapter()</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpRequestHandlerAdapter <span class="title">httpRequestHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> HttpRequestHandlerAdapter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleControllerHandlerAdapter <span class="title">simpleControllerHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> SimpleControllerHandlerAdapter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WebConfigurationSupport仅仅是WebMvc配置支持类，本身并不是配置类，所以其内部定义@Bean标记的方法并不会产生Bean所以在实际环境中还需要创建一个配置类，继承该配置支持类，来实现该类作为配置类的目的。</p><p>在SpringMvc中，由配置类DelegatingWebMvcConfiguration中还添加了通过WebMvcConfigurer配置器组件配置WebMVc组件功能。在SpringBoot中，又通过EnableWebMvcConfiguration继承了DelegatingWebMvcConfiguration，从而实现更强大的通过配置文件定义的属性来配置组件功能。</p><h3 id="6-handlerexceptionresolver"><a class="markdownIt-Anchor" href="#6-handlerexceptionresolver"></a> 6 HandlerExceptionResolver</h3><blockquote><p>​HandlerExceptionResolver组件为一个列表，其初始化逻辑与HandlerMapping初始化逻辑相同，默认组件列表为HandlerExceptionResolver、ResponseStatusExceptionResolver、DefaultHandlerExceptionResovler，在SpringBoot默认通过BeanFactory获取组件列表如下</p></blockquote><table><thead><tr><th>Bean的名称</th><th>Bean的类型</th><th>作用</th><th>初始化位置</th></tr></thead><tbody><tr><td>errorAttributes</td><td>DefaultErrorAttributes</td><td>用于发生异常时保存异常信息到请求属性中</td><td>ErrorMvcConfoguration.<br>errorAttributes()</td></tr><tr><td>handlerExceptionResolver</td><td>HandlerExceptionResolver-Composite</td><td>用于组合已有的处理器异常解析器组件</td><td>WebMvcconfigurationSupport.-handlerExceptionResolver</td></tr></tbody></table><blockquote><p>​在handlerExceptionResolver这个HandlerExceptionResolverComposite组合组件中，还包含了三个处理器，改组件用于包装这三个处理器异常解析器，顺序执行其中三个HandlerExceptionResolver、ResponseStatusExceptionResovler、DefaultHandlerExceptionResolver，这三个组件都是在WebMvcConfigurationSupport.handlerExceptionResolver方法中初始化</p><p>​在该方法中，调用了本类的configurationHandlerExceptionResolvers方法，配置处理器异常解析器。在实际运行时，该方法执行的实例在其子类WebMvcAutoConfiguration.EnableWebMvcConfiguration中定义，子类重写了该方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">extendHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.extendHandlerExceptionResolvers(exceptionResolvers);</span><br><span class="line">    <span class="comment">// 为异常添加记录</span></span><br><span class="line">    <span class="comment">//如果spring.mvc.log-resolved-exception为true,则为异常添加日志u记录</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.isLogResolvedException()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (HandlerExceptionResolver resolver : exceptionResolvers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resolver <span class="keyword">instanceof</span> AbstractHandlerExceptionResolver) &#123;</span><br><span class="line">                ((AbstractHandlerExceptionResolver) resolver).setWarnLogCategory(resolver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HandlerExceptionResolver <span class="title">handlerExceptionResolver</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Qualifier(&quot;mvcContentNegotiationManager&quot;)</span> ContentNegotiationManager contentNegotiationManager)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;HandlerExceptionResolver&gt; exceptionResolvers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 执行父类方法 ，其中的逻辑为执行所有WebMvcConfigur类型的Bean的configureHandlerExceptionResolvers方法，配置异常处理器，默认无此类型的Bean故不作处理器</span></span><br><span class="line">    configureHandlerExceptionResolvers(exceptionResolvers);</span><br><span class="line">    <span class="comment">// 默认情况主席那个默认异常处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (exceptionResolvers.isEmpty()) &#123;</span><br><span class="line">        addDefaultHandlerExceptionResolvers(exceptionResolvers, contentNegotiationManager);</span><br><span class="line">    &#125;</span><br><span class="line">    extendHandlerExceptionResolvers(exceptionResolvers);</span><br><span class="line">    HandlerExceptionResolverComposite composite = <span class="keyword">new</span> HandlerExceptionResolverComposite();</span><br><span class="line">    composite.setOrder(<span class="number">0</span>);</span><br><span class="line">    composite.setExceptionResolvers(exceptionResolvers);</span><br><span class="line">    <span class="keyword">return</span> composite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addDefaultHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; exceptionResolvers,ContentNegotiationManager mvcContentNegotiationManager)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 创建ExceptionHandlerExceptionResolver添加到异常处理器列表</span></span><br><span class="line">    ExceptionHandlerExceptionResolver exceptionHandlerResolver = createExceptionHandlerExceptionResolver();</span><br><span class="line">    <span class="comment">// 配置异常处理器的内容协商器</span></span><br><span class="line">    exceptionHandlerResolver.setContentNegotiationManager(mvcContentNegotiationManager);</span><br><span class="line">    <span class="comment">// 设置异常处理器用到的消息转换器</span></span><br><span class="line">    exceptionHandlerResolver.setMessageConverters(getMessageConverters());</span><br><span class="line">    <span class="comment">// 设置异常处理器使用的参数有解析器</span></span><br><span class="line">    exceptionHandlerResolver.setCustomArgumentResolvers(getArgumentResolvers());</span><br><span class="line">    <span class="comment">// 设置异常解析器的返回值处理器</span></span><br><span class="line">    exceptionHandlerResolver.setCustomReturnValueHandlers(getReturnValueHandlers());</span><br><span class="line">    <span class="comment">// 如果在jackson2的库,则添加一个响应体增强其</span></span><br><span class="line">    <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">        exceptionHandlerResolver.setResponseBodyAdvice(</span><br><span class="line">            Collections.singletonList(<span class="keyword">new</span> JsonViewResponseBodyAdvice()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置异常处理器的应用上下文</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        exceptionHandlerResolver.setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行异常处理器的初始化方法</span></span><br><span class="line">    exceptionHandlerResolver.afterPropertiesSet();</span><br><span class="line">    <span class="comment">// 添加异常处理器列表</span></span><br><span class="line">    exceptionResolvers.add(exceptionHandlerResolver);</span><br><span class="line"></span><br><span class="line">    ResponseStatusExceptionResolver responseStatusResolver = <span class="keyword">new</span> ResponseStatusExceptionResolver();</span><br><span class="line">    <span class="comment">//设置该异常解析器的信息源</span></span><br><span class="line">    responseStatusResolver.setMessageSource(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="comment">// 添加异常解析器列表</span></span><br><span class="line">    exceptionResolvers.add(responseStatusResolver);</span><br><span class="line"></span><br><span class="line">    exceptionResolvers.add(<span class="keyword">new</span> DefaultHandlerExceptionResolver());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7requesttoviewnametranslator"><a class="markdownIt-Anchor" href="#7requesttoviewnametranslator"></a> 7RequestToViewNameTranslator</h3><blockquote><p>​RequestToViewNameTranslator组件又叫做ViewNameTranslator组件,该组件在DispatcherServlet中存在一个.其初始化策略与Locale组件相同,默认情况下BeanFactory中未提供该组件,使用默认策略指定的DefalutRequestToViewNameTranslator组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the RequestToViewNameTranslator used by this servlet instance.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If no implementation is configured then we default to DefaultRequestToViewNameTranslator.</span></span><br><span class="line"><span class="comment"> * Beanfactory中没有定义时,使用默认的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRequestToViewNameTranslator</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 默认无组件,触发NoSuchBeanDefinitionEception异常</span></span><br><span class="line"><span class="keyword">this</span>.viewNameTranslator =</span><br><span class="line">context.getBean(REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME, RequestToViewNameTranslator.class);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.viewNameTranslator.getClass().getSimpleName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.viewNameTranslator);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// We need to use the default.</span></span><br><span class="line">           <span class="comment">// 使用默认策略</span></span><br><span class="line"><span class="keyword">this</span>.viewNameTranslator = getDefaultStrategy(context, RequestToViewNameTranslator.class);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;No RequestToViewNameTranslator &#x27;&quot;</span> + REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME +</span><br><span class="line"><span class="string">&quot;&#x27;: using default [&quot;</span> + <span class="keyword">this</span>.viewNameTranslator.getClass().getSimpleName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​该类型组件同样可以通过在ApplicationContext中定义来实现替换该类型的默认组件</p></blockquote><h3 id="8-viewresolver"><a class="markdownIt-Anchor" href="#8-viewresolver"></a> 8 ViewResolver</h3><blockquote><p>​ViewResolver组件为组件列表,其初始化策略与HandlerMapping组件列表相同,在只加入Thymeleaf模板引擎的依赖时.默认BeanFactory中包含五个该组件.</p></blockquote><table><thead><tr><th>Bean的名称</th><th>Bean的类型</th><th>作用</th><th>初始化的位置</th></tr></thead><tbody><tr><td>beanNameViewResovler</td><td>BeanNameViewResovler</td><td>用于支持默认的Bean名称是哦图解析器</td><td>ErrorMvcAutoConfiguration.-whitelabelErrorViewConfiguration.-beanNameViewResolver</td></tr><tr><td>mvcViewResolver</td><td>ViewResovlerComposite</td><td>提供configure-ViewResolver方法添加VIewResolver的功能<br>也支持通过BeanFactory获取所有ViewResolver类型的Bean</td><td>EnableWebMvcConfiguration-的祖先类WebMvcConfigurationSupport.<br>mvcViewResolver</td></tr><tr><td>defaultViewResolver</td><td>InternalResource-ViewResolver</td><td>默认的视图解析器，用于解析html、jsp等内置的静态页面资源</td><td>WebMvcAutoConfiguration.-WebMvcAuto-ConfigurationAdapter.defaultViewResolver</td></tr><tr><td>viewResolver</td><td>ContentNegotiating-ViewResolver</td><td>内容协商视图解析器，用于支持根据请求接受内容类型与视图内容类型自动匹配视图功能</td><td>WebMvcAutoConfiguration.-WebMvcAuto-ConfigurationAdapter.ViewResolver(BeanFactory beanfactory)</td></tr><tr><td>thymeleafViewResolver</td><td>ThymeleafViewResolver</td><td>用于支持Thymeleaf类型的模板视图</td><td>ThymeleaAutoConfiguration.-ThymeleaWebMvcConfiguration.-ThymeleafViewResolverConfiguration.-thymeleafViewResolver</td></tr></tbody></table><blockquote><p>​其中beanNameViewResolver在WebMvcAutoConfigurationAdapter.beanNameViewResolver（）也进行了初始化，但因ErrorMvcAutoConfiguration的执行顺序在前（通过@AutoConfigureBefore（WebMvcAutoConfiguration.class）指定顺序），故ErrorMvcAutoConfiguration中的beanNameViewResolver有限</p><p>​另外，Thymeleaf模板视图是在引用Thymeleaf依赖后自动添加的，同此原理，其他类型模板的依赖引入后，也会自动添加对应类型的视图解析器。如freeMarkerViewResolve。关于ThymeLeaf的自动配置，依赖于ThymeleftAutoConfiguration自动配置类，在该自动配置类中判断ThymeLeaf依赖是否存在。存在是则创建ThymeLeaf对应的视图解析器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定配置类</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 在servlet容器中使用</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="comment">//当为true或者不存在的时候启用</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.thymeleaf.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafWebMvcConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnEnabledResourceChain</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class)</span></span><br><span class="line">   <span class="function">FilterRegistrationBean&lt;ResourceUrlEncodingFilter&gt; <span class="title">resourceUrlEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      FilterRegistrationBean&lt;ResourceUrlEncodingFilter&gt; registration = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(</span><br><span class="line">            <span class="keyword">new</span> ResourceUrlEncodingFilter());</span><br><span class="line">      registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR);</span><br><span class="line">      <span class="keyword">return</span> registration;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 声明ThymeLeaf的ViewResolver组件</span></span><br><span class="line">   <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafViewResolverConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">// 声明ThymeLeaf的ViewResolver组件</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">       <span class="comment">// 不存在thymeLeafViewResolver时创建</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean(name = &quot;thymeleafViewResolver&quot;)</span></span><br><span class="line">      <span class="function">ThymeleafViewResolver <span class="title">thymeleafViewResolver</span><span class="params">(ThymeleafProperties properties,</span></span></span><br><span class="line"><span class="params"><span class="function">            SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 构造</span></span><br><span class="line">         ThymeleafViewResolver resolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">          <span class="comment">// 设置模板引擎</span></span><br><span class="line">         resolver.setTemplateEngine(templateEngine);</span><br><span class="line">          <span class="comment">// 设置编码</span></span><br><span class="line">         resolver.setCharacterEncoding(properties.getEncoding().name());</span><br><span class="line">          <span class="comment">// 设置contenttype</span></span><br><span class="line">         resolver.setContentType(</span><br><span class="line">               appendCharset(properties.getServlet().getContentType(), resolver.getCharacterEncoding()));</span><br><span class="line">          <span class="comment">// </span></span><br><span class="line">         resolver.setProducePartialOutputWhileProcessing(</span><br><span class="line">               properties.getServlet().isProducePartialOutputWhileProcessing());</span><br><span class="line">          <span class="comment">// 设根据配置文件置需要排除的视图名</span></span><br><span class="line">         resolver.setExcludedViewNames(properties.getExcludedViewNames());</span><br><span class="line">          <span class="comment">//根据配置文件设置需要解析的视图名</span></span><br><span class="line">         resolver.setViewNames(properties.getViewNames());</span><br><span class="line">         <span class="comment">// This resolver acts as a fallback resolver (e.g. like a</span></span><br><span class="line">         <span class="comment">// InternalResourceViewResolver) so it needs to have low precedence</span></span><br><span class="line">          <span class="comment">// 指定顺序比最低的优先级高一个优先级，由InternalResourceViewResolver兜底</span></span><br><span class="line">         resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class="number">5</span>);</span><br><span class="line">          <span class="comment">// 根据配置文件设置是否启用缓存</span></span><br><span class="line">         resolver.setCache(properties.isCache());</span><br><span class="line">         <span class="keyword">return</span> resolver;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> String <span class="title">appendCharset</span><span class="params">(MimeType type, String charset)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (type.getCharset() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> type.toString();</span><br><span class="line">         &#125;</span><br><span class="line">         LinkedHashMap&lt;String, String&gt; parameters = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">         parameters.put(<span class="string">&quot;charset&quot;</span>, charset);</span><br><span class="line">         parameters.putAll(type.getParameters());</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> MimeType(type, parameters).toString();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-flashmapmannger组件"><a class="markdownIt-Anchor" href="#9-flashmapmannger组件"></a> 9 FlashMapMannger组件</h3><blockquote><p>​在DispatcherServlet中只存在一个FalshMapManager组件.其初始化策略与LocaleResolver组件相同,默认情况下BeanFacotry中没有提供该组件,使用默认策略指定的SessionFlashMapManager组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFlashMapManager</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.flashMapManager = context.getBean(FLASH_MAP_MANAGER_BEAN_NAME, FlashMapManager.class);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.flashMapManager.getClass().getSimpleName());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Detected &quot;</span> + <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">      <span class="comment">// We need to use the default.</span></span><br><span class="line">       <span class="comment">// 默认使用SessionFlashMapManage</span></span><br><span class="line">      <span class="keyword">this</span>.flashMapManager = getDefaultStrategy(context, FlashMapManager.class);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;No FlashMapManager &#x27;&quot;</span> + FLASH_MAP_MANAGER_BEAN_NAME +</span><br><span class="line">               <span class="string">&quot;&#x27;: using default [&quot;</span> + <span class="keyword">this</span>.flashMapManager.getClass().getSimpleName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​通过初始化代码可知,该类型组件可以在Application中重新定义,但该组件类型较为复杂</p></blockquote><h3 id="10-webasyncmanager组件"><a class="markdownIt-Anchor" href="#10-webasyncmanager组件"></a> 10 WebAsyncManager组件</h3><blockquote><p>​WebAsyncManager组件并不属于DispatcherServlet中的组件,但其也是处理过程中非常重要的组件,该组件的获取是通过方法WebAsyncUtils.getAsyncManage实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据请求获取该请求对应的异步管理器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebAsyncManager <span class="title">getAsyncManager</span><span class="params">(ServletRequest servletRequest)</span> </span>&#123;</span><br><span class="line">    WebAsyncManager asyncManager = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 在当前请求属性中尝试获取</span></span><br><span class="line">    Object asyncManagerAttr = servletRequest.getAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE);</span><br><span class="line">    <span class="keyword">if</span> (asyncManagerAttr <span class="keyword">instanceof</span> WebAsyncManager) &#123;</span><br><span class="line">        asyncManager = (WebAsyncManager) asyncManagerAttr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不存在创建，并添加到属性当中</span></span><br><span class="line">    <span class="keyword">if</span> (asyncManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">        asyncManager = <span class="keyword">new</span> WebAsyncManager();</span><br><span class="line">        servletRequest.setAttribute(WEB_ASYNC_MANAGER_ATTRIBUTE, asyncManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> asyncManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​在配置文件中，可以通过spring.mvc.async.request.request-timeout指定异步请求超时，同时也可以通过WebMvcConfigurer接口实现类Bean的configureAsyncSupport方法配置更多的属性。</p><p>​已知MvcProperties为spring.mvc下所有配置属性的表现类，那其中也必然有spring.mvc.async.request-timeout的绑定属性，为MvcProperties.async.requestTimeout，通过查找该属性的使用位置，找到了使用该值进行配置的逻辑，即在WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter的configureAsyncSupport方法中。<br>​可以看到WebMvcAutoConfigurationAdapter正是WebMvcConfigurer配置器接口实现类，即改配置其实是通过配置接口的实现类Bean实现的，</p><p>​那么配置器是如何生效的呢，在RequestMapping组件初始化中，已经讲述过EnableWebMVCConfiguration与其父类DelegatingWebMvcConfiguration及再上一级的父类WebMvcConfigurationSupport的大致作用，可以就以Async的配置为例，简述其代码的实现原理。一样通过反查法的方式推断。</p><p>​通过查找WebMvcConfigurer.configureAsyncSupport方法的调用，可以找到两处。第一处是DelegatingWebMvcConfiguration的configureAsyncSupport方法，第二处是WebMvcConfigurerComposite的configureAsyncSupport方法，第一次调用的就是第二次的方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建WebMvc配置类组合类，用于组合全部配置器实例</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 自定注入当前应用上下文所有MVC配置类</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    、</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 配置时，调用配置类组合器的配置方法</span></span><br><span class="line">        <span class="keyword">this</span>.configurers.configureAsyncSupport(configurer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置器组合器，同样实现配置器接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfigurerComposite</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">// 全部配置类Bean实例列表，名字叫做delegates代理，即代理Bean的调用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;WebMvcConfigurer&gt; delegates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加需要代理执行的配置类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWebMvcConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.delegates.addAll(configurers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 代理执行配置方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (WebMvcConfigurer delegate : <span class="keyword">this</span>.delegates) &#123;</span><br><span class="line">delegate.configureAsyncSupport(configurer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​可以看到配置器组合类的目的是代理多个配置器的配置方法调用，所以该方法的真实调用其实是DelegatingWebMvcConfigureration的ConfigureAsyncSupport</p><p>方法，该方法重写了父类WebMvcConfigureationSupport方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title">requestMappingHandlerAdapter</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="meta">@Qualifier(&quot;mvcContentNegotiationManager&quot;)</span> ContentNegotiationManager contentNegotiationManager,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="meta">@Qualifier(&quot;mvcConversionService&quot;)</span> FormattingConversionService conversionService,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="meta">@Qualifier(&quot;mvcValidator&quot;)</span> Validator validator)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...省略</span></span><br><span class="line">    <span class="comment">// 创建Async配置支持</span></span><br><span class="line">   AsyncSupportConfigurer configurer = <span class="keyword">new</span> AsyncSupportConfigurer();</span><br><span class="line">    <span class="comment">//调用 Async配置方法，子类重写该方法实现通过WevMvcConfigurer配置Async的目的</span></span><br><span class="line">   configureAsyncSupport(configurer);</span><br><span class="line">    <span class="comment">// 配置完成之后获取Async相关配置与组件并设置到RequestMappingHandlerAdapter组件中</span></span><br><span class="line">   <span class="keyword">if</span> (configurer.getTaskExecutor() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      adapter.setTaskExecutor(configurer.getTaskExecutor());</span><br><span class="line">   &#125;</span><br><span class="line">    /</span><br><span class="line">   <span class="keyword">if</span> (configurer.getTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      adapter.setAsyncRequestTimeout(configurer.getTimeout());</span><br><span class="line">   &#125;</span><br><span class="line">   adapter.setCallableInterceptors(configurer.getCallableInterceptors());</span><br><span class="line">   adapter.setDeferredResultInterceptors(configurer.getDeferredResultInterceptors());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-themesource-主题源"><a class="markdownIt-Anchor" href="#11-themesource-主题源"></a> 11  ThemeSource 主题源</h3><blockquote><p>​主题源也不是DispatchServlet原始组件的一部分，其在DispatcherServlet的doService方法中设置到请求属性中，通过DispatcherServlet的getThemeSource方法获取了主题源。在默认情况，获取到的主题源是Web应用上下文自身，因为默认Web应用上下文实现类ThemeSource接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取主题源</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ThemeSource <span class="title">getThemeSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (getWebApplicationContext() <span class="keyword">instanceof</span> ThemeSource ? (ThemeSource) getWebApplicationContext() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>​而在Web应用上下文中，其实现的ThemeSource接口的getTheme方法其实是个代理方法，真正执行的是当前Web应用上下文实例中保存的ThemeSource主题源实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Theme <span class="title">getTheme</span><span class="params">(String themeName)</span> </span>&#123;</span><br><span class="line">   Assert.state(<span class="keyword">this</span>.themeSource != <span class="keyword">null</span>, <span class="string">&quot;No ThemeSource available&quot;</span>);</span><br><span class="line">    <span class="comment">// 实际执行本类主题源实例的该方法</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.themeSource.getTheme(themeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​那么上面代码中主题源实例何时初始化的呢？通过查找其引用，找到了设置值的位置为GenericWebApplicationContext上下文类的onRefresh方法，通过UiApplicationContextUtils的initThemeSource方法进行初始化</p><p>​在initThemeSource方法中，则尝试先从BeanFactory中或其父BeanFactory中获取名称为themesource，类型为ThemeSource的bean作为主题源。</p></blockquote><h3 id="12-messagesource信息源"><a class="markdownIt-Anchor" href="#12-messagesource信息源"></a> 12 MessageSource信息源</h3><h3 id="13-springboot-配置类简单解析"><a class="markdownIt-Anchor" href="#13-springboot-配置类简单解析"></a> 13 SpringBoot 配置类简单解析</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/11/29/Spring-MVC-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8A%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96/image-20201206164605785.png" alt="image-20201206164605785"></p><ul><li><code>WebMvcConfigurer</code></li></ul><blockquote><p>暂时理解为WebMvc的配置扩展类</p></blockquote><ul><li><code>WebMvcConfigurerComposite</code></li></ul><blockquote><p>WebMvcConfigurer的组合器</p></blockquote><ul><li><code>WebMvcConfigurerSupport</code></li></ul><blockquote><p>为Mvc组件的定义与组件配置提供支持，所有的Bean的定义都在这个组类中，同时该类在定义前后会执行一些配置方法。SpringBoot引入配置类<code>EnableWebMvcConfiguration</code>的作用仅仅是为了通过spring.mvc相关配置来定制其中的一些组件的特性</p></blockquote><ul><li><code>DelegatingWebMvcConfiguration</code></li></ul><blockquote><p>为实现通过WebMvcConfigurer接口实现类Bean进行Mvc配置的目的。其中注入当前上下文中全部WebMvcConfigurer类型的Bean作为配置器List，并在父类WebMvcConfigurationSupport执行组件配置方式时，遍历这个配置器list，实现逐一配置。实现类内部@Bean定义组件的目的，同时DelegatingWebMvcconfiguration中还添加了通过WebMvcConfigurer配置器组件配置WebMvc组件功能</p></blockquote><ul><li><code>WebMvcAutoConfigurer</code></li></ul><blockquote><p>在此类中包含<code>WebMvcAutoConfigurationAdapter</code>类</p></blockquote><ul><li><code>EnableWebMvcConfiguration</code></li></ul><blockquote><p>为了通过spring.mvc相关配置来定制其中的一些组件的特性，并且包含全部的MVC需要使用到组件初始化逻辑</p></blockquote><ul><li><code>WebMvcAutoConfigurationAdapter</code></li></ul><blockquote><p>引入了EnableWebMvcConfigureation类作为配置类，在该配置类中包含全部的MVC需要使用到组件初始化逻辑，并且配置一部分MvcProperties属性</p></blockquote><p><strong>总结：</strong></p><blockquote><p>Spring Mvc 组件配置核心就是在SpringBoot中为WebMvcAutoconfiguration自动配置类，其中根据提供的配置属性定制、创建一些MVC中的组件。同时还提供了WebMvcAutoConfigurationAdapter，该类为WEbMvcConfigurer配置器的实现类，其中的配置方法里又根据配置文件中提供的配置属性定制了MVC组件特性，又提供了EnableWebMvcConfiguration这个核心的MVC配置类，内部提供了MVC全部组件的注册与配置逻辑，用于实现无法通过WebMvcConfigurer达到配置的功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源代码 - SpringMvc源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 - SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DispatcherServlet详解</title>
      <link href="/2020/11/19/DispatcherServlet%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/11/19/DispatcherServlet%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="dispatcherservlet-过程分析"><a class="markdownIt-Anchor" href="#dispatcherservlet-过程分析"></a> DispatcherServlet 过程分析</h1><h2 id="一-原始servlet到springmvc"><a class="markdownIt-Anchor" href="#一-原始servlet到springmvc"></a> 一 原始Servlet到SpringMvc</h2><blockquote><p>在过滤器执行完成之后，将会进入Servlet组件的执行中。首先出现的Servlet的类为HttpServlet，该类为抽象类</p></blockquote><ol><li>首先进入HttpServlet的service方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从Filter转向Servlet的入口方法，方法负责把原始的Servlet请求与相应转化为基于HTTP的Servlet请求与相应，* 再调用重载的Serivce方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpServletRequest  request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 对两个参数进行转换,只有基于Servlet的Web容器,产生的HTTP请求与响应就是下面返回的对应类型,这里的转换是用来提供重载Service方法</span></span><br><span class="line">        request = (HttpServletRequest) req;</span><br><span class="line">        response = (HttpServletResponse) res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用重载的方法</span></span><br><span class="line">    service(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>进入父类的service进行执行逻辑</li></ol><blockquote><p>其中GET方法请求处理有些特殊，进行了HTTP缓存规范判断，如判断请求头中的If—Modified—Since已达到直接从浏览器缓存中获取请求结果的目的。但前提是需要支持LastModified功能。在DIspatcherServlet中，GET请求缓存通过另外的途径来实现，这里的getLastModified方法固定返回-1，故固定执行doGet方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String method = req.getMethod();</span><br><span class="line"><span class="comment">// 对请求的方法进行  判断,支持以下七种方法</span></span><br><span class="line">    <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">            <span class="comment">// to go through further expensive logic</span></span><br><span class="line">            <span class="comment">// 如果不支持缓存策略,执行doGet方法逻辑</span></span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                maybeSetLastModified(resp, lastModified);</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">        maybeSetLastModified(resp, lastModified);</span><br><span class="line">        doHead(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">        doPut(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">        doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">        doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">        doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">        <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">        <span class="comment">// 进入此逻辑表示请求方法不被支持,会直接返回错误响应</span></span><br><span class="line">        <span class="comment">// 因为PATCH方法与其他无法识别的请求方法在FrameworkServlet中重写的该方法提供了支持,故此处SpringMvc 下将不会进入</span></span><br><span class="line"></span><br><span class="line">        String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">        errArgs[<span class="number">0</span>] = method;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li><p>在HttpServlet的do*方法中，均返回固定的错误请求，错误状态码为405，请求方法不被支持。所以若要对对应的请求方法提供支持，子类必须重写父类对应的请求do*系列方法。</p><p>在SpringMvc中，真是的Servlet实例为DispatcherServlet，其中其父类FrameworkServlet重写了HttpServlet中所有的do*方法。</p><p>因为在SpringMvc的设计中，可以根据@RequestMapping注解标记的方法条件，把请求根据请求方法分发到不同的处理器方法上，故最终所有的方法需要调用同一个分发逻辑，所以在FrameworkServlet中的do*方法，可以看到都调用了同一个方法processRequest</p><p>其实在不同的do*系列方法中，根据HTTP请求方法的定义，会做一些默认的处理，如doHead方法会调用doGet方法，FrameworkServlet中并没有重写doHead，而是通过重写doGet实现doHead的内部功能。同时还有doOptions方法进行了Options类型请求方法的特有处理，doTrace方法包括了特有的Trace相关的跟踪操作。</p><p>在上述过程执行完成之后，SpringMvc 提供的Servlet组件与Web容器整合，在后续的过程中，将调用与Servlet无关的processRequest方法，并以此为入口，进入到SpringMvc框架对请求的处理中。上述过程是从原始的Web容器调用到MVC框架组建的过程。</p></li></ol></blockquote><h2 id="二-dispatcherservlet请求入口"><a class="markdownIt-Anchor" href="#二-dispatcherservlet请求入口"></a> 二 DispatcherServlet请求入口</h2><blockquote><p>在原始的Web容器入口开始，一步步对请求进行处理，在执行到Servlet层之后，开始进入SpringMvc的请求处理组件。所有的请求处理入口都在Spring的DispatchServlet组件中，都是以processDispatch开头的。</p></blockquote><h3 id="1-处理请求方法"><a class="markdownIt-Anchor" href="#1-处理请求方法"></a> 1 处理请求方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process this request, publishing an event regardless of the outcome.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #doService&#125; template method.</span></span><br><span class="line"><span class="comment"> * 处理请求方法，用于执行所有请求的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 记录当前时间，用于日志记录</span></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">       <span class="comment">// 失败原因，如请求处理过程抛出异常，则用该变量进行记录</span></span><br><span class="line">Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 获取当前的本地上下文，存储为上一个本地化上下文变量，以便在此请求处理中使用新的本地化上下文，在使用完成后通过该变量恢复原始的本地化上下文</span></span><br><span class="line">LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line"><span class="comment">// 构建当前请求的本地化上下文</span></span><br><span class="line">       LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"><span class="comment">// 同本地化上下文，这里先存储上一次请求的请求属性上下文，以便在此请求处理中使用新的请求属性上下文，在使用完成后根据该变量恢复原始的请求属性上下文</span></span><br><span class="line">RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">// 构造当前请求属性上下文</span></span><br><span class="line">       ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"><span class="comment">// 获取或创建当前请求的异步管理器，用于对异步相应结果提供支持</span></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">       <span class="comment">// 拦截器RequestBindingInterceptor的作用同上面构造上下文逻辑和下面初始化上下文持有器initContextHolders与重置上下文持有器restContextHolders的作用相同</span></span><br><span class="line">       <span class="comment">// 因为请求的处理与当前线程是异步的关系，所以在其他线程执行初始化操作时就需要使用执行注册的这个拦截器</span></span><br><span class="line">asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"><span class="comment">// 初始化上下文持有器，包括请求上下文处理器LocaleContextHolder和本地化上下文持有器RequestContextHolder，修改这两个持有器所持有得上下文为新建上下文</span></span><br><span class="line">initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 初始化完成之后执行真正处理请求方法</span></span><br><span class="line">doService(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">           <span class="comment">// 拦截Servlet和Io异常记录后再度抛出</span></span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">           <span class="comment">// 记录其他异常</span></span><br><span class="line">failureCause = ex;</span><br><span class="line">           <span class="comment">// 记录后抛出新的前台异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// 重置上下文持有器，重置为该方法前面的逻辑保存的原始上下文。在异步请求拦截器里面，重置上下文则把上下文设置为NULL，这里则设置之前的上下文</span></span><br><span class="line">resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line"><span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// 标记请求完成，并执行一些请求完成的回调方法</span></span><br><span class="line">requestAttributes.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 日志</span></span><br><span class="line">logResult(request, response, failureCause, asyncManager);</span><br><span class="line">           <span class="comment">// 向当前应用上下文中发布请求被处理的时间，事件类为ServletRequestHandlerEvent其中包含一些请求的相关属性，如请求路径、请求方法等</span></span><br><span class="line">publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-请求分发概述"><a class="markdownIt-Anchor" href="#2-请求分发概述"></a> 2  请求分发概述</h3><blockquote><p>在整个方法中，每一段逻辑都有其自身的目的，且整体从前到后都是按照请求处理的流程在执行。同时，每一段逻辑的处理都涉及一些Spring Mvc 的组件</p></blockquote><ol><li>预处理多块请求</li><li>获取请求处理器</li><li>查询处理适配器</li><li>处理HTTP缓存</li><li>执行前置拦截器链</li><li>处理适配器执行</li><li>返回值视图名处理</li><li>执行后置拦截器链</li><li>处理返回值与响应</li><li>执行完成拦截器链</li><li>清理资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 执行请求分发到处理器</span></span><br><span class="line"><span class="comment">* 处理器通过当前应用中初始化的HandlerMapping处理器映射列表按顺序获取处理器</span></span><br><span class="line"><span class="comment">* 通过当前应用中初始化的HandlerAdapter处理适配器列表，获取支持当前请求处理器的处理适配器</span></span><br><span class="line"><span class="comment">* 该方法可以处理所有的请求方法。对于一些特殊的请求方法如Option是等，响应需要做额外的一些适配操作，该适配器操作交给请求处理器与处理适配器的逻辑去处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个已处理器请求，指向参数中的request，已处理请求后序可能改变</span></span><br><span class="line">   HttpServletRequest processedRequest = request;</span><br><span class="line">    <span class="comment">// 定义处理器执行链，内部封装拦截器列表与处理器</span></span><br><span class="line">   HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">// 是否是多块请求，默认为否</span></span><br><span class="line">   <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 获取与当前请求想关联的异步管理器，用于执行异步操作</span></span><br><span class="line">   WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"><span class="comment">// 整体放在try中，用于捕获处理过程中的所有异常</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 用于保存处理器适配器执行后的返回结果</span></span><br><span class="line">      ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">// 用于保存处理过程中发生的异常</span></span><br><span class="line">      Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 嵌套一个try，内部获取真实的处理异常，在异常处理中还有可能发生异常，上层的try作用为拦截这层try异常处理中发生的异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 检查多块请求，如果是多块请求，则返回一个新的请求，processRequest保存这个心得请求引用；否则返回原始请求</span></span><br><span class="line">         processedRequest = checkMultipart(request);</span><br><span class="line">         <span class="comment">// 判断两者是否是同一个引用，如果是说明是多块请求，且已经处理。此变量为true</span></span><br><span class="line">          multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">          <span class="comment">// 获取可处理当前请求的请求处理器，通过HandlerMapping查找，请求处理器中封装了拦截器链和对应的处理器，可以是具体的处理器方法</span></span><br><span class="line">         mappedHandler = getHandler(processedRequest);</span><br><span class="line">         <span class="comment">// 如果没有则执行没有处理器逻辑</span></span><br><span class="line">          <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 内部逻辑判断配置throwExceptionIfNoHandlerFound是否为true，如果为true则爆出异常，否则直接设置响应内容为404</span></span><br><span class="line">              <span class="comment">// 可以通过spring.mvc.throwExceptionIfNoHandlerFound设置其值，默认为false</span></span><br><span class="line">            noHandlerFound(processedRequest, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">          <span class="comment">// 根据当前请求的处理器获取支持该处理器的处理器适配器</span></span><br><span class="line">         HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">          <span class="comment">// 单独处理last-modified请求头，用于判断请求内容是否修改，如果未修改直接返回，浏览器使用本地缓存</span></span><br><span class="line">         String method = request.getMethod();</span><br><span class="line">          <span class="comment">// 只有get请求和head请求执行此判断</span></span><br><span class="line">         <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">         <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">             <span class="comment">// 具体实现还是通过处理器适配器来实现的</span></span><br><span class="line">             <span class="comment">// 通过处理器适配器的getLastModified方法，传入请求与处理器，获取该请求对应内容的最后修改时间</span></span><br><span class="line">             <span class="comment">// 一般针对静态资源，返回静态资源的上一次修改时间，动态资源固定返回-1，表示不存在时间</span></span><br><span class="line">            <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">            <span class="comment">// 经过判断，如果最后修改时间在当前请求中浏览器缓存时间之前，则直接返回状态码304，表示未修改，浏览器可以直接使用本地缓存作为请求内容</span></span><br><span class="line">             <span class="comment">// 否则继续执行请求处理逻辑，lastMOdified为-1固定执行后序请求处理逻辑</span></span><br><span class="line">             <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">// 通过mappedHandler这个HandlerExecutionChain执行链的封装，链式执行其中所有拦截器的前置拦方法preHandler</span></span><br><span class="line">         <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">             <span class="comment">// 任意一个拦截器的前置方法返回了false，即提前结束请求的处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">          <span class="comment">// 最终执行处理器适配器的处理方法，传入请求，响应与其对应的处理器，对请求进行处理。在这个处理中，最终调用到了请求对应的处理器方法</span></span><br><span class="line">          <span class="comment">// 执行的返回值是ModelAndView类型，封装了模型数据与视图，后序对此结果进行处理并根据其中的视图与模型返回响应内容</span></span><br><span class="line">         mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"><span class="comment">// 如果异步处理开始，则直接返回，后序处理均通过异步执行</span></span><br><span class="line">         <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">// 应用默认视图名，如果返回值得ModelAndVIew中不包含视图名，则根据请求设置默认视图名</span></span><br><span class="line">         applyDefaultViewName(processedRequest, mv);</span><br><span class="line">          <span class="comment">// 请求处理正常完成，链式执行所有拦截器的postHandler方法。链式顺序与preHandler相反</span></span><br><span class="line">         mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">          <span class="comment">// 发现异常保存异常</span></span><br><span class="line">         dispatchException = ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">         <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">         <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">          <span class="comment">// 在Spring Mvc4.3 版本以后，添加了支持error类型异常的处理。Throwable的子类除了Exception就是Error</span></span><br><span class="line">          <span class="comment">// 可以通过@ExceptionHandler处理这种类型的异常</span></span><br><span class="line">          <span class="comment">// 封装为嵌套异常，以供异常处理逻辑使用</span></span><br><span class="line">         dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 对上面的逻辑的执行结果进行处理，包括处理适配器的执行结果以及发生的异常处理等逻辑</span></span><br><span class="line">      processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">       <span class="comment">// 外层try的catch，用于拦截对执行结果的处理过程processDispatchResult中发生的异常</span></span><br><span class="line">       <span class="comment">// 拦截后链执行拦截器链afterCompletion方法。在该方法内部判断mappedHandler是否为空，如果不为空，则执行triggerAfterCompletion方法</span></span><br><span class="line">      triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">       <span class="comment">// 拦截Error类型的异常拦截后链式执行拦截器链的afterCompletion方法</span></span><br><span class="line">      triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">            <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 资源处理</span></span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"> <span class="comment">//如果在异步请求执行中，则链式执行拦截器链中的afterConcurrentHandlingStarted方法，即针对异步请求的特殊处理</span></span><br><span class="line">         <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">         <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          </span><br><span class="line">         <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">         <span class="comment">// 如果是多块资源，则清理多块资源占用的系统资源，包括文件缓存等</span></span><br><span class="line">          <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">            cleanupMultipart(processedRequest);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-预处理多块请求"><a class="markdownIt-Anchor" href="#1-预处理多块请求"></a> 1  预处理多块请求</h4><blockquote><p>在SpringMvc中，对于多块请求有特殊的处理，如@RequestPart绑定多块请求参数与多块请求文件等。要想实现这些特殊处理，就需要先对请求类型为多块请求执行预处理，在请求分发前就执行该操作，并替换后序使用的请求已预处理过的多块请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果请求是多块请求，则转化为多块请求的多装数据类型，并标记多块请求解析器为可用</span></span><br><span class="line"><span class="comment"> * Convert the request into a multipart request, and make multipart resolver available.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If no multipart resolver is set, simply use the existing request.</span></span><br><span class="line"><span class="comment"> * 如果设置为多块请求解析器，则直接使用原始请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the processed request (multipart wrapper if necessary) 如果是多块请求则返回请求的包装类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> MultipartResolver#resolveMultipart</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HttpServletRequest <span class="title">checkMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">    <span class="comment">// 如果多块请求解析器不为空，使用多块请求解析器判断是否是多块请求，如果是，则执行后面的逻辑</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartResolver != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.multipartResolver.isMultipart(request)) &#123;</span><br><span class="line">       <span class="comment">// 如果当前请求已经是多块请求的包装类型，则打印日志，并且返回</span></span><br><span class="line">      <span class="keyword">if</span> (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (request.getDispatcherType().equals(DispatcherType.REQUEST)) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 如果当前请求中包含异常（通过请求属性java.servlet.error.exception 有无判断） 则返回传入的参数请求</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (hasMultipartException(request)) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Multipart resolution previously failed for current request - &quot;</span> +</span><br><span class="line">               <span class="string">&quot;skipping re-resolution for undisturbed error rendering&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 否则执行多块请求解析</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 尝试通过多块请求解析器解析多块请求，并返回多块请求解析器包装过的多块请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.multipartResolver.resolveMultipart(request);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (MultipartException ex) &#123;</span><br><span class="line">             <span class="comment">// 发生异常时，先判断是否存在异常，如果已经存在则打印日志，否则抛出改异常</span></span><br><span class="line">            <span class="keyword">if</span> (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               logger.debug(<span class="string">&quot;Multipart resolution failed for error dispatch&quot;</span>, ex);</span><br><span class="line">               <span class="comment">// Keep processing error dispatch with regular request handle below</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// If not returned before: return original request.</span></span><br><span class="line">    <span class="comment">// 如果多块请求解析器为空，或者不为多块请求，或者执行其他不解析多块请求的多级，则直接返回原请求</span></span><br><span class="line">   <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>默认情况下，多块请求解析器为StandardServletMultipartResolver 其判断请求是否为多块请求的依据是请求方法为POST，且请求的Content-Type以multipart开头</p><p>多块请求解析器除了提供判断是否是多块请求的方法 isMultipart与解析多块请求的方法resolveMultipart外，还提供了清理多块请求占用资源的方法cleanMultpart，在逻辑清理的时候会使用到该功能</p></blockquote><h4 id="2-查找请求处理器"><a class="markdownIt-Anchor" href="#2-查找请求处理器"></a> 2 查找请求处理器</h4><blockquote><p>对于请求的处理，最终都是要通过处理器来执行，SpringMvc把请求处理器的查找与请求处理器的执行分离。在doDispatch方法中，执行请求处理器的查找，也是SpringMvc的核心操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回该请求对应的请求处理链</span></span><br><span class="line"><span class="comment"> * Return the HandlerExecutionChain for this request.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Tries all handler mappings in order.</span></span><br><span class="line"><span class="comment"> * 按顺序查找全部处理器映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the HandlerExecutionChain, or &#123;<span class="doctag">@code</span> null&#125; if no handler could be found</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 如果请求映射列表不为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历全部处理器映射</span></span><br><span class="line">      <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">          <span class="comment">// 尝试执行当前处理器映射的获取处理器方法，获取与本次请求适配的处理器执行链</span></span><br><span class="line">         HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">          <span class="comment">// 不为空直接返回，即便有多个处理器执行链匹配，也只返回第一个，处理器映射排在前面的优先返回</span></span><br><span class="line">         <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​@RequestMapping注解注册的处理器方法，其相关的处理器映射类为RequestMappingHandlerMapping，该映射器内部根据当前请求与所有的注解信息进行匹配，找到最佳匹配并封装为处理器执行链进行返回</p><p>​这也正是SpringMvc高度封装的体现，把一个复杂的逻辑都封装为一个接口，不仅可以通过不同的接口实现来完成不同的映射查找功能，同时无论映射查找功能有多复杂，这里看到的代码结构仍然非常的清晰。在这里把抽象与封装的概念体现的淋漓尽致</p><p>​同时注意，查找到的是处理器执行链，其中封装了最终执行的处理器，以及在执行处理器前后要执行的拦截器链，即把与改签请求匹配的所有的拦截器链式封装带处理器执行链中，以供后序使用</p></blockquote><h4 id="3-获取处理器适配器"><a class="markdownIt-Anchor" href="#3-获取处理器适配器"></a> 3 获取处理器适配器</h4><blockquote><p>根据请求的类型不同，又需要使用不同的适配器去执行处理器，要想使用对应的处理器适配器执行处理器，需要获取对应的适配器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回支持传入的处理器对象的处理器适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 遍历处理适配器列表，调用supports方法，找到支持该处理器的适配器</span></span><br><span class="line">      <span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="comment">// 按照顺序查找第一个支持的适配器被返回</span></span><br><span class="line">         <span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">            <span class="keyword">return</span> adapter;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class="line">         <span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​处理器适配器不但是执行处理器，而且还有更大的作用即适配，用于把请求参数适配为处理器需要的参数，并执行处理器，之后再把处理器的返回值适配成ModelAndVIew统一的模型视图类型，用于后序操作做统一的处理。</p><p>​对于@RequestMapping注解注册的处理器，类型为HandlerMethod，通过RequestMappingHandlerMapping返回。对弈该类型的处理器，其适配器为RequestMappingHandlerAdapter，内部处理逻辑极其复杂包括参数绑定和返回值处理。</p></blockquote><h4 id="4-处理http缓存"><a class="markdownIt-Anchor" href="#4-处理http缓存"></a> 4 处理HTTP缓存</h4><blockquote><p>​在获取处理适配器之后，额外添加了用于支持HTTP缓存的功能，因为该功能是上层统一功能，故直接在通用处理逻辑中天健</p><p>​HTTP缓存是HTTP协议标准中的定义，用于提高HTTP请求的效率。允许浏览器对GET请求获取的资源进行缓存，如css，js等，图片资源，在下次浏览器发起相同的请求时，会携带本地缓存的资源时间或其他与资源相关的信息作为请求头来传递，如果通过If-Modified-Since请求头携带本地缓存的资源的最近一次修改时间。而在服务器的处理逻辑中，则根据该资源的最后修改时间与请求信息中的一些标志信息做对比判断，如果判断结果是请求方缓存仍然有效，则直接返回状态码304，表示服务端为此资源进行修改，可以直接使用缓存中的资源。通过这种缓存方式大大较少了请求内耗，对于客户端来说体验更加友好，对于服务端来说，压力会更小。</p><p>​这一段逻辑是为了实现缓存目的而出现。首先缓存只支持GET和HEAD请求，再通过处理适配器的getLastModified方法获取当前请求与请求处理器对应的资源的最后一次修改的时间，一般对于静态资源有最后一次修改时间。之后调用new ServletWebRequest(request,response).checkNotModified(lastModified)检查当前请求中携带的缓存信息是否过期，如果未过期，则直接返回304，不在执行后序处理，如果已过期，直接按照原逻辑执行后序处理</p><p>​对处理器方法来说，以这种方式获取的是动态资源，动态资源不进行缓存，所以lastModified的值为-1</p></blockquote><h4 id="5-执行前置拦截器链"><a class="markdownIt-Anchor" href="#5-执行前置拦截器链"></a> 5 执行前置拦截器链</h4><blockquote><p>​在查找请求处理器时，返回了请求处理器执行链，在其中封装了拦截器链，用于在执行请求逻辑前进行拦截、执行请求逻辑之后添加后置处理，还可以拦截所有请求处理，在所有处理完成时或发生异常时添加完成后操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行已注册拦截器的处理前拦截方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; 返回是否需要继续执行后序的处理，如果为false则表示请求被拦截器拦截，不再执行后序处理，否则继续执行后序处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">   <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">         HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">          <span class="comment">// 如果返回false则直接停止执行，视为处理完成，出发拦截器完成后方法</span></span><br><span class="line">         <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">            triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="comment">//如果为true 拦截器索引为当前遍历的索引，用于提供给triggerAfterCompletion 使用</span></span><br><span class="line">         <span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​在调用triggerAfterCompletion的时候，只会调用已经执行了preHandle方法的处理器（除了当前preHandle返回false的）。这就是索引interceptorIndex的作用</p></blockquote><h4 id="6-处理器适配器执行"><a class="markdownIt-Anchor" href="#6-处理器适配器执行"></a> 6 处理器适配器执行</h4><blockquote><p>​在完成上面的所有处理之后，会进入处理适配的执行逻辑，这里只是简单调用才处理器的handler方法，返回ModleAndView的值。</p><p>​这个方法是整个请求处理最核心的方法，也是在调用了这个方法之后，最终才调用了处理器方法。所有对请求处理逻辑的封装都是在这个方法内部</p></blockquote><h4 id="7-返回视图名处理"><a class="markdownIt-Anchor" href="#7-返回视图名处理"></a> 7 返回视图名处理</h4><blockquote><p>​在处理适配器执行完成之后，返回了ModelAndView类型的返回值，在很多的情况下，返回值不包含视图，但对于响应结果来说，没有视图就无法产生响应，故此处会将执行默认的视图查找逻辑，以对此返回值应用默认视图。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do we need view name translation?</span></span><br><span class="line"><span class="comment"> * 应用视图默认名称 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyDefaultViewName</span><span class="params">(HttpServletRequest request, <span class="meta">@Nullable</span> ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 如果返回值不为空，并且不包含视图</span></span><br><span class="line">   <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;</span><br><span class="line">       <span class="comment">// 根据逻辑获取默认的视图名称</span></span><br><span class="line">      String defaultViewName = getDefaultViewName(request);</span><br><span class="line">       <span class="comment">// 如果获取的默认视图名称不为null，则将设置为ModelAndView的视图名</span></span><br><span class="line">      <span class="keyword">if</span> (defaultViewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">         mv.setViewName(defaultViewName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过视图名翻译器来根据请求获取视图名称</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getDefaultViewName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.viewNameTranslator != <span class="keyword">null</span> ? <span class="keyword">this</span>.viewNameTranslator.getViewName(request) : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​在视图名的获取逻辑中又出现了新的组件ViewNameTranslator,其类型为RequestToViewNameTranslator该组件的作用是根据请求获取一个视图名称,此处该组件其默认实现为DefaultReqeustToViewNameTranlator</p><p>​在该实现中，获取视图名的逻辑为获取请求路径，并拼接此实现中的前缀和后缀，作为默认的视图名，包括路径。默认的前缀、后缀都为空字符串，所以可直接视为视图名就是请求路径。</p></blockquote><h4 id="8-执行后置拦截器链"><a class="markdownIt-Anchor" href="#8-执行后置拦截器链"></a> 8 执行后置拦截器链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行拦截器链中的后置拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取全部的拦截器</span></span><br><span class="line">   HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">   <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">         HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">         interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-处理返回值与响应"><a class="markdownIt-Anchor" href="#9-处理返回值与响应"></a> 9 处理返回值与响应</h4><blockquote><p>​通过方法processDispatchResult，处理前面过程中产生的分发结果，在无异常的时候主要的处理对象是处理适配器返回的ModelAndView。发生异常的时候，处理对象为产生的异常，异常处理结果为ModelAndView ，使用此ModelAndView继续执行后序处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于处理适配器调用处理器后适配过的ModelAndView结果，或者发生异常时把异常处理为ModelAndView结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 标记是否为error视图</span></span><br><span class="line">   <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 如果出现了异常</span></span><br><span class="line">   <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 如果异常类型为ModelAndViewDefiningException</span></span><br><span class="line">      <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">  <span class="comment">// 直接使用异常中封装的ModleAndView作为最终的ModleAndView结果</span></span><br><span class="line">         mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 其他异常类型,先获取处理器</span></span><br><span class="line">         Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">          <span class="comment">// 执行process处理器异常方法,获取了处理器异常结果后的得到的ModleAndView结果</span></span><br><span class="line">          mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">          <span class="comment">// 如果mv不为空,则说明返回了包含异常的视图,即返回的视图为异常视图</span></span><br><span class="line">         errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">   <span class="comment">//  如果视图与模型不为空,且视图与模型没有标记为被清理(被清理表示调用过ModelAndView的clear方法,清理后ModelAndView相当于Null)</span></span><br><span class="line">   <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">       <span class="comment">// 视图与模型不为空时,执行渲染视图的操作</span></span><br><span class="line">      render(mv, request, response);</span><br><span class="line">      <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">          <span class="comment">// 如果是异常视图,渲染后需要清楚请求属性的异常信息</span></span><br><span class="line">         WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 如果异步请求处理已经开始,则直接返回结束执行</span></span><br><span class="line">   <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">      <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 如果处理器执行链不为空时，出发拦截器的完成后方法，这里的完成方法是在请求处理正常完成时执行的。还有异常时执行的完成后方法</span></span><br><span class="line">   <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">      mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​在上面的处理过程中，有两个比较重要的方法。第一个是发生异常时，把异常处理为ModelAndView返回值逻辑processHandlerException。第二个是对返回的ModelAndVIew结果进行渲染的逻辑render</p></blockquote><h5 id="1-处理器异常的处理方法"><a class="markdownIt-Anchor" href="#1-处理器异常的处理方法"></a> 1  处理器异常的处理方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过处理器异常解析器来把产生的异常解析为一个错误视图与模型结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response 响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler 执行的处理器，也与可能为空，如果发生异常时还没有获取处理器。如在多块请求解析的时候发生异常</span></span><br><span class="line"><span class="comment"> * (for example, if multipart resolution failed)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex  在请求处理的过程中发生的异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a corresponding ModelAndView to forward to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception if no error ModelAndView found</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">processHandlerException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="meta">@Nullable</span> Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 成功和错误响应可能使用不同的内容类型</span></span><br><span class="line">   request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Check registered HandlerExceptionResolvers...</span></span><br><span class="line">   ModelAndView exMv = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 如果处理器异常解析器列表不为空</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.handlerExceptionResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (HandlerExceptionResolver resolver : <span class="keyword">this</span>.handlerExceptionResolvers) &#123;</span><br><span class="line">          <span class="comment">// 执行异常处理器拿到结果</span></span><br><span class="line">         exMv = resolver.resolveException(request, response, handler, ex);</span><br><span class="line">          <span class="comment">// 如果不为空，则将此结果作为对异常处理后的ModelAndView结果使用，中断后序遍历动作</span></span><br><span class="line">         <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 如果返回的异常ModelAndView不为null</span></span><br><span class="line">   <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 如果ModelAndView内部为空 即modle为空view为空</span></span><br><span class="line">      <span class="keyword">if</span> (exMv.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">// 设置异常属性到请求属性中</span></span><br><span class="line">         request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 如果异常的ModelAndView不包括视图</span></span><br><span class="line">      <span class="keyword">if</span> (!exMv.hasView()) &#123;</span><br><span class="line">          <span class="comment">//采用doDispatch方法中相同的处理逻辑来根据请求获取默认的视图名称</span></span><br><span class="line">         String defaultViewName = getDefaultViewName(request);</span><br><span class="line">         <span class="keyword">if</span> (defaultViewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            exMv.setViewName(defaultViewName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;Using resolved error view: &quot;</span> + exMv, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Using resolved error view: &quot;</span> + exMv);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 暴露一些异常信息到请求的属性当中</span></span><br><span class="line">      WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class="line">      <span class="keyword">return</span> exMv;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//如果没有异常处理器解析器，则原封不动的抛出原始异常，交给Web框架做处理</span></span><br><span class="line">   <span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​在把异常解析为ModelAndView结果时，其核心是处理器异常解析器组件。</p><p>​在processDispatchResult方法中，对结果进行统一的处理，进行渲染</p></blockquote><h5 id="2-渲染"><a class="markdownIt-Anchor" href="#2-渲染"></a> 2 渲染</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对指定的ModelAndView进行渲染</span></span><br><span class="line"><span class="comment"> * 这一步是一个请求的处理过程中的最后一步，其中包含了通过视图名获取视图的逻辑</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mv the ModelAndView to render</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP servlet request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP servlet response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ServletException  视图不存在或者不能解析抛出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 渲染发生任何异常抛出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// 通过Locale解析器获取请求对应的Locale</span></span><br><span class="line">   Locale locale =</span><br><span class="line">         (<span class="keyword">this</span>.localeResolver != <span class="keyword">null</span> ? <span class="keyword">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</span><br><span class="line">    <span class="comment">//设置获取的Locale为相应的Locale</span></span><br><span class="line">   response.setLocale(locale);</span><br><span class="line"><span class="comment">// 最终获取的视图</span></span><br><span class="line">   View view;</span><br><span class="line">    <span class="comment">// 如果ModelAndView 中视图为视图名，则获取这个名字</span></span><br><span class="line">   String viewName = mv.getViewName();</span><br><span class="line">   <span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 把名字解析为视图</span></span><br><span class="line">      view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">       <span class="comment">// 视图为空的时候同样排除异常</span></span><br><span class="line">      <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class="line">               <span class="string">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 如果不是视图名，而直接是一个视图类型，则获取视图</span></span><br><span class="line">      view = mv.getView();</span><br><span class="line">       <span class="comment">//视图为空时同样抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;ModelAndView [&quot;</span> + mv + <span class="string">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class="line">               <span class="string">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代理调用视图类的渲染方法</span></span><br><span class="line">   <span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line">   <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Rendering view [&quot;</span> + view + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 如果ModelAndView中的status部位为空，则设置为相应的状态码@ResponseStatus设置的状态码功能就是通过这里实现的</span></span><br><span class="line">      <span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         response.setStatus(mv.getStatus().value());</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 通过视图的渲染方法，每种模板引擎，都有其对应的视图实现，视图渲染对应于模板引擎的渲染模板</span></span><br><span class="line">      view.render(mv.getModelInternal(), request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Error rendering view [&quot;</span> + view + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中第一个关键点是通过视图名解析视图的方法resloveViewName，该方法内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, <span class="meta">@Nullable</span> Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="params"><span class="function">Locale locale, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 如果视图解析器列表不为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">               <span class="comment">//将视图名称解析为视图</span></span><br><span class="line">View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line"><span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><p>​这里又通过新的最贱—视图解析器来对视图名称进行解析，得到最终想要的视图，不同的模板引擎有不同的视图解析器，例如Thymeleaf模板引擎，对应的视图解析器为ThymeleafViewResolver，解析逻辑则是通过配置spring.thymeleaf.prefix+视图名+spring.thymeleaf.suffix的形式，从classpath下查找视图资源，并解析为具体的ThymyleafView</p><p>​获取具体的视图之后后续的处理核心就是视图渲染的方法执行。在视图渲染的方法执行过程中，通过Model对模板进行渲染，并吧渲染后的结果写入相应的输出流，最终返回给请求方。不同模板引擎对应着不同的视图，不同的视图，又有自身的渲染方法</p></blockquote><p>​</p><h4 id="10-执行完拦截器链"><a class="markdownIt-Anchor" href="#10-执行完拦截器链"></a> 10  执行完拦截器链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取全部拦截器</span></span><br><span class="line">   HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">   <span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">         HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">          <span class="comment">// 执行拦截器的afterCompletion 方法，放在try块中，以保证执行中不再向外抛出异常，因为执行此方法时可能已经发生异常了，而该方法的执行不会再对内部发生的异常进行捕获，避免覆盖上层的异常</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-清理资源"><a class="markdownIt-Anchor" href="#11-清理资源"></a> 11 清理资源</h4><blockquote><p>​在finally中，首先对异步请求处理执行了处理器执行链中的afterConcurrentHandlingStarted方法，为异步请求开始执行时添加一些逻辑。</p><p>​除此之外，核心的清理方法是对多块请求的清理。如果是多块请求，且多块请求是被处理过的，则执行多块请求占用资源的清理方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clean up any resources used by the given multipart request (if any).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> MultipartResolver#cleanupMultipart</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">      MultipartHttpServletRequest multipartRequest =</span><br><span class="line">            WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class);</span><br><span class="line">      <span class="keyword">if</span> (multipartRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 执行多块请求数据的清理</span></span><br><span class="line">         <span class="keyword">this</span>.multipartResolver.cleanupMultipart(multipartRequest);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结 :</strong></p><blockquote><p>​对于默认实现的多块请求解析器StandardServletMultipartResolver,其清理的逻辑是遍历多块数据part，如果多块数据part为文件数据，则执行它们的删除操作，以清理多块数据占用的临时文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源代码 - SpringMvc源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 - SpringMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——组合模式</title>
      <link href="/2020/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="组合模式"><a class="markdownIt-Anchor" href="#组合模式"></a> 组合模式</h1><h2 id="一-概念"><a class="markdownIt-Anchor" href="#一-概念"></a> 一 概念</h2><blockquote><p>组合（Composite Pattern）模式的定义：有时又叫作整体-部分（Part-Whole）模式，它是一种将对象组合成树状的层次结构的模式，用来表示“整体-部分”的关系，使用户对单个对象和组合对象具有一致的访问性，属于结构型<a href="http://c.biancheng.net/design_pattern/">设计模式</a>。</p></blockquote><h3 id="1-结构图"><a class="markdownIt-Anchor" href="#1-结构图"></a> 1 结构图</h3><blockquote><p>由下图可以看出，其实根节点和树枝节点本质上属于同一种数据类型，可以作为容器使用；而叶子节点与树枝节点在语义上不属于用一种类型。但是在组合模式中，会把树枝节点和叶子节点看作属于同一种数据类型（用统一接口定义），让它们具备一致行为。</p></blockquote><p><strong>这样，在组合模式中，整个树形结构中的对象都属于同一种类型，带来的好处就是用户不需要辨别是树枝节点还是叶子节点，可以直接进行操作，给用户的使用带来极大的便利。</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20201115164732400.png" alt="组合模式结构图"></p><h3 id="2-主要优点"><a class="markdownIt-Anchor" href="#2-主要优点"></a> 2 主要优点</h3><ol><li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；</li></ol><p><strong>例如：</strong><code>SpringMvc当中的参数解析器</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20201115160159399.png" alt="Mvc参数解析器"></p><ol start="2"><li>更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”；</li></ol><h3 id="3-主要缺点"><a class="markdownIt-Anchor" href="#3-主要缺点"></a> 3 主要缺点</h3><ol><li>设计较复杂，客户端需要花更多时间理清类之间的层次关系；</li><li>不容易限制容器中的构件；</li><li>不容易用继承的方法来增加构件的新功能；</li></ol><h3 id="4-分类"><a class="markdownIt-Anchor" href="#4-分类"></a> 4 分类</h3><ul><li>安全性</li></ul><blockquote><p>​在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。</p></blockquote><ul><li>非安全</li></ul><blockquote><p>​在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。但其缺点是：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。</p></blockquote><h2 id="二-应用"><a class="markdownIt-Anchor" href="#二-应用"></a> 二 应用</h2><h3 id="1-权限管理菜单与功能点"><a class="markdownIt-Anchor" href="#1-权限管理菜单与功能点"></a> 1 权限管理——菜单与功能点</h3><blockquote><p>权限管理,菜单分为一级菜单、二级菜单、三级菜单、四级菜单、功能点</p></blockquote><h3 id="2-结构图"><a class="markdownIt-Anchor" href="#2-结构图"></a> 2 结构图</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20201115155505436.png" alt="结构图"></p><h3 id="3-数据库表"><a class="markdownIt-Anchor" href="#3-数据库表"></a> 3 数据库表</h3><p><img src= "/img/loading.gif" data-lazy-src="/2020/11/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/image-20201115175513119.png" alt="菜单功能点数据库"></p><blockquote><p>​关于这里数据库表的设计，不做讨论，因为不同的设计，处理方式不同，之阐述对于组合模式的一个实例</p></blockquote><h3 id="4-构建组合树关系"><a class="markdownIt-Anchor" href="#4-构建组合树关系"></a> 4 构建组合树关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/15 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 抽象菜单，祖先类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMenu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String id;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/15 18:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 菜单类对应树杈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">AbstractMenu</span> </span>&#123;</span><br><span class="line">    List&lt;AbstractMenu&gt; menus = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMenu</span><span class="params">(AbstractMenu abstractMenu)</span> </span>&#123;</span><br><span class="line">        menus.add(abstractMenu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/15 18:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 功能点类对应树叶</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Function</span> <span class="keyword">extends</span> <span class="title">AbstractMenu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String funcation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Curiosity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/11/15 18:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Build</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MenuDao menuDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FunctionDao functionDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(Menu rootMenu)</span> </span>&#123;</span><br><span class="line">        List&lt;Menu&gt; menus = menuDao.findMenusByMenusId(rootMenu.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Menu menu : menus) &#123;</span><br><span class="line">            rootMenu.addMenu(menu);</span><br><span class="line">            buildTree(menu);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Function&gt; functions = functionDao.findFunctionByMenusId(rootMenu.getId());</span><br><span class="line">        <span class="keyword">for</span> (Function function : functions) &#123;</span><br><span class="line">            rootMenu.addMenu(function);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 - 结构型设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 - 结构型设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring异常解析</title>
      <link href="/2020/11/15/Spring%E5%BC%82%E5%B8%B8%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/11/15/Spring%E5%BC%82%E5%B8%B8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一-异常解析器使用"><a class="markdownIt-Anchor" href="#一-异常解析器使用"></a> 一、异常解析器使用</h1><ul><li><strong><code>@ExceptionHandler</code></strong></li></ul><blockquote><p>仅能处理**<code>HandlerMethod</code>**方式的异常，基本上满足99.9%的日常开发需求</p></blockquote><ul><li><strong><code>AbstractHandlerExceptionResolver</code></strong></li></ul><blockquote><p>HandlerResolver实现类，可以实现<code>排序</code>（实现了Ordered接口）与<code>条件过滤</code>，这里的条件过滤主要支持两种类型的条件过滤。首先是为特定的Handler实例支持setMappedHandlers，第二个是支持与Class＃setMappedHandlerClasses相关的特定子类的实例</p></blockquote><ul><li><code>DefaultHandlerExceptionResolver</code></li></ul><blockquote><p>解析标准Spring MVC异常并将其转换为相应的HTTP状态代码，也就是说，如果HandlerMapping参数无法解析，或者其他未解析的参数都由于此参数而转换为相应的response.sendError（HttpServletResponse.SC_NOT_FOUND),用于处理试图</p></blockquote><ul><li><strong><code>ResponseEntityExceptionHandler</code></strong></li></ul><blockquote><p>为了解决返回视图的问题，spring提供了一个返回ResponseEntity ResponseEntityExceptionHandler的解决方案。通过@ExpectionHandler和@ControlerAdvice一起处理ResponseEntityExceptionHandler。这是上述DefaultHandlerExceptionResolver的副本，需要继承此类，然后在该类上使用@ControllerAdvice，并且必须全局注册ExceptionHandlerExceptionResolver</p></blockquote><ul><li><strong><code>ResponseStatusExceptionResolver</code></strong></li></ul><blockquote><p><strong><code>@ResponseStatus</code>标注在异常类上此处理器才会处理</strong>，而不是标注在处理方法上，或者所在类上，<strong>所以一般用于自定义异常时使用</strong>。</p></blockquote><ul><li><strong><code>SimpleMappingExceptionResolver</code></strong></li></ul><blockquote><p>顾名思义它就是通过<strong>简单映射</strong>关系来决定由<strong>哪个错误视图</strong>来处理当前的异常信息。它提供了多种映射关系可以使用：</p></blockquote><ul><li><code>ExceptionHandlerExceptionResolver</code></li></ul><blockquote><p>它是一个会在<strong>Class及Class的父类</strong>中找出带有<code>@ExceptionHandler</code>注解的类，该类带有key为<code>Throwable</code>，value为<code>Method</code>的<strong>缓存属性</strong>，提供匹配效率。</p></blockquote><p><strong>示例：</strong></p><h2 id="1-全局异常处理"><a class="markdownIt-Anchor" href="#1-全局异常处理"></a> 1. 全局异常处理</h2><blockquote><p>全局异常处理，指的是处理整个应用程序的异常，包括<code>过滤器</code>与<code>Controller</code></p></blockquote><h3 id="globalexpectionhandler"><a class="markdownIt-Anchor" href="#globalexpectionhandler"></a> GlobalExpectionHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExpectionHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未知错误处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; unknow error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 兜底处理器，避免返回视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleHttpRequestMethodNotSupported</span><span class="params">(HttpRequestMethodNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...定义自己的处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.handleHttpRequestMethodNotSupported(ex, headers, status, request);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="globalerrorcontroller"><a class="markdownIt-Anchor" href="#globalerrorcontroller"></a> GlobalErrorController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalErrorController</span> <span class="keyword">extends</span> <span class="title">BasicErrorController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ErrorAttributes errorAttributes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlobalErrorController</span><span class="params">(ErrorAttributes errorAttributes, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(errorAttributes, serverProperties.getError());</span><br><span class="line">        <span class="keyword">this</span>.errorAttributes = errorAttributes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">errorJson</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">&quot;error &quot;</span>, status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-自定义异常解析器"><a class="markdownIt-Anchor" href="#二-自定义异常解析器"></a> 二、自定义异常解析器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomHandlerExpectionResovle</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomHandlerExpectionResovle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// 仅对TestController类型的处理器做处理</span></span><br><span class="line">        setMappedHandlerClasses(TestController.class);</span><br><span class="line">        <span class="comment">// 这里可以拿到对应的mappedHandlers 进行设置</span></span><br><span class="line"><span class="comment">//        setMappedHandlers();</span></span><br><span class="line">        setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldApplyTo</span><span class="params">(HttpServletRequest request, Object handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.shouldApplyTo(request, ((HandlerMethod) handler).getBean());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-源码初探"><a class="markdownIt-Anchor" href="#三-源码初探"></a> 三、源码初探</h1><h2 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1.</h2><h2 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2.</h2><h1 id="四-总结"><a class="markdownIt-Anchor" href="#四-总结"></a> 四、总结</h1><p><img src= "/img/loading.gif" data-lazy-src="/2020/11/15/Spring%E5%BC%82%E5%B8%B8%E8%A7%A3%E6%9E%90/image-20201115011418803.png" alt="image-20201115011418803"></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC - 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC - 异常解析器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
